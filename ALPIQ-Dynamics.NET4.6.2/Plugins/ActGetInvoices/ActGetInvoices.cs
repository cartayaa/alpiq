// <copyright file="Plugin.cs" company="Licence Owner">
// Copyright (c) 2016 All Rights Reserved
// </copyright>
// <author>Licence Owner</author>
// <date>2/5/2016 11:07:27 AM</date>
// <summary>Implements the Plugin Workflow Activity.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
namespace ActGetInvoices
{
    using System;
    using System.Collections.ObjectModel;
    using System.Globalization;
    using System.Linq;
    using System.ServiceModel;
    using Microsoft.Xrm.Sdk;
    using Microsoft.Xrm.Sdk.Query;
    using System.IO.Compression;
    using System.IO;
    using System.IO.Packaging;
    using System.Collections.Generic;
    using System.Text;
    using System.Net;
    using System.Web.Services.Protocols;

    /// <summary>
    /// Base class for all Plugins.
    /// </summary>    
    public class ActGetInvoices : IPlugin
    {

        private ITracingService tracingService;
        private IPluginExecutionContext PluginExecutionContext; ///< Contexto de ejecución del plugin
        private IOrganizationServiceFactory factory;
        private IOrganizationService service;

        private bool _log = false; ///< Indica si se activa o no el log. Esta variable debe inicializarse según el parámetro recibido en el constructor.
        private String ficherolog = "C:\\Users\\ActGetInvoices.log";  ///< Fichero de log. Esta variable debe inicializarse según el parámetro recibido en el constructor.
        private const Char SEPARADOR = '#'; ///< Constante para el separador a usar en el parámetro que recibe el constructor
        private String prefijo;
        private String _rutaZipPdf = @"C:\Program Files\Microsoft Dynamics CRM\CRMWeb\Atos-Informes\Facturas\Zips\";
        private String _urlZipPdf = @"http://crmacciona01/Atos-Informes/Facturas/Zips/";

        private String usuarioFTP = "Manu";
        private String passwdFTP = "Atos.1234";
        /**
		// <summary>
		// Constructor de la clase
		// </summary>
        // <param name="parametros">Cadena en la que se indica si se escribe log y donde: LOG#C:\\RutaDelLog\\Fichero.log</param>
		// <remarks>
		// Recibe una cadena de texto incluyendo los parámetros (separados por el carácter #)
		// - El primer parámetro activa/desactiva la escritura del fichero log (LOG activa)
		// - El segundo parámetro es el nombre (incluyendo ruta) del fichero de log.
		// </remarks>
         */
        public ActGetInvoices(String parametros)
        {
            prefijo = "atos_";
            if (String.IsNullOrEmpty(parametros) == false)
            {
                String[] arrayPar = parametros.Split(SEPARADOR);
                if (arrayPar.Length > 0)
                {
                    prefijo = arrayPar[0];
                    if (arrayPar[1] == "LOG")
                        _log = true;
                    if (arrayPar.Length > 2)
                        ficherolog = arrayPar[2];
                    else
                        _log = false;

                    if (arrayPar.Length > 3)
                        _rutaZipPdf = arrayPar[3];

                    if (arrayPar.Length > 4)
                        _urlZipPdf = arrayPar[4];
                        
                }
            }
        }

        private void CreaZip(String nombreZip, List<String> nombrePdfs, String rutaPdfs)
        {
            byte[] zippedBytes;
            int offset = 0;
            
            writelog("CreaZip antes de MemoryStream");
            using (MemoryStream zipStream = new MemoryStream())
            {

                writelog("CreaZip antes de Open zipStream ");
                using (Package package = Package.Open(zipStream, FileMode.Create))
                {

                    writelog("CreaZip antes de for de nombrePdfs: " + nombrePdfs.Count.ToString());
                    for (int i = 0; i < nombrePdfs.Count; i++)
                    {
                        writelog("CreaZip antes de CreatePart " + @"/" + nombrePdfs[i]);
                        PackagePart document = package.CreatePart(new Uri(@"/" + nombrePdfs[i], UriKind.Relative), "");
                        
                        writelog("CreaZip antes de ReadAllBytes " + rutaPdfs + nombrePdfs[i]);
                        byte[] data = File.ReadAllBytes(rutaPdfs + nombrePdfs[i]);
                        writelog("CreaZip antes de MemoryStream de data");
                        using (MemoryStream dataStream = new MemoryStream (data))
                        {
                            writelog("CreaZip offset1 " + offset.ToString() + " " + data.Length.ToString());
                            document.GetStream().Write(data, 0, (int)dataStream.Length);
                            
                            offset += (int)dataStream.Length;

                            writelog("CreaZip offset2 " + offset.ToString() + " " + document.GetStream().Length.ToString());
                        }
                    }
                }
                writelog("CreaZip antes de convertir a array de bytes");
                zippedBytes = zipStream.ToArray();
            }
            writelog("CreaZip antes de escribir a disco " + nombreZip);
            File.WriteAllBytes(nombreZip, zippedBytes);
            writelog("CreaZip despues de escribir a disco " + nombreZip);
        }



        /**
		// <summary>
		// Función privada para escribir una traza
        // </summary>
        // <param name="texto">Texto a escribir en el fichero de log</param>
        // <remarks>
        // Si el log está activado escribe el mensaje en el fichero de log.
        // </remarks>
         */
        private void writelog(String texto)
        {
            tracingService.Trace(texto);
            if (_log == true)
                System.IO.File.AppendAllText(ficherolog, texto + "\r\n");
        }


        private void httpDescargaPdf(List<String> httpPdfs, String nombreZip, String rutaPdfs)
        {
            writelog("descargaPdf 1");
            PaqueteZip pz = new PaqueteZip(nombreZip);

            for (int i = 0; i < httpPdfs.Count; i++)
            {
                writelog("descargaPdf ftp: " + httpPdfs[i]);
                String nbPdf;
                String[] rutaPdf = httpPdfs[i].Split('/');

                if (rutaPdf.Length > 0)
                    nbPdf = rutaPdf[rutaPdf.Length - 1];
                else
                    nbPdf = httpPdfs[i];
                writelog("descargaPdf nombre pdf: " + nbPdf);


                WebClient client = new WebClient();
                writelog("Despues de WebClient");
                client.DownloadFile(httpPdfs[i], rutaPdfs + nbPdf);
                writelog("Despues de DownloadFile " + httpPdfs[i] + " en " + rutaPdfs + nbPdf);

                pz.AddFile(rutaPdfs + nbPdf, nbPdf);

                /*WebRequest req = WebRequest.Create(httpPdfs[i]);
                writelog("Despues de WebRequest.Create");
                WebResponse response = req.GetResponse();
                writelog("Despues de GetResponse");
                response.ContentType = "Application/pdf";
                
                Stream responseStream = response.GetResponseStream();
                writelog("Despues de GetResponseStream: " + responseStream.Length.ToString());
                pz.AddFile(responseStream, nbPdf); // <---- Se queda aquí.*/
                writelog("Despues de AddFile");

            }
            pz.Close();
        }


        private void descargaPdf(List<String> ftpPdfs, String nombreZip)
        {
            writelog("descargaPdf 1");
            PaqueteZip pz = new PaqueteZip(nombreZip);

            for (int i = 0; i < ftpPdfs.Count; i++)
            {
                writelog("descargaPdf ftp: " + ftpPdfs[i]);
                String nbPdf;
                String [] rutaPdf = ftpPdfs[i].Split('/');

                if (rutaPdf.Length > 0)
                    nbPdf = rutaPdf[rutaPdf.Length - 1];
                else
                    nbPdf = ftpPdfs[i];
                writelog("descargaPdf nombre pdf: " + nbPdf);

                FtpWebRequest request = (FtpWebRequest)WebRequest.Create(ftpPdfs[i]);
                request.UsePassive = false;
                writelog("Despues de WebRequest.Create");
                request.Method = WebRequestMethods.Ftp.DownloadFile;
                writelog("Despues de WebRequestMethod");
                request.Credentials = new NetworkCredential(usuarioFTP, passwdFTP);
                writelog("Despues de Credentials");
                FtpWebResponse response = (FtpWebResponse)request.GetResponse();
                writelog("Despues de FtpWebResponse");

                Stream responseStream = response.GetResponseStream();
                writelog("Despues de GetResponseStream: " + responseStream.Length.ToString());
                pz.AddFile(responseStream, nbPdf); // <---- Se queda aquí.
                writelog("Despues de AddFile");

            }
            pz.Close();
        }

        private void subeZip(String rutaZip, String nombreZip)
        {
            // Get the object used to communicate with the server.
            FtpWebRequest request = (FtpWebRequest)WebRequest.Create("ftp://193.106.176.169/Facturas/Zips/" + nombreZip);
            request.Method = WebRequestMethods.Ftp.UploadFile;

            // This example assumes the FTP site uses anonymous logon.
            request.Credentials = new NetworkCredential(usuarioFTP, passwdFTP);

            // Copy the contents of the file to the request stream.
            StreamReader sourceStream = new StreamReader(rutaZip + nombreZip);
            byte[] fileContents = Encoding.UTF8.GetBytes(sourceStream.ReadToEnd());
            sourceStream.Close();
            request.ContentLength = fileContents.Length;

            Stream requestStream = request.GetRequestStream();
            requestStream.Write(fileContents, 0, fileContents.Length);
            requestStream.Close();

            FtpWebResponse response = (FtpWebResponse)request.GetResponse();

            response.Close();
        }
        
        /// <summary>
        /// Función que llama al WS de Ems para obtener los PDFs de las facturas y los zipea.
        /// </summary>
        /// <param name="pFacturas"></param>
        /// <param name="pNombreZip"></param>
        private int descargarPdfWs(List<string> pFacturas, String pNombreZip)
        {
            int salida = 0;
            PaqueteZip facturasZippeadas = new PaqueteZip(pNombreZip);
            foreach (String nombreFactura in pFacturas)
            {
                try
                {
                    ServicioEms.WebClientesClient proxyEms = new ServicioEms.WebClientesClient();
                    byte[] res = proxyEms.getPdfFactura(nombreFactura);

                    if (res != null)
                    {
                        facturasZippeadas.AddFile(new MemoryStream(res), nombreFactura.Replace('/', '_') + ".pdf");
                        salida++;
                    }
                    //File.WriteAllBytes(rutaPdfs + "prueba.pdf", res);
                }
                catch (SoapException soex)
                {
                    tracingService.Trace("error" + soex.Detail.InnerText);
                    writelog(String.Format("Error zipeando la factura {0}:{1}",nombreFactura, soex.Detail.InnerText));
                }
                catch (Exception ex)
                {
                    tracingService.Trace("error:" + ex.Message);
                    writelog(String.Format("Error zipeando la factura {0}:{1}", nombreFactura, ex.Message));
                }
            }
            facturasZippeadas.Close();
            return salida;
        }

        /// <summary>
        /// Executes the plug-in.
        /// </summary>
        /// <param name="serviceProvider">The service provider.</param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics CRM caches plug-in instances. 
        /// The plug-in's Execute method should be written to be stateless as the constructor 
        /// is not called for every invocation of the plug-in. Also, multiple system threads 
        /// could execute the plug-in at the same time. All per invocation state information 
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        public void Execute(IServiceProvider serviceProvider)
        {

            tracingService = (ITracingService)serviceProvider.GetService(typeof(ITracingService));

            PluginExecutionContext = (IPluginExecutionContext)serviceProvider.GetService(typeof(IPluginExecutionContext));

            // Obtain the Organization Service factory service from the service provider
            factory = (IOrganizationServiceFactory)serviceProvider.GetService(typeof(IOrganizationServiceFactory));

            // Use the factory to generate the Organization Service.
            service = factory.CreateOrganizationService(PluginExecutionContext.UserId);

            writelog("-----------------------------------------");
            writelog(DateTime.Now.ToLocalTime().ToString());
            writelog("Plugin ActGetInvoices");
            writelog("Mensaje: " + PluginExecutionContext.MessageName);

            if (PluginExecutionContext.MessageName != prefijo + "GetInvoices")
                return;


            String listaIds = PluginExecutionContext.InputParameters["IdsInvoices"] as String;
            String[] aIds = listaIds.Split(',');
            
            List<String> httpPdfs = new List<String>();

            for (int i = 0; i < aIds.Length; i++)
            {   
                Guid id = new Guid(aIds[i].Replace("{", "").Replace("}", ""));
                writelog(" Guid: " + id.ToString());
                Entity ent = service.Retrieve("atos_facturas", id, new ColumnSet(new String[] { "atos_name" }));
                if (ent.Attributes.Contains("atos_name"))
                {
                    httpPdfs.Add(ent.Attributes["atos_name"].ToString());
                }
            }

            if (httpPdfs.Count > 0)
            { 

                String fecha = DateTime.Now.ToLocalTime().Year + DateTime.Now.ToLocalTime().Month + DateTime.Now.ToLocalTime().Day + "-" + DateTime.Now.ToLocalTime().Hour + DateTime.Now.ToLocalTime().Minute + DateTime.Now.ToLocalTime().Second + DateTime.Now.ToLocalTime().Millisecond;
                writelog("Zip: " + "facturas-" + fecha + ".zip");
                if (httpPdfs.Count > 1)
                {
                    int numFrasZip = descargarPdfWs(httpPdfs, _rutaZipPdf + "facturas-" + fecha + ".zip");
                    
                    writelog("Despues de zipear las facturas Pdfs");
                    String nombreZip = _urlZipPdf + "facturas-" + fecha + ".zip";
                    String mensaje = String.Empty;
                    if (numFrasZip == 0)
                    {
                        nombreZip = String.Empty;
                        mensaje = "No se han podido recuperar facturas.";
                    }
                    else if (numFrasZip == 1)
                    {
                        mensaje = String.Format ("Se ha recuperado una factura de {0} facturas seleccionadas.", httpPdfs.Count);
                    }
                    else
                    {
                        mensaje = String.Format("Se han recuperado {0} facturas de {1} facturas seleccionadas", numFrasZip.ToString(), httpPdfs.Count);
                    }

                    PluginExecutionContext.OutputParameters["NombreZip"] = nombreZip;
                    PluginExecutionContext.OutputParameters["Mensaje"] = mensaje;
                    
                }
                else
                {
                    try
                    {
                        ServicioEms.WebClientesClient proxyEms = new ServicioEms.WebClientesClient();
                        writelog("Id Factura:" + httpPdfs[0]);
                        byte[] res = proxyEms.getPdfFactura(httpPdfs[0]);

                        if (res != null)
                        {
                            writelog("Ems devuelve cosas");
                            File.WriteAllBytes(_rutaZipPdf + "facturas-" + fecha + httpPdfs[0].Replace('/', '_') + ".pdf", res);
                            PluginExecutionContext.OutputParameters["NombreZip"] = _urlZipPdf + "facturas-" + fecha + httpPdfs[0].Replace('/', '_') + ".pdf";
                        }
                        else
                        {
                            writelog("Ems no devuelve");
                            PluginExecutionContext.OutputParameters["NombreZip"] = String.Empty;
                            PluginExecutionContext.OutputParameters["Mensaje"] = "No se ha podido recuperar la factura.";
                        }
                    }
                    catch (SoapException soex)
                    {
                        tracingService.Trace("error" + soex.Detail.InnerText);
                        writelog("error" + soex.Detail.InnerText);
                        PluginExecutionContext.OutputParameters["NombreZip"] = String.Empty;
                        PluginExecutionContext.OutputParameters["Mensaje"] = "No se ha podido recuperar la factura.";
                    }
                    catch (Exception ex)
                    {
                        tracingService.Trace("error:" + ex.Message);
                        writelog("error:" + ex.Message);
                        PluginExecutionContext.OutputParameters["NombreZip"] = String.Empty;
                        PluginExecutionContext.OutputParameters["Mensaje"] = "No se ha podido recuperar la factura.";
                    }
                }
                

            }

            /*
            writelog("Abriendo excel como zip");
            FileStream zipStream = File.Open(@"D:\Tmp\Informes\ExcelAperturas_15-000010-01_01-02-2016_822016736_2.xlsx", FileMode.Open);
            writelog("Abriendo Package");
            Package paquete = ZipPackage.Open(zipStream, FileMode.Open);
            writelog("Abriendo xl/styles.xml");
            PackagePart stylesPart = paquete.GetPart(new Uri(@"/xl/styles.xml", UriKind.Relative));
            writelog("Abriendo xl/workbook.xml");
            PackagePart workbookPart = paquete.GetPart(new Uri(@"/xl/workbook.xml", UriKind.Relative));
            
            writelog("Abriendo StreamReader 1");
            StreamReader sr = new StreamReader(stylesPart.GetStream());
            writelog("Leyendo xml a string 1");
            String strXml = sr.ReadToEnd();
            int longitud = strXml.Length;
            writelog("Modificando string xml 1: " + strXml.Length);
            strXml = strXml.Replace("<x:ext","<ext").Replace("</x:ext>","</ext>");
            if (longitud > strXml.Length)
                strXml = strXml.PadRight(longitud);
            writelog("Tras Replace string xml 1: " + strXml.Length);
            writelog("strXml: " + strXml);
            writelog("Cerrando StreamReader 1");
            sr.Close();
            writelog("Convirtiendo a array de bytes 1");
            byte[] decBytes = Encoding.UTF8.GetBytes(strXml);
            writelog("Escribiendo PackagePart 1 " + decBytes.Length);
            writelog("ContenType: " + stylesPart.ContentType + " CompressionOption: " + stylesPart.CompressionOption.ToString() + " - 1");
            //paquete.DeletePart(PackUriHelper.CreatePartUri(new Uri(@"/xl/styles.xml", UriKind.Relative)));
            //stylesPart = paquete.CreatePart(PackUriHelper.CreatePartUri(new Uri(@"/xl/styles.xml", UriKind.Relative)), "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml", CompressionOption.Normal);
            stylesPart.GetStream().Write(decBytes, 0, decBytes.Length);

            writelog("Abriendo StreamReader 2");
            sr = new StreamReader(workbookPart.GetStream());
            writelog("Leyendo xml a string 2");
            strXml = sr.ReadToEnd();
            writelog("Modificando string xml 2");
            longitud = strXml.Length;

            strXml = strXml.Replace("<x:ext", "<ext").Replace("</x:ext>", "</ext>");
            if (longitud > strXml.Length)
                strXml = strXml.PadRight(longitud);

            writelog("strXml: " + strXml);
            writelog("Cerrando StreamReader 2");
            sr.Close();
            writelog("Convirtiendo a array de bytes 2");
            decBytes = Encoding.UTF8.GetBytes(strXml);
            writelog("Escribiendo PackagePart 2");

            writelog("ContenType: " + workbookPart.ContentType + " CompressionOption: " + workbookPart.CompressionOption.ToString() + " - 2");
            //paquete.DeletePart(PackUriHelper.CreatePartUri(new Uri(@"/xl/workbook.xml", UriKind.Relative)));
            //workbookPart = paquete.CreatePart(PackUriHelper.CreatePartUri(new Uri(@"/xl/workbook.xml", UriKind.Relative)), "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml", CompressionOption.SuperFast);

            workbookPart.GetStream().Write(decBytes, 0, decBytes.Length);

            //writelog("Cerrando PackagePart 1");
            //stylesPart.GetStream().Close();
            //writelog("Cerrando PackagePart 2");
            //workbookPart.GetStream().Close();
            writelog("Cerrando Package");
            paquete.Close();
            writelog("Cerrando FileStream");
            zipStream.Close();
            writelog("Final");
            */
            /*
             http://crmacciona01/Atos-Informes/Contratos/I00013-20151104-001_20151111_091139.pdf
http://crmacciona01/Atos-Informes/Contratos/I00013-20151104-001_20151111_091139-0.pdf
http://crmacciona01/Atos-Informes/Contratos/M-S00019-20151016-1_20151103_111133.pdf
             */
            /*
            nPdfs.Add("I00013-20151104-001_20151111_091139.pdf");
            nPdfs.Add("I00013-20151104-001_20151111_091139-0.pdf");



            String listaIds = PluginExecutionContext.InputParameters["IdsInvoices"] as String;
            writelog("ListaIds: " + listaIds);
            String[] aIds = listaIds.Split(',');
           
            for (int i = 0; i < aIds.Length; i++)
            {*/
                /*{
                    writelog("Id[" + i.ToString() + "]: " + aIds[i].Replace("{", "").Replace("}", ""));
                    Guid id = new Guid(aIds[i].Replace("{", "").Replace("}", ""));
                    writelog(" Guid: " + id.ToString());
                    Entity ent = service.Retrieve("contact", id, new ColumnSet(new String[] { "fullname" }));
                    if (ent.Attributes.Contains("fullname"))
                        writelog(" Name: " + ent.Attributes["name"].ToString());
                }*/
                /*{
                    
                    writelog("Id[" + i.ToString() + "]: " + aIds[i]);
                    Guid id = new Guid(aIds[i]);
                    writelog(" Guid: " + id.ToString());
                    Entity contacto = service.Retrieve("contact", id, new ColumnSet(new String[] { "firstname", "lastname" }));
                    if (contacto.Attributes.Contains("firstname"))
                        writelog(" FirstName: " + contacto.Attributes["firstname"].ToString());
                    if (contacto.Attributes.Contains("lastname"))
                        writelog(" LastName: " + contacto.Attributes["lastname"].ToString());


                    writelog("Antes de CreaZip");
                    try
                    {
                        CreaZip(rutaZip + "mifichero.zip", nPdfs, rutaPdfs);
                    }
                    catch (Exception ex)
                    {
                        writelog("Excepción " + ex.Message);
                        writelog("Excepción " + ex.ToString());
                        throw new Exception(ex.Message);
                    }

                    writelog("Antes de escribir mifichero2");
                    try
                    {
                        PaqueteZip zp = new PaqueteZip(rutaZip + "mifichero3.zip");
                        writelog("Antes de añadir primer fichero");
                        zp.AddFile(rutaPdfs + "I00013-20151104-001_20151111_091139.pdf", @"/Facturas/" + "I00013-20151104-001_20151111_091139.pdf");
                        writelog("Antes de añadir segundo fichero");
                        zp.AddFile(rutaPdfs + "I00013-20151104-001_20151111_091139-0.pdf", @"/Facturas/" + "I00013-20151104-001_20151111_091139-0.pdf");
                        writelog("Antes de cerrar");
                        zp.Close();
                    }
                    catch (Exception ex)
                    {
                        writelog("Excepción " + ex.Message);
                        writelog("Excepción " + ex.ToString());
                        throw new Exception(ex.Message);
                    }
                    writelog("Despues de escribir mifichero2");
                }
            }*/
        }
    }
}