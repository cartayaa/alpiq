// <copyright file="Plugin.cs" company="Licence Owner">
// Copyright (c) 2015 All Rights Reserved
// </copyright>
// <author>Licence Owner</author>
// <date>5/26/2015 2:15:21 PM</date>
// <summary>Implements the Plugin Workflow Activity.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
namespace Cups
{
    using System;
    using System.Collections.ObjectModel;
    using System.Globalization;
    using System.Linq;
    using System.ServiceModel;
    using Microsoft.Xrm.Sdk;
    using Microsoft.Xrm.Sdk.Query;

    /// <summary>
    /// Base class for all Plugins.
    /// </summary>    
    public class Cups : IPlugin
    {
        private ITracingService tracingService;
        private IPluginExecutionContext PluginExecutionContext; ///< Contexto de ejecución del plugin
        private IOrganizationServiceFactory factory;
        private IOrganizationService service;

        private bool _log = false; ///< Indica si se activa o no el log. Esta variable debe inicializarse según el parámetro recibido en el constructor.
        private String ficherolog = "C:\\Users\\log_ActualizarEnCascada.txt";  ///< Fichero de log. Esta variable debe inicializarse según el parámetro recibido en el constructor.
        private const Char SEPARADOR = '#'; ///< Constante para el separador a usar en el parámetro que recibe el constructor

        /**
		// <summary>
		// Constructor de la clase
		// </summary>
        // <param name="parametros">Cadena en la que se indica si se escribe log y donde: LOG#C:\\RutaDelLog\\Fichero.log</param>
		// <remarks>
		// Recibe una cadena de texto incluyendo los parámetros (separados por el carácter #)
		// - El primer parámetro activa/desactiva la escritura del fichero log (LOG activa)
		// - El segundo parámetro es el nombre (incluyendo ruta) del fichero de log.
		// </remarks>
         */
        public Cups(String parametros)
        {
            if (String.IsNullOrEmpty(parametros) == false)
            {
                String[] arrayPar = parametros.Split(SEPARADOR);
                if (arrayPar.Length > 0)
                {

                    if (arrayPar[0] == "LOG")
                        _log = true;
                    if (arrayPar.Length > 1)
                        ficherolog = arrayPar[1];
                }
            }
        }


        /**
        // <summary>
        // Función privada para escribir una traza
        // </summary>
        // <param name="texto">Texto a escribir en el fichero de log</param>
        // <remarks>
        // Si el log está activado escribe el mensaje en el fichero de log.
        // </remarks>
         */
        private void writelog(String texto)
        {
            tracingService.Trace(texto);
            if (_log == true)
                System.IO.File.AppendAllText(ficherolog, texto + "\r\n");
        }


        /// <summary>
        /// Executes the plug-in.
        /// </summary>
        /// <param name="serviceProvider">The service provider.</param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics CRM caches plug-in instances. 
        /// The plug-in's Execute method should be written to be stateless as the constructor 
        /// is not called for every invocation of the plug-in. Also, multiple system threads 
        /// could execute the plug-in at the same time. All per invocation state information 
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        public void Execute(IServiceProvider serviceProvider)
        {

            tracingService = (ITracingService)serviceProvider.GetService(typeof(ITracingService));

            PluginExecutionContext = (IPluginExecutionContext)serviceProvider.GetService(typeof(IPluginExecutionContext));

            // Obtain the Organization Service factory service from the service provider
            factory = (IOrganizationServiceFactory)serviceProvider.GetService(typeof(IOrganizationServiceFactory));

            // Use the factory to generate the Organization Service.
            service = factory.CreateOrganizationService(PluginExecutionContext.UserId);

            writelog("-----------------------------------------");
            writelog(DateTime.Now.ToLocalTime().ToString());
            writelog("Plugin Actualizar Cups22 y distribuidora/subdistribuidora a partir del cups");
            writelog("Mensaje: " + PluginExecutionContext.MessageName);

            if (PluginExecutionContext.MessageName == "Update" || PluginExecutionContext.MessageName == "Create")
            {
                Entity ef = (Entity)PluginExecutionContext.InputParameters["Target"];
                if (ef.LogicalName != "atos_instalacion")
                    return;
                if (ef.Attributes.Contains("atos_cups20") == false)
                    return;

                String _cups = ef.Attributes["atos_cups20"].ToString().Substring(0, 8);


                QueryExpression _consulta = new QueryExpression("atos_distribuidora");
                _consulta.ColumnSet = new ColumnSet(new String[] { "atos_codigopuntofrontera", "atos_tipodistribuidora", "atos_distribuidoraid", "atos_distribuidoramatrizid" });

                FilterExpression _filtro = new FilterExpression();
                _filtro.FilterOperator = LogicalOperator.And;
                ConditionExpression _condicion = new ConditionExpression();
                _condicion.AttributeName = "atos_codigocups";
                _condicion.Operator = ConditionOperator.Equal;
                _condicion.Values.Add(_cups);
                _filtro.Conditions.Add(_condicion);

                writelog("Antes de Criteria.AddFilter");
                _consulta.Criteria.AddFilter(_filtro);
                writelog("Despues de Criteria.AddFilter");

                EntityCollection _resConsulta = service.RetrieveMultiple(_consulta);
                if (_resConsulta.Entities.Count == 0)
                {
                    writelog("No encontrado " + _cups);
                    _consulta = new QueryExpression("atos_distribuidora");
                    _consulta.ColumnSet = new ColumnSet(new String[] { "atos_codigopuntofrontera", "atos_tipodistribuidora", "atos_distribuidoraid", "atos_distribuidoramatrizid" });
                    _condicion = new ConditionExpression();
                    _condicion.AttributeName = "atos_codigocups";
                    _condicion.Operator = ConditionOperator.Equal;
                    _condicion.Values.Add(_cups.Substring(0, 6));

                    _filtro = new FilterExpression();
                    _filtro.FilterOperator = LogicalOperator.And;
                    _filtro.Conditions.Add(_condicion);

                    writelog("Antes de Criteria.AddFilter - " + _cups.Substring(0, 6));

                    _consulta.Criteria.AddFilter(_filtro);
                    writelog("Despues de Criteria.AddFilter");

                    _resConsulta = service.RetrieveMultiple(_consulta);
                }

                if (_resConsulta.Entities.Count > 0)
                {
                    writelog("Actualiza ");
                    ef.Attributes["atos_cups22"] = ef.Attributes["atos_cups20"].ToString();
                    if (_resConsulta.Entities[0].Attributes.Contains("atos_codigopuntofrontera"))
                        ef.Attributes["atos_cups22"] += _resConsulta.Entities[0].Attributes["atos_codigopuntofrontera"].ToString();
                    ef.Attributes["atos_codigopuntosolicitudes"] = ef.Attributes["atos_cups22"].ToString();

                    if (_resConsulta.Entities[0].Attributes.Contains("atos_tipodistribuidora"))
                    {
                        Guid gidDistribuidora = Guid.Empty;

                        if (((OptionSetValue)_resConsulta.Entities[0].Attributes["atos_tipodistribuidora"]).Value == 300000001) // Subdistribuidora
                        {
                            if (_resConsulta.Entities[0].Attributes.Contains("atos_distribuidoramatrizid"))
                                gidDistribuidora = ((EntityReference)_resConsulta.Entities[0].Attributes["atos_distribuidoramatrizid"]).Id;
                            ef.Attributes["atos_subdistribuidoraid"] = new EntityReference("atos_distribuidora", _resConsulta.Entities[0].Id);
                        }
                        else
                            gidDistribuidora = _resConsulta.Entities[0].Id;

                        ef.Attributes["atos_distribuidoraid"] = new EntityReference("atos_distribuidora", gidDistribuidora);
                    }
                }
                //throw new Exception("Provocado");
                // Busca en atos_distribuidora con atos_codigocups = _cups8
                // Si no lo encuentra busca en atos_distribuidora con atos_codigocups = _cups8.Substring(0,6)
                //ef.Attributes["atos_cups22"]
                //ef.Attributes["atos_distribuidoraid"]
                //ef.Attributes["atos_subdistribuidoraid"]
            }
        }
    }
}