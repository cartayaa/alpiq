// <copyright file="Plugin.cs" company="Licence Owner">
// Copyright (c) 2015 All Rights Reserved
// </copyright>
// <author>Licence Owner</author>
// <date>1/21/2015 3:29:13 PM</date>
// <summary>Implements the Plugin Workflow Activity.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
namespace Exportar
{
    using System;
    using System.Collections.ObjectModel;
    using System.Globalization;
    using System.Linq;
    using System.ServiceModel;
    using Microsoft.Xrm.Sdk;
    using System.IO;
    using Microsoft.Xrm.Sdk.Query;
    using System.Collections;
    using System.Xml;
    using System.Collections.Specialized;
    using System.Xml.Linq;
    using System.Net;
    using System.Text;
    using System.Collections.Generic;
    using System.Web.Services.Protocols;
   
    public class ExportarXML
    {
        // Miguel Angel 03/03/2021
        // Se sustituye la variable private ITracingService por 
        // una propiedad
        private ITracingService tracingService;

        // Miguel Angel 03/03/2021
        // Se sustituye la variable private IOrganizationService por 
        // una propiedad
        private IOrganizationService service;

        private String pathDiccionario;
        private String fileQuery;
        private String pathRegistro;
        private String claveEncriptacion;

        private const String sepDirectorio = "/"; // "\\";
        private const string configXML = "conf.xml";
        private const string salidaWSEmsOK = "OK";


        private Uri uriWS = null;
        private String usuarioWS;
        private String passWS;
        private String entornoWS;
        private Boolean httpsWS;
        private String nombreServicio;
        private String nombreInterface;
        private String nombreComercializadora;
        private Boolean volcarXmlEnLog;
        private int numMaxIntentos;
        private String frecuenciaLog;
        private String prefijoLog;
        private String nombreLog;
        private String subCarpetaLog;
        private String campoLog;
        private String mensajeError;
        private String pathLog;
        private String LogFile;
        private List<Exception> listaErrores;

        private String urlLog;
        private String nombreDiccionario;
        private String dictionary;
        WSExportaFichero.Logging logger;

        public ExportarXML(ITracingService _tracingService, IOrganizationService _service, WSExportaFichero.Logging _logger, string _LogFile)
        {
            tracingService = _tracingService;
            service = _service;
            logger = _logger;
            LogFile = _LogFile;
            this.mensajeError = string.Empty;
        }

        public String RutaLog { get { return this.pathLog; } }

        public String PrefijoLog { get { return this.prefijoLog; } }

        public String MensajeError { get { return this.mensajeError; } }

        public ITracingService getTracingService() { return this.tracingService; }

        public IOrganizationService getService() { return this.service; }

        //public String query()  { return CommonWS.CommonWS.ReadRemoteFile(fileQuery); }
        public String query() {

            Remote fetch = new Remote(tracingService, service);
            String consulta = fetch.ReadRemoteFile(fileQuery);
            //fetch.CloseRemoteFile();

            logger.Info("Read " + fileQuery + " (In):" + consulta.Length.ToString() + " Bytes"); /* T */

            return consulta;
        }
        /*
        public String query(Guid _id)
        {
            return CommonWS.CommonWS.ReadRemoteFile(fileQuery).Replace("#ID_PR#", _id.ToString());
            //return File.OpenText(fileQuery).ReadToEnd().Replace("#ID_PR#", _id.ToString());
        } */
        public String query(Guid _id)
        {
            Remote fetch = new Remote(tracingService, service);
            String consulta = fetch.ReadRemoteFile(fileQuery).Replace("#ID_PR#", _id.ToString());
            //fetch.CloseRemoteFile();

            logger.Info("Read " + fileQuery + " (In):" + consulta.Length.ToString() + " Bytes"); /* T */

            return consulta;
        }

        /*
        public String query(Guid[] _id)
        {
            String[] _lineasQuery = CommonWS.CommonWS.ReadRemoteFileAllLines(fileQuery);
            //String[] _lineasQuery = File.ReadAllLines(fileQuery); // File.OpenText(pathQuery + _fQuery);

            int _numId = _id.Length;
            int _numIDquery = 0;
            for (int i = 0; i < _lineasQuery.Length; i++)
                if (_lineasQuery[i].Contains("#ID_PR#"))
                    _numIDquery++;

            String _query = "";
            for (int i = 0; i < _lineasQuery.Length; i++)
            {
                if (_lineasQuery[i].Contains("#ID_PR#"))
                {
                    _query += "\t\t<filter type='or'> " + "\n";
                    for (int j = 0; j < _numId; j++)
                        _query += "\t" + _lineasQuery[i].Replace("#ID_PR#", _id[j].ToString()) + "\n";
                    _query += "\t\t</filter> " + "\n";
                }
                else
                    _query += _lineasQuery[i] + "\n";

            }
            return _query;
        } */
        public String query(Guid[] _id)
        {
            //String[] _lineasQuery = CommonWS.CommonWS.ReadRemoteFileAllLines(fileQuery);

            Remote fetch = new Remote(tracingService, service);
            String[] _lineasQuery = fetch.ReadRemoteFileAllLines(fileQuery);
            //fetch.CloseRemoteFile();

            logger.Info("Read " + fileQuery + " (In):" + _lineasQuery.Length.ToString() + " Bytes"); /* T */

              int _numId = _id.Length;
            int _numIDquery = 0;
            for (int i = 0; i < _lineasQuery.Length; i++)
                if (_lineasQuery[i].Contains("#ID_PR#"))
                    _numIDquery++;

            String _query = "";
            for (int i = 0; i < _lineasQuery.Length; i++)
            {
                if (_lineasQuery[i].Contains("#ID_PR#"))
                {
                    _query += "\t\t<filter type='or'> " + "\n";
                    for (int j = 0; j < _numId; j++)
                        _query += "\t" + _lineasQuery[i].Replace("#ID_PR#", _id[j].ToString()) + "\n";
                    _query += "\t\t</filter> " + "\n";
                }
                else
                    _query += _lineasQuery[i] + "\n";

            }
            return _query;
        }

        /**
         * Function initPath From Execute
         * Arma la ruta para la lectura del Conf.xml dentro de los diccionearios dicc_XXXXXXXXXX
         * 
         * Params _pRegistro
         * Params _pDiccionario
         * Params _fQuery
         * Params _urlLog
         */
        public void SetPath(String _pRegistro, String _pDiccionario, String _fetchXml, String _urlLog)
        {
            pathRegistro = _pRegistro;
            pathDiccionario = pathRegistro + _pDiccionario;
            nombreDiccionario = _pDiccionario.Replace("/", ".txt").Replace("dicc_", "diccionario_");
            dictionary = _pDiccionario.Replace("/", ".txt").Replace("dicc_", "diccionario_");
            fileQuery = pathRegistro + _fetchXml;
            urlLog = _urlLog.ToString();
            pathLog = "Consultas/";
            listaErrores = new List<Exception>();
   
            logger.Info("Dictionary: " + nombreDiccionario);
            logger.Info("Fetch (in): " + _fetchXml);

            this.ReadConfig();
        }

        /**
         *  Function ReadConfigXML From SetPath
         *  Lee configuracion el Conf.xml para escritura (usuario, clave, intentos) dentro de los diccionearios dicc_XXXXXXXXXX
         */
        private void ReadConfig()
        {
            try
            {
                // Lectura del Conf.XML
                String consulta = ReadFile(pathDiccionario + configXML);
                // desglosa el Config.xml en XML
                XmlDocument res = new XmlDocument();
                res.LoadXml(consulta);

                // lectura de os parametrode conf.xml
                if (res.DocumentElement.FirstChild.Attributes["claveEncriptacion"] != null)
                    claveEncriptacion = res.DocumentElement.FirstChild.Attributes["claveEncriptacion"].Value;
                else
                    claveEncriptacion = "";

                String _uriWS = "";
                if (res.DocumentElement.FirstChild.Attributes["url"] != null)
                    _uriWS = res.DocumentElement.FirstChild.Attributes["url"].Value;

                usuarioWS = res.DocumentElement.FirstChild.Attributes["usuario"].Value;
                passWS = res.DocumentElement.FirstChild.Attributes["pass"].Value;

                if (res.DocumentElement.FirstChild.Attributes["numMaxIntentos"] != null)
                    numMaxIntentos = Convert.ToInt32(res.DocumentElement.FirstChild.Attributes["numMaxIntentos"].Value);
                else
                    numMaxIntentos = 1;

                if (!String.IsNullOrEmpty(claveEncriptacion))
                {
                    usuarioWS = CryptDecrypt.Crypt.Decrypt(usuarioWS, claveEncriptacion);
                    passWS    = CryptDecrypt.Crypt.Decrypt(passWS, claveEncriptacion);
                    if (!String.IsNullOrEmpty(_uriWS))
                        _uriWS = CryptDecrypt.Crypt.Decrypt(_uriWS, claveEncriptacion);
                }

                if (String.IsNullOrEmpty(usuarioWS))
                {
                    usuarioWS = "";
                    passWS = "";
                }

                if (!String.IsNullOrEmpty(_uriWS))
                {
                    uriWS = new Uri(_uriWS);
                    _uriWS = uriWS.AbsoluteUri;
                }

                // lectura de los parametrode conf.xml
                nombreServicio  = res.DocumentElement.FirstChild.Attributes["nombre"].Value;
                nombreInterface = res.DocumentElement.FirstChild.Attributes["nombreInterface"].Value;
                nombreComercializadora = res.DocumentElement.FirstChild.Attributes["comercializadora"].Value;

 // off         logger.Info("URL-WS: (" + _uriWS + ") User: (" + usuarioWS + ") Password: (" + passWS + ")");
 // off         logger.Info("Service: (" + nombreServicio + ") Interface: (" + nombreInterface + ") Comercializadora: (" + nombreComercializadora + ")");

                volcarXmlEnLog = true;
                frecuenciaLog  = "yyyyMMdd";
                nombreLog      = "";
                prefijoLog     = "";
                subCarpetaLog  = pathLog;
                campoLog       = "";

                if (res.DocumentElement.FirstChild.Attributes["entornoWS"] != null)
                    entornoWS = res.DocumentElement.FirstChild.Attributes["entornoWS"].Value;
                else
                    entornoWS = "dummy";

                if (res.DocumentElement.FirstChild.Attributes["secured"] != null)
                    httpsWS = Boolean.Parse(res.DocumentElement.FirstChild.Attributes["secured"].Value);
                else
                    httpsWS = false;


                // Declara Facturador
                WSExportaFichero.WSFacturador.Environment(entornoWS, httpsWS, _uriWS, usuarioWS, passWS);              


                if (res.GetElementsByTagName("log").Count > 0)
                {
                    // Datos usados para el Log Individual
                    XmlNode confLog = res.GetElementsByTagName("log")[0];
                    volcarXmlEnLog = Convert.ToBoolean(confLog.Attributes["volcarXml"].Value);
                    frecuenciaLog = confLog.Attributes["frecuenciaLog"].Value;
                    nombreLog = confLog.Attributes["nombreLog"].Value;
                    prefijoLog = confLog.Attributes["prefijoLog"].Value;

                    if (confLog.Attributes["subCarpetaLog"] != null)
                        subCarpetaLog += confLog.Attributes["subCarpetaLog"].Value;

                    if (confLog.Attributes["camponameLog"] != null)
                        campoLog = confLog.Attributes["camponameLog"].Value;

                    // Incorporar la extension
                }
                if (prefijoLog == "")
                    prefijoLog = "AWG_Exportaciones";
            }
            catch (Exception ex)
            {
                mensajeError = "KO Facturador - Invalid configuration";
                logger.Error(mensajeError);
                throw ex;
            }
        }

        private String ReadFile(String FileXML)
        {
            // Lectura del Conf.XML
            Remote config = new Remote(tracingService, service);
            String consulta = config.ReadRemoteFile(FileXML);
            config.CloseRemoteFile();

            logger.Info("Read " + FileXML + " (In):" + consulta.Length.ToString() + " Bytes"); /* T */

            return consulta;
        }

        /**
        * exporta
        * Recupera datos desde el diccionario (usa exportarDatosEms para su funcion)
        * 
        * Param(String) fetchXml
        */
        public bool exporta(String fetchXml)
        {
            //String _ficheroDicc = pathDiccionario + nombreDiccionario;

            bool _salida = true;

            // Lectura del Diccionario de Datos
            String consulta = ReadFile(pathDiccionario + nombreDiccionario);
            // Dechara Cabecera
            Cabecera _cabecera = new Cabecera(consulta);

            String _nombreFicheroCabeceras = nombreDiccionario.Split(new Char[] { '.' })[0].Replace("diccionario_", "");

            // Dechara fetch àra entidad
            FetchExpression statement = new FetchExpression(fetchXml);

            EntityCollection _resultado = service.RetrieveMultiple(statement);

            foreach (Entity _entidad in _resultado.Entities)
            {
                EntidadCRM _entidadCRM = new EntidadCRM(_entidad, service, tracingService);
                try
                {
                    StringCollection _lineas = new StringCollection();
                    String _cuerpoXml = "<registro>";
                    for (int i = 0; i < _cabecera.len(); i++)
                    {
                        String _valor = _cabecera.col(i).Calculo.calcula(_entidadCRM);
                        if (_valor != String.Empty)
                        {
                            // Ver si se puede sustituir esto por un Decode (función Selec) en el fichero de cabecera de la entidad account
                            if (_entidad.LogicalName == "account" && (_valor == "Mayoristas" || _valor == "Retail"))
                                _valor = (_valor == "Mayoristas" ? "0" : "1");

                            _cuerpoXml = _cuerpoXml + String.Format("<{0}>{1}</{0}>", _cabecera.col(i).NbColumna, _valor);

                            // AC Informa el valor del campo en el Log
                            // String _trace = String.Format("<{0}>{1}</{0}>", _cabecera.col(i).NbColumna, _valor);
                            // logger.Info("Field: " + _trace);
                        }
                        else
                            _cuerpoXml = _cuerpoXml + String.Format("<{0}/>", _cabecera.col(i).NbColumna);
                    }

                    _cuerpoXml = _cuerpoXml + "</registro>";

                    String _xmlSalida = String.Format("<RegistroEntrada>{0}</RegistroEntrada>", _cuerpoXml);
                    _xmlSalida = _xmlSalida.Replace(',', '.');

                    DispachXML(_xmlSalida, ref _entidadCRM); /*T*/
                }
                catch (SoapException soapex)
                {
                    logger.Error("Extract Data: (SoapException): " + soapex.Detail.InnerText);
                    listaErrores.Add(new Exception(soapex.Detail.InnerText));
                    _salida = false;
                }
                catch (Exception ex)
                {
                    logger.Error("Extract Data: (Exception): " + ex.Message);
                    listaErrores.Add(ex);
                    _salida = false;
                }
            }

            return _salida;
        }

        /**
        * exportarDatosEms
        * Funcion invocada deste exportar
        * 
        * Exporta los datos al facturador (us llamaWSFacturador)
        * 
        * Param (String) xmlSalida
        * Param (String) _entidadCRM
        */
        private void DispachXML(String xmlSalida, ref EntidadCRM _entidadCRM)
        {
            try
            {
                String result = String.Empty;
                String _uriWS = "";
                ASCIIEncoding encoding = new ASCIIEncoding();
                
                // Declara el facturador
                WSExportaFichero.WSFacturador wsECP = WSExportaFichero.WSFacturador.WebServiceECP();

                // Envia en conrol del Logger
                wsECP.Logging(logger);                          

                if (uriWS != null) { _uriWS = uriWS.AbsoluteUri; }

                // Reliza conexion con el servicio 
                wsECP.setConexion(_uriWS, usuarioWS, passWS);
                /* T logger.Info("setConexion"); */

                // public void setLog(String _uriLogWS, String _nombreFicheroLog)
                //-- AC 07/11/2021 wsECP.setLog(urlLog, "WSExportaFicheros.txt");
                wsECP.setLog(urlLog, LogFile);
                /* T logger.Info("setLog"); */

                //String postData = wsECP.construyeMensajeXml(nombreServicio, nombreInterface, nombreComercializadora, xmlSalida); /*T*/
                // Crea el XML de envio
                String postData = wsECP.createXML(nombreServicio, nombreInterface, nombreComercializadora, xmlSalida); /*T*/
                                                                                                                       /* T
                                                                                                                       logger.Info("createXML"); */
 
                /* msg = String.Format("xmlSalida: {0}", xmlSalida);
                logger.Info(msg); */

                //result = wsECP.llamaWSFacturador(nombreServicio, nombreInterface, nombreComercializadora, numMaxIntentos, xmlSalida);
                // realiza el envio al servicio Web
                result = wsECP.send(nombreServicio, nombreInterface, nombreComercializadora, numMaxIntentos, xmlSalida);
                /* T logger.Info("send"); */

                // XML de envio al log
                logger.Info(String.Format("Send to ECP \n{0}", postData));

                // Genera el XML de la transaccion en curso en /log/consultas<{contrato,oferta,pricingoutput...etc}>file.xml
                //volcarXmlLog(postData, ref _entidadCRM); /*T*/


                if (!String.IsNullOrEmpty(result) && result.Substring(0, 2).ToUpper() != salidaWSEmsOK)
                {
                    logger.Info(String.Format("Result: {0}", result));
                    throw new Exception(String.Format("Web Service: {0}", result));

                }
                else if (String.IsNullOrEmpty(result))
                {
                    // resultado
                    logger.Info(String.Format("Result: {0}", result));
                    throw new Exception(String.Format("Web Service Receive null or Empty"));
                }
                else if (result.Length > 2)
                {
                    this.mensajeError = String.Format("Web Service3 IsNullOrEmpty: {0}", result.Substring(2));
                    logger.Error(this.mensajeError);
                }
                else if (!String.IsNullOrEmpty(result) && result.Substring(0, 2).ToUpper() == salidaWSEmsOK)
                {
                    // resultado
                    logger.Info(String.Format("Result: {0}", result));
                    // XML de envio al disco
                    writeXML(postData, ref _entidadCRM);
                }
            }
            catch (SoapException soapEx)
            {
                this.mensajeError = "SoapException. Comm ECP: " + soapEx.Message;
                logger.Error(this.mensajeError);
                throw soapEx;
            }
            catch (Exception ex)
            {
                //if (mensajeError == String.Empty) { this.mensajeError = "Exception. Comm ECP: " + ex.Message; }
                //this.mensajeError = "Exception. Comm ECP: " + ex.Message;
                this.mensajeError = "Exception. Comm ECP: " + ex.Message; 
                logger.Error(this.mensajeError);
                throw ex;
            }
        }

        /**
          * Function WriteLogEntityFile
          * Crea el Log de la entidad en el servidor Web /Logs/Consultas/<subDirectory/>
          * 
          * Param (String) XML   
          * Param (String) entidad deñ CRM
          */
        private void writeXML(String xmlSalida, ref EntidadCRM _entidadCRM)
        {
            if (volcarXmlEnLog)
            {
                // Nombre del XML (entidad) log

                //< log volcarXml = "true" frecuenciaLog = "yyyyMMdd-HHmmss" nombreLog = "PricingOutputs" prefijoLog = "Alpiq_Exportaciones_" subCarpetaLog = "PricingOutputs/" camponameLog = "atos_name" />

                String nombreArchivoLog = prefijoLog + nombreLog + DateTime.Now.ToString(frecuenciaLog);
                if (campoLog != "")
                {
                    // recupera valor del campo de CRM
                    String _valorNombre = _entidadCRM.valorCampo(campoLog);
                    if (_valorNombre != "")
                        nombreArchivoLog += "_" + _valorNombre.Replace("/", "-").Replace("\\", "-");
                }
                // COMENTADO Y PREGUNTAR nombreArchivoLog += "_" + _entidadCRM.Ef.Id.ToString(); // +".log";

                //createXMLLog(nombreArchivoLog, ".log", String.Format("{0}:\r\n{1}\r\n", DateTime.Now.ToString("HH:mm:ss"), xmlSalida));
                
                /*
                 *  EN REVISION
                 *  
                    // Read the XML text
                    XmlDocument xml_document = new XmlDocument();
                    xml_document.LoadXml(xmlSalida);

                    // Format the XML text.
                    StringWriter string_writer = new StringWriter();
                    XmlTextWriter xml_text_writer = new XmlTextWriter(string_writer);

                    try { 
                        xml_text_writer.Formatting = Formatting.Indented;
                        xml_document.WriteTo(xml_text_writer);
                    }
                    finally
                    {
                        //clean up even if error
                        if (xml_text_writer != null)
                            xml_text_writer.Close();
                    }

                    createXMLLog(nombreArchivoLog, ".xml", String.Format("{0}\n", xml_text_writer));
                xml_text_writer.Close();
                */
                //createXMLLog(nombreArchivoLog, ".xml", String.Format("{0}\n", string_writer.ToString() ));

                // sustituir la linea anterior por esta
                createXMLLog(nombreArchivoLog, ".xml", String.Format("{0}\n", xmlSalida));
            }
        }

        /**
         * Function Call from iWriteLogEntityFile
         * Actualiza al extension basado en el numero de intentos
         * 
         * Param (String) fichero)
         * Param (String) extension
         * Param (String) texto
         * Param (int) intento = 0
         */
        public void createXMLLog(String fichero, String extension, String texto, int intento = 0)
        {
            String nombreArchivoLog = fichero;

            if (intento > 0) { nombreArchivoLog += "-" + intento.ToString(); }
            nombreArchivoLog += extension;

//off            logger.Trace("Log Generado: " + urlLog + "/" + subCarpetaLog + "/" + nombreArchivoLog);
//off            logger.Info("Log Generado: " + subCarpetaLog + nombreArchivoLog);

            CommonWS.CommonWS.WriteLogFile(urlLog, nombreArchivoLog, subCarpetaLog, texto);
        }


        public void volcarError(String nombreFicheroLog, String displayName)
        {
            try
            {
                //tracingService.Trace("volcarError");

                String _mensajeError = String.Empty;
                foreach (Exception error in listaErrores)
                {
                    //String _mensajeError = String.Empty;

                    if (error.InnerException != null)
                    {
                        _mensajeError += String.Format("{0} Error: {1}:{2}.{3}",
                            DateTime.Now,
                            error.Message,
                            error.InnerException.Message,
                            error.InnerException.StackTrace) + Environment.NewLine;
                    }
                    else
                    {
                        _mensajeError += String.Format("{0} Error: {1}.{2}", 
                            DateTime.Now, 
                            error.Message, 
                            error.StackTrace) + Environment.NewLine;
                    }
                }

                if (_mensajeError != String.Empty)
                {
                    /*T*/               //CommonWS.CommonWS.WriteLog(urlLog, nombreFicheroLog, pathLog, _mensajeError);
                    logger.Error(_mensajeError);
                }
            }
            catch (Exception ex)
            {
                logger.Error(displayName + " " + "Exception XXXX: " + ex.Message);
                System.Diagnostics.EventLog.WriteEntry(displayName, "Exception XXXX: " + ex.Message);
            }

        }

        /**
         * Funcion aparentemene deprecada
         */
        private void exportarDatosEmsOLD(String xmlSalida, ref EntidadCRM _entidadCRM)
        {
            try
            {
                tracingService.Trace("TRY");
                String result = String.Empty;

                ASCIIEncoding encoding = new ASCIIEncoding();

                string postData = String.Format(
                        @"<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/' 
                            xmlns:send='http://send.ws.atos.com/'>
                               <soapenv:Header/>
                               <soapenv:Body>
                                  <send:{0}>
                                     <arg0>
                                        <tipo>{1}</tipo>
                                        <xml><![CDATA[{2}]]></xml>
                                        <comercializadora>{3}</comercializadora>
                                     </arg0>
                                  </send:{0}>
                               </soapenv:Body>
                            </soapenv:Envelope>", nombreServicio, nombreInterface, xmlSalida, nombreComercializadora);


                //byte[] data = encoding.GetBytes(postData);
                byte[] data = ASCIIEncoding.UTF8.GetBytes(postData);


                /* Quitar estas líneas */

                /*DateTime hoy = new DateTime(2015, 3, 26);
                String auxmsg = String.Format(
                    @"


                      CurrentCulture: {0}
					  CurrentUICulture: {1}
					  InvariantCulture: {2}
					  InstalledUICulture: {3}
                      Now CurrentCulture: {4}
					  Now CurrentUICulture: {5}
					  Now InvariantCulture: {6}
					  Now InstalledUICulture: {7}",  System.Globalization.CultureInfo.CurrentCulture.DisplayName,
													 System.Globalization.CultureInfo.CurrentUICulture.DisplayName,
													 System.Globalization.CultureInfo.InvariantCulture.DisplayName, 
													 System.Globalization.CultureInfo.InstalledUICulture.DisplayName,
                                                     hoy.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.CurrentCulture),
                                                     hoy.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.CurrentUICulture),
                                                     hoy.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture),
                                                     hoy.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InstalledUICulture));*/

                //CommonWS.CommonWS.WriteLog(urlLog, "WSExportaFicheros.txt", "", DateTime.Now.ToLocalTime().ToString("dd/MM/yyyy HH:mm:ss.ff") + " - Vuelca postData: ");
                //CommonWS.CommonWS.WriteLog(urlLog, "WSExportaFicheros.txt", "", String.Format("{0}:\r\n{1}\r\n", DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss.ff"), postData));
                writeXML(postData, ref _entidadCRM);
                //return;
                //CommonWS.CommonWS.WriteLog(urlLog, "WSExportaFicheros.txt", "", DateTime.Now.ToLocalTime().ToString("dd/MM/yyyy HH:mm:ss.ff") + " - Antes de WebRequest.");
                //CommonWS.CommonWS.WriteLog(urlLog, "WSExportaFicheros.txt", "", DateTime.Now.ToLocalTime().ToString("dd/MM/yyyy HH:mm:ss.ff") + " - uriWS: " + uriWS.AbsoluteUri);

                HttpWebRequest myRequest = (HttpWebRequest)WebRequest.Create(uriWS);
                myRequest.Method = "POST";

                myRequest.ContentType = "text/xml;charset=UTF-8";
                //myRequest.ContentType = "text/xml;charset=ISO-8859-1";
                myRequest.ContentLength = data.Length;

                if (!String.IsNullOrEmpty(usuarioWS))
                {
                    System.Net.NetworkCredential cred = new System.Net.NetworkCredential();
                    cred.UserName = usuarioWS;
                    cred.Password = passWS;
                    myRequest.Credentials = cred;
                }

                myRequest.PreAuthenticate = true;
                myRequest.ProtocolVersion = HttpVersion.Version11;
                myRequest.ServicePoint.Expect100Continue = false;

                myRequest.Timeout = 7200000; // 120000;
                //CommonWS.CommonWS.WriteLog(urlLog, "WSExportaFicheros.txt", "", DateTime.Now.ToLocalTime().ToString("dd/MM/yyyy HH:mm:ss.ff") + " - Antes de GetRequestStream");
                Stream newStream = myRequest.GetRequestStream();

                // Send the data.
                newStream.Write(data, 0, data.Length);
                newStream.Close();
                //CommonWS.CommonWS.WriteLog(urlLog, "WSExportaFicheros.txt", "", DateTime.Now.ToLocalTime().ToString("dd/MM/yyyy HH:mm:ss.ff") + " - Antes de GetResponse");
                // Get response  
                using (HttpWebResponse response = myRequest.GetResponse() as HttpWebResponse)
                {
                    // Get the response stream  
                    StreamReader reader = new StreamReader(response.GetResponseStream());

                    // Read the whole contents and return as a string  
                    result = reader.ReadToEnd();
                }

                //CommonWS.CommonWS.WriteLog(urlLog, "WSExportaFicheros.txt", "", DateTime.Now.ToLocalTime().ToString("dd/MM/yyyy HH:mm:ss.ff") + " - Despues de GetResponse. result: " + result);

                XDocument doc = XDocument.Parse(result);

                if (!String.IsNullOrEmpty(doc.Root.Value) && doc.Root.Value.Substring(0, 2).ToUpper() != salidaWSEmsOK)
                {
                    this.mensajeError = String.Format("El servicio web devuelve el siguiente mensaje: {0}", doc.Root.Value);
                    CommonWS.CommonWS.WriteLog(urlLog, "WSExportaFicheros.txt", "", this.mensajeError);
                    throw new Exception(String.Format("El servicio web devuelve el siguiente mensaje: {0}", doc.Root.Value));
                }
                else if (String.IsNullOrEmpty(doc.Root.Value))
                {
                    this.mensajeError = String.Format("El servicio web devuelve null o vacío");
                    CommonWS.CommonWS.WriteLog(urlLog, "WSExportaFicheros.txt", "", this.mensajeError);
                    throw new Exception(String.Format("El servicio web devuelve null o vacío"));
                }
            }
            catch (SoapException soapEx)
            {
                tracingService.Trace("Error Soap en la comunicación con el facturador. " + soapEx.Message);
                this.mensajeError = "Error Soap en la comunicación con el facturador. " + soapEx.Message;
                throw soapEx;
            }
            catch (Exception ex)
            {
                tracingService.Trace("Error en la comunicación con el facturador. " + ex);
                if (mensajeError == String.Empty)
                    this.mensajeError = "Error en la comunicación con el facturador. " + ex.Message;
                CommonWS.CommonWS.WriteLog(urlLog, "WSExportaFicheros.txt", "", " - Error en la comunicación con el facturador. " + ex);
                throw ex;
            }
        }

    }
}