/* ver. 1.0.0.0 */
// <copyright file="Plugin.cs" company="Licence Owner">
// Copyright (c) 2015 All Rights Reserved
// </copyright>
// <author>Licence Owner</author>
// <date>4/15/2015 5:34:31 PM</date>
// <summary>Implements the Plugin Workflow Activity.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
namespace TermPricing
{
    using System;
    using System.Collections.ObjectModel;
    using System.Globalization;
    using System.Linq;
    using System.ServiceModel;
    using Microsoft.Xrm.Sdk;
    using System.Collections.Generic;
    //using System.Data;
    using Microsoft.Xrm.Sdk.Query;
    //using System.Runtime.Serialization;
    //using Microsoft.Xrm.Sdk.Client;
    using System.Xml;

    /// <summary>
    /// Base class for all Plugins.
    /// </summary>    
    public class Pricing : IPlugin
    {
        LocalPluginContext localcontext;
        List<FormulaBase> variables = null;
        Formula formula = null;
        List<String> errores = new List<String>();

        private Boolean esGas;
        //private bool _log = false;
        //private String urlwslog = "";
        //private String ficherolog = "TermPricing.txt"; // = "D:\\Tmp\\TermPricing.txt";
        //private String subcarpetalog = "";
        //private const Char SEPARADOR = '#';
        private bool tipoCalculoPromedio = false;
        
        private CommonWS.Log Log = null;

        private void init(String parametros)
        {
            Log = new CommonWS.Log();
            if (parametros != "")
            {
                XmlDocument res = new XmlDocument();

                res.LoadXml(parametros);


                if (res.GetElementsByTagName("log").Count > 0)
                {
                    XmlNode logxml = res.GetElementsByTagName("log")[0];
                    bool _log = Convert.ToBoolean(logxml.Attributes["escribirlog"].Value);
                    String urlwslog = logxml.Attributes["urlwslog"].Value;
                    String ficherolog = logxml.Attributes["ficherolog"].Value;
                    String subcarpetalog = logxml.Attributes["subcarpetalog"].Value;
                    Log.setLog(_log, urlwslog, subcarpetalog, ficherolog, null);

                }
            }
        }
        
        public Pricing(String unsecureconfiguration, String secureconfiguration)
        {
            String parametros = "";
            if (secureconfiguration != "" && secureconfiguration != null)
                parametros = secureconfiguration;
            else if (unsecureconfiguration != "" && unsecureconfiguration != null)
                parametros = unsecureconfiguration;

            this.init(parametros);
            
        }

        /*
        public Pricing(String parametros)
        {

            if (String.IsNullOrEmpty(parametros) == false)
            {
                String[] arrayPar = parametros.Split(SEPARADOR);
                if (arrayPar.Length > 0)
                {

                    if (arrayPar[0] == "LOG")
                        _log = true;
                    if (arrayPar.Length > 1)
                    {
                        ficherolog = arrayPar[1];
                        if (ficherolog == "")
                            _log = false;
                    }
                }
            }
        }
        */



        private void construyeFormulas(Entity _tipoProducto)
        {
            Log.writelog("construyeFormulas 1",true);
            formula = Formula.creaFormula(_tipoProducto, tipoCalculoPromedio, Log);
            formula.esInstalacionGas = esGas;
            Log.writelog("construyeFormulas 3",true);

            variables = formula.construyeFormulas(_tipoProducto, localcontext.OrganizationService, tipoCalculoPromedio);
            Log.writelog("construyeFormulas 4",true);
        }


        private void calcula(ref Entity _oferta, Entity _ofpre, Entity _tipoProducto, Entity _tarifa)
        {
            //formula.calcula(ref variables, localcontext.OrganizationService, _oferta, _ofpre, _tipoProducto, _tarifa, ref errores);
            Log.writelog("-------------------------------- Pricing.calcula --------------------------------", true);
            formula.setLog(Log);
            if (tipoCalculoPromedio == true)
            {
                Log.writelog("Antes de buscar matriz horaria",true);
                Guid _matrizhorariaid = matrizHoraria(_oferta);
                Log.writelog("Antes de calculaCollectionPromedio");
                formula.calculaCollectionPromedio(_matrizhorariaid, ref variables, localcontext.OrganizationService, ref _oferta, _ofpre, _tipoProducto, _tarifa, ref errores);
            }
            else
                formula.calculaCollection(ref variables, localcontext.OrganizationService, _oferta, _ofpre, _tipoProducto, _tarifa, ref errores);


        }

        /*
        private void writelog(String texto, bool _traza = false)
        {
            if ( Log == null )
            {
                return;
            }
            Log.writelog(texto, _traza); */
            /*if (_traza)
                localcontext.Trace(texto);
            if (_log == true)
                CommonWS.CommonWS.WriteLog(urlwslog, ficherolog, subcarpetalog, texto);*/
        /*} */

        protected class LocalPluginContext
        {
            internal IServiceProvider ServiceProvider
            {
                get;

                private set;
            }

            internal IOrganizationService OrganizationService
            {
                get;

                private set;
            }

            internal IPluginExecutionContext PluginExecutionContext
            {
                get;

                private set;
            }

            internal ITracingService TracingService
            {
                get;

                private set;
            }

            private LocalPluginContext()
            {
            }

            internal LocalPluginContext(IServiceProvider serviceProvider)
            {
                if (serviceProvider == null)
                {
                    throw new ArgumentNullException("serviceProvider");
                }

                // Obtain the execution context service from the service provider.
                this.PluginExecutionContext = (IPluginExecutionContext)serviceProvider.GetService(typeof(IPluginExecutionContext));

                // Obtain the tracing service from the service provider.
                this.TracingService = (ITracingService)serviceProvider.GetService(typeof(ITracingService));

                // Obtain the Organization Service factory service from the service provider
                IOrganizationServiceFactory factory = (IOrganizationServiceFactory)serviceProvider.GetService(typeof(IOrganizationServiceFactory));

                // Use the factory to generate the Organization Service.
                this.OrganizationService = factory.CreateOrganizationService(this.PluginExecutionContext.UserId);
            }

            internal void Trace(string message)
            {

                if (string.IsNullOrWhiteSpace(message) || this.TracingService == null)
                {
                    return;
                }

                if (this.PluginExecutionContext == null)
                {
                    this.TracingService.Trace(message);
                }
                else
                {
                    this.TracingService.Trace(
                        "{0}, Correlation Id: {1}, Initiating User: {2}",
                        message,
                        this.PluginExecutionContext.CorrelationId,
                        this.PluginExecutionContext.InitiatingUserId);
                }
            }
        }


        private void creaproducto(ref Entity _oferta)
        {
            if (_oferta.Attributes.Contains("atos_tipodeproductoid") == false )
                return;
            Guid _tipoproductoid;
            _tipoproductoid = ((EntityReference)_oferta.Attributes["atos_tipodeproductoid"]).Id;
         
            Entity _tipoProductoBase = localcontext.OrganizationService.Retrieve("atos_tipodeproducto",
                                                                        _tipoproductoid,
                                                                        new ColumnSet(true));
            _tipoProductoBase.Attributes.Remove("atos_tipodeproductoid");
            _tipoProductoBase.Id = Guid.NewGuid();
            _tipoProductoBase.Attributes["atos_base"] = false;
            _tipoProductoBase.Attributes.Remove("atos_name"); // El campo atos_name lo calcula la secuencia

            // Se eliminan los campos para ems
            _tipoProductoBase.Attributes.Remove("atos_crearenems");
            _tipoProductoBase.Attributes.Remove("atos_tipodeproductocreadoenems");
            _tipoProductoBase.Attributes.Remove("atos_interfazformulaems");
            _tipoProductoBase.Attributes.Remove("atos_ultimowsformulaejecutado");
            _tipoProductoBase.Attributes.Remove("atos_ultimologwsformula");

            //_tipoProductoBase.Attributes["atos_name"] += "-" + _ofpre.Attributes["atos_name"].ToString();
            // atos_base poner a No

            Guid _nuevotipoproducto = localcontext.OrganizationService.Create(_tipoProductoBase);
            Log.writelog("antes de InputParameters");

            Log.writelog("Después de InputParameters",true);
            _oferta.Attributes["atos_tipodeproductofinalid"] = new EntityReference("atos_tipodeproducto", _nuevotipoproducto);
            localcontext.OrganizationService.Update(_oferta);
            Log.writelog("Después de tipodeproductofinalid",true);
        }


        private void creapricinginput(ref Entity _oferta)
        {
            if (_oferta.Attributes.Contains("atos_tipodeproductofinalid") == false )
                return;
            if (_oferta.Attributes.Contains("atos_tipoproductofinalrevisado") == false)
                return;

            if (_oferta.Attributes.Contains("atos_pricinginputsrevisados") == false)
            {
                errores.Add("Debe revisar antes los Pricing Inputs");
                return;

            }

            Guid _tipoproductoid;
             _tipoproductoid = ((EntityReference)_oferta.Attributes["atos_tipodeproductofinalid"]).Id;
           

            Entity _tipoProducto = localcontext.OrganizationService.Retrieve("atos_tipodeproducto",
                                                                        _tipoproductoid,
                                                                        new ColumnSet(true));

            Log.writelog("Antes de construyeFormulas");
            // Copiamos los pricinginput
            construyeFormulas(_tipoProducto);
            Log.writelog("Despues de construyeFormulas");
            for (int i = 0; i < formula.ComponentesFormula.Count; i++)
            {
                if (formula.ComponentesFormula[i].TipoComponente == "TermPricing")
                {
                    Log.writelog("TermPricing: " + formula.ComponentesFormula[i].NombreComponente + " " + ((TermPricing)formula.ComponentesFormula[i]).NombreEms);
                    Entity _pricingInput = new Entity("atos_pricinginput");
                    try
                    {

                        Entity _pricingInputbase = formula.pricingInput(i, localcontext.OrganizationService, _oferta, _oferta);

                        if (_pricingInputbase.Attributes.Contains("atos_porcentajeoimporte"))
                            _pricingInput.Attributes["atos_porcentajeoimporte"] = _pricingInputbase.Attributes["atos_porcentajeoimporte"];
                        if (_pricingInputbase.Attributes.Contains("atos_pfijo"))
                            _pricingInput.Attributes["atos_pfijo"] = _pricingInputbase.Attributes["atos_pfijo"];
                        if (_pricingInputbase.Attributes.Contains("atos_p1"))
                            _pricingInput.Attributes["atos_p1"] = _pricingInputbase.Attributes["atos_p1"];
                        if (_pricingInputbase.Attributes.Contains("atos_p2"))
                            _pricingInput.Attributes["atos_p2"] = _pricingInputbase.Attributes["atos_p2"];
                        if (_pricingInputbase.Attributes.Contains("atos_p3"))
                            _pricingInput.Attributes["atos_p3"] = _pricingInputbase.Attributes["atos_p3"];
                        if (_pricingInputbase.Attributes.Contains("atos_p4"))
                            _pricingInput.Attributes["atos_p4"] = _pricingInputbase.Attributes["atos_p4"];
                        if (_pricingInputbase.Attributes.Contains("atos_p5"))
                            _pricingInput.Attributes["atos_p5"] = _pricingInputbase.Attributes["atos_p5"];
                        if (_pricingInputbase.Attributes.Contains("atos_p6"))
                            _pricingInput.Attributes["atos_p6"] = _pricingInputbase.Attributes["atos_p6"];
                        if (_pricingInputbase.Attributes.Contains("atos_tipo"))
                            _pricingInput.Attributes["atos_tipo"] = _pricingInputbase.Attributes["atos_tipo"];
                        //_pricingInput.Attributes.Remove("atos_pricinginputid");
                        Log.writelog("existe pricinginput");
                    }
                    catch //(Exception e)
                    {
                        //_pricingInput = new Entity("atos_pricinginput");
                        Log.writelog("no existe pricinginput "); // + e.Message);

                    }

                    if (_oferta.Attributes.Contains("createdon"))
                        _pricingInput.Attributes["atos_fechainiciovigencia"] = _oferta.Attributes["createdon"];

                    if (_oferta.Attributes.Contains("atos_fechainicio"))
                        _pricingInput.Attributes["atos_fechainicioaplicacion"] = _oferta.Attributes["atos_fechainicio"];

                    /*if (_ofpre.Attributes.Contains("atos_fechafinvigenciaoferta"))
                        _pricingInput.Attributes["atos_fechafinvigencia"] = _ofpre.Attributes["atos_fechafinvigenciaoferta"];
                    else*/
                    if (_oferta.Attributes.Contains("atos_fechafin"))
                        _pricingInput.Attributes["atos_fechafinvigencia"] = _oferta.Attributes["atos_fechafin"];

                    if (_oferta.Attributes.Contains("atos_fechafin"))
                        _pricingInput.Attributes["atos_fechafinaplicacion"] = _oferta.Attributes["atos_fechafin"];

                    _pricingInput.Attributes["atos_sistemaelectricoid"] = new EntityReference("atos_sistemaelectrico", ((EntityReference)_oferta.Attributes["atos_sistemaelectricoid"]).Id);
                    _pricingInput.Attributes["atos_tarifaid"] = new EntityReference("atos_tarifa", ((EntityReference)_oferta.Attributes["atos_tarifaid"]).Id);
                    Log.writelog("Asocia pricinginput a oferta");
                    _pricingInput.Attributes["atos_ofertaid"] = new EntityReference("atos_oferta", _oferta.Id);
                    _pricingInput.Id = Guid.NewGuid();
                    Log.writelog("Asocia pricinginput a terminodepricing " + ((TermPricing)formula.ComponentesFormula[i]).TermpricingId.ToString());
                    _pricingInput.Attributes["atos_terminodepricingid"] = new EntityReference("atos_terminodepricing", ((TermPricing)formula.ComponentesFormula[i]).TermpricingId);
                    Log.writelog("Actualiza nombre de pricinginput");

                    if (((TermPricing)formula.ComponentesFormula[i]).NombreEms != "")
                        _pricingInput.Attributes["atos_name"] = ((TermPricing)formula.ComponentesFormula[i]).NombreEms + "-";
                    else
                        _pricingInput.Attributes["atos_name"] = formula.ComponentesFormula[i].NombreComponente + "-";
                    _pricingInput.Attributes["atos_name"] += _oferta.Attributes["atos_name"].ToString();

                    Log.writelog("Pricing Input Name: " + _pricingInput.Attributes["atos_name"].ToString());

                    _pricingInput.Attributes["atos_tipo"] = new OptionSetValue(((TermPricing)formula.ComponentesFormula[i]).FijoIndexado.Value);

                    Log.writelog("Antes de Create pricingInput");
                    localcontext.OrganizationService.Create(_pricingInput);
                    Log.writelog("Después de Create pricingInput");

                }
            }
        }


        private void creapricinginputCollection(ref Entity _oferta)
        {
            Log.writelog("creapricinginputCollection 1", true);
            if (_oferta.Attributes.Contains("atos_tipodeproductofinalid") == false )
                return;
            Log.writelog("creapricinginputCollection 2", true);
            if (_oferta.Attributes.Contains("atos_tipoproductofinalrevisado") == false )
                return;
            Log.writelog("creapricinginputCollection 3", true);
            if (_oferta.Attributes.Contains("atos_pricinginputsrevisados") == false )
            {
                errores.Add("Debe revisar antes los Pricing Inputs");
                return;

            }

            Log.writelog("creapricinginputCollection 4", true);
            Guid _tipoproductoid;
            _tipoproductoid = ((EntityReference)_oferta.Attributes["atos_tipodeproductofinalid"]).Id;

            Log.writelog("creapricinginputCollection 5 " + _tipoproductoid.ToString(), true);
            Entity _tipoProducto = localcontext.OrganizationService.Retrieve("atos_tipodeproducto",
                                                                        _tipoproductoid,
                                                                        new ColumnSet(true));

            Log.writelog("Antes de construyeFormulas", true);
            // Copiamos los pricinginput
            construyeFormulas(_tipoProducto);
            Log.writelog("Despues de construyeFormulas", true);
            for (int i = 0; i < formula.ComponentesFormula.Count; i++)
            {
                if (formula.ComponentesFormula[i].TipoComponente == "TermPricing")
                {
                    Log.writelog("TermPricing: " + formula.ComponentesFormula[i].NombreComponente + " " + ((TermPricing)formula.ComponentesFormula[i]).NombreEms, true);
                    //Entity _pricingInput = new Entity("atos_pricinginput");

                    EntityCollection _pricingInputColl = formula.pricingInputCollection(i, localcontext.OrganizationService, _oferta, _oferta);
                    Log.writelog("Encontrados " + _pricingInputColl.Entities.Count.ToString() + " pricinginputs para " + formula.ComponentesFormula[i].NombreComponente);
                    for (int j = 0; j < _pricingInputColl.Entities.Count; j++)
                    {
                        Entity _pricingInput = new Entity("atos_pricinginput");
                        Entity _pricingInputbase = _pricingInputColl.Entities[j];

                        if (_pricingInputbase.Attributes.Contains("atos_porcentajeoimporte"))
                            _pricingInput.Attributes["atos_porcentajeoimporte"] = _pricingInputbase.Attributes["atos_porcentajeoimporte"];
                        if (_pricingInputbase.Attributes.Contains("atos_pfijo"))
                            _pricingInput.Attributes["atos_pfijo"] = _pricingInputbase.Attributes["atos_pfijo"];
                        if (_pricingInputbase.Attributes.Contains("atos_p1"))
                            _pricingInput.Attributes["atos_p1"] = _pricingInputbase.Attributes["atos_p1"];
                        if (_pricingInputbase.Attributes.Contains("atos_p2"))
                            _pricingInput.Attributes["atos_p2"] = _pricingInputbase.Attributes["atos_p2"];
                        if (_pricingInputbase.Attributes.Contains("atos_p3"))
                            _pricingInput.Attributes["atos_p3"] = _pricingInputbase.Attributes["atos_p3"];
                        if (_pricingInputbase.Attributes.Contains("atos_p4"))
                            _pricingInput.Attributes["atos_p4"] = _pricingInputbase.Attributes["atos_p4"];
                        if (_pricingInputbase.Attributes.Contains("atos_p5"))
                            _pricingInput.Attributes["atos_p5"] = _pricingInputbase.Attributes["atos_p5"];
                        if (_pricingInputbase.Attributes.Contains("atos_p6"))
                            _pricingInput.Attributes["atos_p6"] = _pricingInputbase.Attributes["atos_p6"];
                        if (_pricingInputbase.Attributes.Contains("atos_tipo"))
                            _pricingInput.Attributes["atos_tipo"] = _pricingInputbase.Attributes["atos_tipo"];


                        if (_pricingInputbase.Attributes.Contains("atos_fechainiciovigencia"))
                            _pricingInput.Attributes["atos_fechainiciovigencia"] = DateTime.SpecifyKind((DateTime)_pricingInputbase.Attributes["atos_fechainiciovigencia"], DateTimeKind.Utc);
                      
                        if (_pricingInputbase.Attributes.Contains("atos_fechainicioaplicacion"))
                            _pricingInput.Attributes["atos_fechainicioaplicacion"] = DateTime.SpecifyKind((DateTime)_pricingInputbase.Attributes["atos_fechainicioaplicacion"], DateTimeKind.Utc);

                        if (_pricingInputbase.Attributes.Contains("atos_fechafinvigencia"))
                            _pricingInput.Attributes["atos_fechafinvigencia"] = DateTime.SpecifyKind((DateTime)_pricingInputbase.Attributes["atos_fechafinvigencia"], DateTimeKind.Utc);

                        if (_pricingInputbase.Attributes.Contains("atos_fechafinaplicacion"))
                            _pricingInput.Attributes["atos_fechafinaplicacion"] = DateTime.SpecifyKind((DateTime)_pricingInputbase.Attributes["atos_fechafinaplicacion"], DateTimeKind.Utc);

                         if (((TermPricing)formula.ComponentesFormula[i]).DependeDeSubSistemaElectrico == true)
                             _pricingInput.Attributes["atos_subsistemaid"] = new EntityReference("atos_subsistema", ((EntityReference)_oferta.Attributes["atos_subsistemaid"]).Id);
                        if (((TermPricing)formula.ComponentesFormula[i]).DependeDeSistemaElectrico == true)
                            _pricingInput.Attributes["atos_sistemaelectricoid"] = new EntityReference("atos_sistemaelectrico", ((EntityReference)_oferta.Attributes["atos_sistemaelectricoid"]).Id);
                        if (((TermPricing)formula.ComponentesFormula[i]).DependeDeTarifa == true)
                            _pricingInput.Attributes["atos_tarifaid"] = new EntityReference("atos_tarifa", ((EntityReference)_oferta.Attributes["atos_tarifaid"]).Id);
                        if (((TermPricing)formula.ComponentesFormula[i]).DependeDePeaje == true)
                            _pricingInput.Attributes["atos_peajeid"] = new EntityReference("atos_tablasatrgas", ((EntityReference)_oferta.Attributes["atos_peajeid"]).Id);
                        Log.writelog("Asocia pricinginput a oferta");
                        _pricingInput.Attributes["atos_ofertaid"] = new EntityReference("atos_oferta", _oferta.Id);
                        _pricingInput.Id = Guid.NewGuid();
                        Log.writelog("Asocia pricinginput a terminodepricing");
                        _pricingInput.Attributes["atos_terminodepricingid"] = new EntityReference("atos_terminodepricing", ((TermPricing)formula.ComponentesFormula[i]).TermpricingId);
                        Log.writelog("Actualiza nombre de pricinginput");

                        if (((TermPricing)formula.ComponentesFormula[i]).NombreEms != "")
                            _pricingInput.Attributes["atos_name"] = ((TermPricing)formula.ComponentesFormula[i]).NombreEms + "-";
                        else
                            _pricingInput.Attributes["atos_name"] = formula.ComponentesFormula[i].NombreComponente + "-";
                        _pricingInput.Attributes["atos_name"] += _oferta.Attributes["atos_name"].ToString() + "-" + (j + 1);

                        Log.writelog("Pricing Input Name: " + _pricingInput.Attributes["atos_name"].ToString());

                        Log.writelog("Antes de Create pricingInput");
                        localcontext.OrganizationService.Create(_pricingInput);
                        Log.writelog("Después de Create pricingInput");
                    }

                }
            }
        }


        private void deleteproduct(ref Entity _oferta)
        {
            if (_oferta.Attributes.Contains("atos_tipodeproductofinalid"))
            {
                Guid _tipoProductoId = ((EntityReference)_oferta.Attributes["atos_tipodeproductofinalid"]).Id;

                _oferta.Attributes["atos_tipodeproductofinalid"] = null;
                _oferta.Attributes["atos_tipoproductofinalrevisado"] = false;
                localcontext.OrganizationService.Update(_oferta);
            }
        }


        /**
        // <summary>
        // Elimina los registros de pricing input para una oferta.
        // </summary>
        // <param name="_oferta">Referencia a la entidad oferta (registro que se está modificando)</param>
        // <param name="_ofpre">Imagen de la entidad oferta antes de la modificación</param>
        // <remarks>
        // Borra todos los registros de Pricing Input de la oferta recibida.
        // - Actualiza en la oferta el campo atos_pricinginputsrevisados a false
        // </remarks>
         */
        private void deletepricinginput(ref Entity _oferta)
        {
            Log.writelog("Borra Pricing Input");
            if (_oferta.Attributes.Contains("atos_tipodeproductofinalid") == false)
                return;
            QueryExpression _consulta = new QueryExpression("atos_pricinginput");

            FilterExpression _filtro = new FilterExpression();
            _filtro.FilterOperator = LogicalOperator.And;
            ConditionExpression _condicion = new ConditionExpression();
            _condicion.AttributeName = "atos_ofertaid";
            _condicion.Operator = ConditionOperator.Equal;
            _condicion.Values.Add(_oferta.Id.ToString());
            Log.writelog("Id Oferta " + _oferta.Id.ToString());
            _filtro.Conditions.Add(_condicion);

            _condicion = new ConditionExpression(); // Excluimos pricing input del cierre de la oferta
            _condicion.AttributeName = "atos_cierreofertaid";
            _condicion.Operator = ConditionOperator.Null;
            Log.writelog("Cierre Oferta a null");
            _filtro.Conditions.Add(_condicion);

            _condicion = new ConditionExpression(); // Excluimos pricing input de facturacion estimada
            _condicion.AttributeName = "atos_facturacionestimada";
            _condicion.Operator = ConditionOperator.NotEqual;
            _condicion.Values.Add(true);
            Log.writelog("Facturacion estimada no true");
            _filtro.Conditions.Add(_condicion);

            _consulta.Criteria.AddFilter(_filtro);

            _consulta.ColumnSet.AddColumns("atos_pricinginputid");


            EntityCollection _resultado = localcontext.OrganizationService.RetrieveMultiple(_consulta);

            for (int i = 0; i < _resultado.Entities.Count; i++)
            {
                Guid _pricinginputid = (Guid)_resultado.Entities[i].Attributes["atos_pricinginputid"];
                localcontext.OrganizationService.Delete("atos_pricinginput", _pricinginputid);
            }
            _oferta.Attributes["atos_pricinginputsrevisados"] = false;
            localcontext.OrganizationService.Update(_oferta);
            Log.writelog("Borra Pricing Input Final");
        }

        /**
        // <summary>
        // Elimina los registros de pricing output para una oferta.
        // </summary>
        // <param name="_oferta">Referencia a la entidad oferta</param>
        // <remarks>
        // Borra todos los registros de Pricing Output de la oferta recibida.
        // </remarks>
         */
        private void deletepricingoutput(ref Entity _oferta)
        {
            Log.writelog("Borra Pricing Output");
            QueryExpression _consulta = new QueryExpression("atos_pricingoutput");

            FilterExpression _filtro = new FilterExpression();  
            _filtro.FilterOperator = LogicalOperator.And;
            ConditionExpression _condicion = new ConditionExpression();
            _condicion.AttributeName = "atos_ofertaid";
            _condicion.Operator = ConditionOperator.Equal;
            _condicion.Values.Add(_oferta.Id.ToString());
            Log.writelog("Id Oferta " + _oferta.Id.ToString());
            _filtro.Conditions.Add(_condicion);

            _condicion = new ConditionExpression(); // Excluimos pricing output de facturacion estimada
            _condicion.AttributeName = "atos_facturacionestimada";
            _condicion.Operator = ConditionOperator.NotEqual;
            _condicion.Values.Add(true);
            Log.writelog("Facturacion estimada no true");
            _filtro.Conditions.Add(_condicion);

            _consulta.Criteria.AddFilter(_filtro);

            _consulta.ColumnSet.AddColumns("atos_pricingoutputid");

            EntityCollection _resultado = localcontext.OrganizationService.RetrieveMultiple(_consulta);
            for (int i = 0; i < _resultado.Entities.Count; i++)
            {
                Guid _pricingoutputid = (Guid)_resultado.Entities[i].Attributes["atos_pricingoutputid"];
                localcontext.OrganizationService.Delete("atos_pricingoutput", _pricingoutputid);
            }
            Log.writelog("Borra Pricing Output Final");
        }


        private EntityCollection ofertasHijas(Entity ofertaPadre, LocalPluginContext localcontext)
        {
            QueryExpression _consulta = new QueryExpression("atos_oferta");

            FilterExpression _filtro = new FilterExpression();
            _filtro.FilterOperator = LogicalOperator.And;
            ConditionExpression _condicion = new ConditionExpression();
            _condicion.AttributeName = "atos_ofertapadreid";
            _condicion.Operator = ConditionOperator.Equal;
            _condicion.Values.Add(ofertaPadre.Id.ToString());
            Log.writelog("Id Oferta " + ofertaPadre.Id.ToString());
            _filtro.Conditions.Add(_condicion);

            _consulta.Criteria.AddFilter(_filtro);
            _consulta.ColumnSet.AddColumns("atos_tipooferta", "atos_tipodeproductofinalid");
            return localcontext.OrganizationService.RetrieveMultiple(_consulta);
        }


        private EntityCollection obtenerOfertaPricing(Entity oferta, LocalPluginContext localcontext)
        {
            QueryExpression _consulta = new QueryExpression("atos_bpf_1c3d1c4af29543429ee2b7465a2e6ee8");

            FilterExpression _filtro = new FilterExpression();
            _filtro.FilterOperator = LogicalOperator.And;
            ConditionExpression _condicion = new ConditionExpression();
            _condicion.AttributeName = "bpf_atos_ofertaid";
            _condicion.Operator = ConditionOperator.Equal;
            _condicion.Values.Add(oferta.Id.ToString());
            _filtro.Conditions.Add(_condicion);

            _consulta.Criteria.AddFilter(_filtro);
            _consulta.ColumnSet.AddColumns("businessprocessflowinstanceid", "activestageid", "traversedpath", "processid");
            return localcontext.OrganizationService.RetrieveMultiple(_consulta);
        }


        private void actualizaPasoHijas(Entity preOferta, Entity ofertaPadre, Entity ofertaPricing, LocalPluginContext localcontext, bool cambiaproducto = false, bool cambiaTipoCalculo = false)
        {
            Log.writelog("Actualiza paso de ofertas hijas. Oferta padre: " + ofertaPadre.Id.ToString(),true);
            if (((OptionSetValue)ofertaPadre.Attributes["atos_tipooferta"]).Value == 300000002) // Oferta
                return;

            Log.writelog("Recupera stage padre",true);
            Entity stage = localcontext.OrganizationService.Retrieve("processstage", ((EntityReference)ofertaPricing.Attributes["activestageid"]).Id, new ColumnSet(true));
            Log.writelog("activestageid " + stage.Id.ToString());
            Log.writelog("Recupera proccess padre",true);
            //Entity process;
            EntityReference processid;
            if (ofertaPricing.Attributes.Contains("proccessid"))
            {
                processid = (EntityReference)ofertaPricing.Attributes["processid"] ;
            }
            else
            {
                processid = (EntityReference)preOferta.Attributes["processid"] ;
            }

            Log.writelog("processid " + processid.ToString(),true);
            //process = localcontext.OrganizationService.Retrieve("workflow", processid, new ColumnSet(true));

            Log.writelog("Recupera ofertas hijas",true);
            EntityCollection _resultado = ofertasHijas(ofertaPadre, localcontext);
            Log.writelog("Fin Recupera ofertas hijas", true);
            Guid _tipoproductoid = Guid.Empty;
            if (cambiaproducto)
            {
                if (ofertaPadre.Attributes.Contains("atos_tipodeproductoid"))
                    _tipoproductoid = ((EntityReference)ofertaPadre.Attributes["atos_tipodeproductoid"]).Id;
            }

            Object _precisiondecimalesoferta = null;
            if (ofertaPadre.Attributes.Contains("atos_precisiondecimalesoferta"))
                _precisiondecimalesoferta = ofertaPadre.Attributes["atos_precisiondecimalesoferta"];
            

            OptionSetValue optTipoCalculoPromedio = new OptionSetValue(300000000);
            OptionSetValue optTipoCalculoDirecto = new OptionSetValue(300000001);

            for (int i = 0; i < _resultado.Entities.Count; i++)
            {
                Entity _ofertaHija = new Entity("atos_oferta");
                _ofertaHija.Id = _resultado.Entities[i].Id;


                EntityCollection ofertasPricing = obtenerOfertaPricing(_resultado.Entities[i], localcontext);

                foreach (Entity op in ofertasPricing.Entities)
                {
                    Entity opAct = new Entity("atos_bpf_1c3d1c4af29543429ee2b7465a2e6ee8");
                    opAct.Id = op.Id;

                    opAct.Attributes["activestageid"] = ofertaPricing.Attributes["activestageid"];
                    opAct.Attributes["processid"] = processid;

                    if (ofertaPricing.Attributes.Contains("traversedpath"))
                    {
                        Log.writelog("ENTRA 1 :traversedpath " + ofertaPricing.Attributes["traversedpath"].ToString() , true);
                        opAct.Attributes["traversedpath"] = ofertaPricing.Attributes["traversedpath"];
                    }
                    else
                    {
                        Log.writelog("ENTRA 2 :traversedpath " + ((EntityReference)ofertaPricing.Attributes["activestageid"]).Id.ToString(), true);
                        opAct.Attributes["traversedpath"] = ((EntityReference)ofertaPricing.Attributes["activestageid"]).Id.ToString();
                    }
                    Log.writelog("Id:"  + op.Id,true);
                        localcontext.OrganizationService.Update(opAct);
                    Log.writelog("Guardado ", true);
                }

                if (_precisiondecimalesoferta != null)
                    _ofertaHija.Attributes["atos_precisiondecimalesoferta"] = _precisiondecimalesoferta;

                if (cambiaproducto)
                {
                    if (_tipoproductoid != Guid.Empty)
                        _ofertaHija.Attributes["atos_tipodeproductoid"] = new EntityReference("atos_tipodeproducto", _tipoproductoid);
                    if (ofertaPadre.Attributes.Contains("atos_tipodeproductofinalid"))
                        _ofertaHija.Attributes["atos_tipodeproductofinalid"] = new EntityReference("atos_tipodeproducto", ((EntityReference)ofertaPadre.Attributes["atos_tipodeproductofinalid"]).Id);
                }
                else
                {
                    if (ofertaPadre.Attributes.Contains("atos_tipoproductofinalrevisado"))
                    {
                        _ofertaHija.Attributes["atos_tipoproductofinalrevisado"] = ofertaPadre.Attributes["atos_tipoproductofinalrevisado"];
                    }
                }


                if (cambiaTipoCalculo)
                {
                    if (tipoCalculoPromedio)
                        _ofertaHija.Attributes["atos_tipodecalculo"] = optTipoCalculoPromedio;
                    else
                        _ofertaHija.Attributes["atos_tipodecalculo"] = optTipoCalculoDirecto;
                    if (ofertaPadre.Attributes.Contains("atos_pricinginputsrevisados"))
                    {
                        _ofertaHija.Attributes["atos_pricinginputsrevisados"] = ofertaPadre.Attributes["atos_pricinginputsrevisados"];
                    }
                }


                Log.writelog("Actualiza oferta hija " + _resultado.Entities[i].Id.ToString());

                localcontext.OrganizationService.Update(_ofertaHija);


                if (((OptionSetValue)ofertaPadre.Attributes["atos_tipooferta"]).Value == 300000000 &&
                    ((OptionSetValue)_resultado.Entities[i].Attributes["atos_tipooferta"]).Value == 300000001)
                {
                    EntityCollection _hijas = ofertasHijas(_resultado.Entities[i], localcontext);
                    for (int j = 0; j < _hijas.Entities.Count; j++)
                    {

                        _ofertaHija = new Entity("atos_oferta");
                        _ofertaHija.Id = _hijas.Entities[j].Id;

                        foreach (Entity op in ofertasPricing.Entities)
                        {
                            Entity opAct = new Entity("atos_bpf_1c3d1c4af29543429ee2b7465a2e6ee8");
                            opAct.Id = op.Id;

                            opAct.Attributes["activestageid"] = ofertaPricing.Attributes["activestageid"];
                            opAct.Attributes["processid"] = processid;

                            if (ofertaPricing.Attributes.Contains("traversedpath"))
                                opAct.Attributes["traversedpath"] = ofertaPricing.Attributes["traversedpath"];
                            else
                                opAct.Attributes["traversedpath"] = ((EntityReference)ofertaPricing.Attributes["activestageid"]).Id.ToString();

                            localcontext.OrganizationService.Update(opAct);
                        }

                        if (cambiaproducto)
                        {
                            if (_tipoproductoid != Guid.Empty)
                                _ofertaHija.Attributes["atos_tipodeproductoid"] = new EntityReference("atos_tipodeproducto", _tipoproductoid);
                            if (ofertaPadre.Attributes.Contains("atos_tipodeproductofinalid"))
                                _ofertaHija.Attributes["atos_tipodeproductofinalid"] = new EntityReference("atos_tipodeproducto", ((EntityReference)ofertaPadre.Attributes["atos_tipodeproductofinalid"]).Id);
                            if (ofertaPadre.Attributes.Contains("atos_tipoproductofinalrevisado"))
                                _ofertaHija.Attributes["atos_tipoproductofinalrevisado"] = ofertaPadre.Attributes["atos_tipoproductofinalrevisado"];
                        }else
                        {
                            if (ofertaPadre.Attributes.Contains("atos_tipoproductofinalrevisado"))
                            {
                                _ofertaHija.Attributes["atos_tipoproductofinalrevisado"] = ofertaPadre.Attributes["atos_tipoproductofinalrevisado"];
                            }
                        }

                        if (cambiaTipoCalculo)
                        {
                            if (tipoCalculoPromedio)
                                _ofertaHija.Attributes["atos_tipodecalculo"] = optTipoCalculoPromedio;
                            else
                                _ofertaHija.Attributes["atos_tipodecalculo"] = optTipoCalculoDirecto;
                            if (ofertaPadre.Attributes.Contains("atos_pricinginputsrevisados"))
                            {
                                _ofertaHija.Attributes["atos_pricinginputsrevisados"] = ofertaPadre.Attributes["atos_pricinginputsrevisados"];
                            }
                           
                        }

                        Log.writelog("Actualiza oferta hija de subofertas " + _hijas.Entities[j].Id.ToString());
                        localcontext.OrganizationService.Update(_ofertaHija);
                    }
                }
            }

            Log.writelog("Fin de actualizar paso hijas");

        }


        private void borradoProductohijas(Entity preOferta, Entity ofertaPadre, Entity ofertaPricing, LocalPluginContext localcontext, Guid productofinalId)
        {
            // borrado del producto
            if (((OptionSetValue)ofertaPadre.Attributes["atos_tipooferta"]).Value == 300000002)
                return;

            Log.writelog("Recupera stage padre",true);
            Entity stage = localcontext.OrganizationService.Retrieve("processstage", ((EntityReference)ofertaPricing.Attributes["activestageid"]).Id, new ColumnSet(true));
            Log.writelog("activestageid " + stage.Id.ToString());
            Log.writelog("Recupera proccess padre",true);
            //Entity process;
            EntityReference processid;
            if (ofertaPricing.Attributes.Contains("proccessid"))
            {
                processid = (EntityReference)ofertaPricing.Attributes["processid"];
            }
            else
            {
                processid = (EntityReference)preOferta.Attributes["processid"];
            }

            Log.writelog("Recupera ofertas hijas",true);
            EntityCollection _resultado = ofertasHijas(ofertaPadre, localcontext);
            Log.writelog("fin Recupera ofertas hijas", true);
            for (int i = 0; i < _resultado.Entities.Count; i++)
            {
                Entity _ofertaHija = new Entity("atos_oferta");
                _ofertaHija.Id = _resultado.Entities[i].Id;

                EntityCollection ofertasPricing = obtenerOfertaPricing(_resultado.Entities[i], localcontext);

                foreach (Entity op in ofertasPricing.Entities)
                {
                    Entity opAct = new Entity("atos_bpf_1c3d1c4af29543429ee2b7465a2e6ee8");
                    opAct.Id = op.Id;

                    opAct.Attributes["activestageid"] = ofertaPricing.Attributes["activestageid"];
                    opAct.Attributes["processid"] = processid;

                    if (ofertaPricing.Attributes.Contains("traversedpath"))
                        opAct.Attributes["traversedpath"] = ofertaPricing.Attributes["traversedpath"];
                    else
                        opAct.Attributes["traversedpath"] = ((EntityReference)ofertaPricing.Attributes["activestageid"]).Id.ToString();

                    localcontext.OrganizationService.Update(opAct);
                }
            }

            Log.writelog("Fin de actualizar borrado productos a hijas",true);

        }


        private Guid matrizHoraria(Entity _oferta)
        {
            Guid _matrizhorariaid = Guid.Empty;
            Guid _sistemaelectricoid = Guid.Empty;
            Guid _tarifaid = Guid.Empty;
            if (_oferta.Attributes.Contains("atos_sistemaelectricoid"))
                _sistemaelectricoid = ((EntityReference)_oferta.Attributes["atos_sistemaelectricoid"]).Id;

            if (_oferta.Attributes.Contains("atos_tarifaid"))
                _tarifaid = ((EntityReference)_oferta.Attributes["atos_tarifaid"]).Id;
          

            if (_tarifaid == Guid.Empty || _sistemaelectricoid == Guid.Empty)
                return _matrizhorariaid;
            Log.writelog("matrizHoraria - antes de QueryByAttribute");
            QueryByAttribute _consulta = new QueryByAttribute("atos_matrizportarifaysistemaelectrico");

            Log.writelog("matrizHoraria - antes de definir columnas");
            _consulta.ColumnSet = new ColumnSet(new String[] { "atos_matrizhorariaid" });
            _consulta.AddAttributeValue("atos_tarifaid", _tarifaid.ToString());
            _consulta.AddAttributeValue("atos_sistemaelectricoid", _sistemaelectricoid.ToString());


            EntityCollection _resConsulta = localcontext.OrganizationService.RetrieveMultiple(_consulta);
            if (_resConsulta.Entities.Count > 0)
                _matrizhorariaid = ((EntityReference)_resConsulta.Entities[0].Attributes["atos_matrizhorariaid"]).Id;
            return _matrizhorariaid;
        }


        /**
        // <summary>
        // Executes the plug-in.
        // </summary>
        // <param name="serviceProvider">The service provider.</param>
        // <remarks>
        // Dependiendo de la fase debe hacer lo siguiente:
        // - Copia del producto base
        // - Clonar los pricing inputs asociados a la oferta
        // - Calcular los pricing output (hay que meter también pricing output para la fórmula final y para las variables intermedias, en estos casos el pricing output no irá relacionado con un término de pricing)
        // </remarks>
         */
        public void Execute(IServiceProvider serviceProvider)
        {
            
            errores.Clear();
            esGas = false; // Pricing Gas
            if (serviceProvider == null)
            {
                throw new ArgumentNullException("serviceProvider");
            }
            tipoCalculoPromedio = false;
            // Construct the Local plug-in context.
            localcontext = new LocalPluginContext(serviceProvider);
            Log.tracingService = localcontext.TracingService;

            Log.writelog("TermPricing.Execute: " + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString(), true);

            
            try
            {
                Log.writelog("Aplica solo para el estado Update", true);

                if (localcontext.PluginExecutionContext.MessageName != "Update")
                    return;

                Log.writelog("Carga Targeten _ofertaPricing", true);

                Entity _ofertaPricing = (Entity)localcontext.PluginExecutionContext.InputParameters["Target"];  

                Log.writelog("LogicalName atos_bpf_1c3d1c4af29543429ee2b7465a2e6ee8?", true);

                if (_ofertaPricing.LogicalName != "atos_bpf_1c3d1c4af29543429ee2b7465a2e6ee8")
                    return;

                Log.writelog("Oferta contiene activestageid?", true);

                if (_ofertaPricing.Attributes.Contains("activestageid") == false)
                    return;

                Log.writelog("PreEntityImage == null?", true);

                if (localcontext.PluginExecutionContext.PreEntityImages["PreEntityImage"] == null)
                {
                    localcontext.Trace(string.Format(CultureInfo.InvariantCulture, "No viene información de la entidad antes de los cambios"));
                    Log.writelog(string.Format(CultureInfo.InvariantCulture, "No viene información de la entidad antes de los cambios"),true);
                    Log.writelog("===============================================================",true);
                    return;
                }

                Entity efpre = (Entity)localcontext.PluginExecutionContext.PreEntityImages["PreEntityImage"];

                Log.writelog("Oferta contiene bpf_atos_ofertaid?", true);

                if (efpre.Attributes.Contains("bpf_atos_ofertaid") == false)
                    return;

                Log.writelog("Carga Entity _oferta", true);

                Entity _oferta = localcontext.OrganizationService.Retrieve("atos_oferta", ((EntityReference)_ofertaPricing.Attributes["bpf_atos_ofertaid"]).Id, new ColumnSet(true));
                Entity processStage; 

                try
                {
                    processStage = localcontext.OrganizationService.Retrieve("processstage", ((EntityReference)_ofertaPricing.Attributes["activestageid"]).Id, new ColumnSet(true));
                }
                catch (Exception ex)
                {
                    Log.writelog("Exception:" + ex.Message , true);
                    throw ex;
                }

                Log.writelog("Recupera processStage", true);

                // AC Entity efpre = (Entity)localcontext.PluginExecutionContext.PreEntityImages["PreEntityImage"];

                if (efpre.Attributes.Contains("activestageid") == true)
                {
                    Entity processStagePre = localcontext.OrganizationService.Retrieve("processstage", ((EntityReference)efpre.Attributes["activestageid"]).Id, new ColumnSet(true));
                    if (((OptionSetValue)processStagePre.Attributes["stagecategory"]).Value == ((OptionSetValue)processStage.Attributes["stagecategory"]).Value)
                        return;
                }

                // Pricing gas
                if (_oferta.Attributes.Contains("atos_commodity"))
                {
                    if (((OptionSetValue)_oferta.Attributes["atos_commodity"]).Value == 300000001)
                    {
                        esGas = true;
                    }
                }
                else if (efpre.Attributes.Contains("atos_commodity"))
                {
                    if (((OptionSetValue)efpre.Attributes["atos_commodity"]).Value == 300000001)
                    {
                        esGas = true;
                    }
                }

                Log.writelog("esGas: " + esGas.ToString(), true);

                Guid peajeGasId = Guid.Empty;
                if ( esGas )
                {
                    if (_oferta.Attributes.Contains("atos_peajeid"))
                    {
                        peajeGasId = ((EntityReference)_oferta.Attributes["atos_peajeid"]).Id;
                    }
                }
                
                // Si es de gas y no es de tipo Multipunto tiene que tener informado peaje
                if (esGas && peajeGasId == Guid.Empty &&
                    _oferta.Attributes.Contains("atos_tipooferta") && ((OptionSetValue)_oferta.Attributes["atos_tipooferta"]).Value != 300000000)
                {
                    localcontext.Trace(string.Format(CultureInfo.InvariantCulture, "La oferta no tiene informado el peaje"));
                    Log.writelog(string.Format(CultureInfo.InvariantCulture, "La oferta no tiene informado el peaje"));
                    Log.writelog("===============================================================");
                    return;
                }
                // Fin Pricing gas
                

                if (((OptionSetValue)processStage.Attributes["stagecategory"]).Value == 4) // Identificar
                {
                    Log.writelog("stagecategory == 4",true);
                    Log.writelog("Identificar", true);

                    Guid _productofinalid = Guid.Empty;
                    if (_oferta.Attributes.Contains("atos_tipodeproductofinalid"))
                        _productofinalid = ((EntityReference)_oferta.Attributes["atos_tipodeproductofinalid"]).Id;

                    if (_productofinalid != Guid.Empty && ((OptionSetValue)_oferta.Attributes["atos_tipooferta"]).Value != 300000002)
                        borradoProductohijas(efpre, _oferta,_ofertaPricing, localcontext, _productofinalid);

                    deleteproduct(ref _oferta);
                    Log.writelog("===============================================================");
                    return;
                }
                else if (((OptionSetValue)processStage.Attributes["stagecategory"]).Value == 2) // Creación y revisión de producto
                {
                    Log.writelog("stagecategory == 2",true);
                    Log.writelog("Creación y revisión de producto", true);

                    _oferta.Attributes["atos_tipoproductofinalrevisado"] = false;
                    Log.writelog("Inicio deletepricinginput", true);
                    deletepricinginput(ref _oferta);
                    Log.writelog("Fin deletepricinginput", true);
                    if (efpre.Attributes.Contains("activestageid") == true)
                    {
                        Entity processStagePrev = localcontext.OrganizationService.Retrieve("processstage", ((EntityReference)efpre.Attributes["activestageid"]).Id , new ColumnSet(true));
                        Log.writelog("Fin processStagePrev", true);
                        Log.writelog("Fin processStagePrev--->" + ((OptionSetValue)processStagePrev.Attributes["stagecategory"]).Value.ToString(), true);

                        if (((OptionSetValue)processStagePrev.Attributes["stagecategory"]).Value == 4)
                        {
                            Log.writelog("stagecategory == 2--> llega 1", true);
                            if (_oferta.Attributes.Contains("atos_ofertapadreid") &&
                                !(((OptionSetValue)_oferta.Attributes["atos_tipooferta"]).Value == 300000001 &&
                                  (_oferta.Attributes.Contains("atos_tipodeproductoid")) &&
                                  !_oferta.Attributes.Contains("atos_tipodeproductofinalid")))
                            { // Las ofertas hijas en las multipunto se actualiza el primer paso por Workflow.
                                // Las subofertas se puede modificar el producto final
                                return;
                            }

                            deleteproduct(ref _oferta);
                            creaproducto(ref _oferta); // efpre.Attributes["atos_name"].ToString());
                            if (((OptionSetValue)_oferta.Attributes["atos_tipooferta"]).Value == 300000000
                              || ((OptionSetValue)_oferta.Attributes["atos_tipooferta"]).Value == 300000001) // Si es multipunto actualiza stage de las hijas (también las subofertas)
                            {
                                actualizaPasoHijas(efpre, _oferta, _ofertaPricing, localcontext, true);
                            }
                            Log.writelog("stagecategory == 2--> llega 1", true);
                           
                        }
                    }

                    Log.writelog("===============================================================");
                    return;
                }
                else if (((OptionSetValue)processStage.Attributes["stagecategory"]).Value == 1) // Creación y Revisión de Pricings Inputs
                {
                    Log.writelog("stagecategory == 1", true);
                    Log.writelog("Creación y Revisión de Pricings Inputs", true);

                    _oferta.Attributes["atos_pricinginputsrevisados"] = false;
                    _oferta.Attributes["atos_tipodecalculo"] = null;

                    Log.writelog("Eliminando los Pricings Inputs", true);
                    deletepricingoutput(ref _oferta);

                    if (efpre.Attributes.Contains("activestageid") == true)
                    {
                        Entity processStagePrev = localcontext.OrganizationService.Retrieve("processstage", ((EntityReference)efpre.Attributes["activestageid"]).Id, new ColumnSet(true));
                        Log.writelog("processStagePrev", true);

                        /*
                         * Tipos de Oferta
                         * 300000000 Oferta Multipunto
                         * 300000001 Sub-Oferta
                         * 300000002 Oferta
                         */

                        Log.writelog("Calcula tripo de oferta [multi-punto, sub-oferta, oferta]", true);

                        if (((OptionSetValue)_oferta.Attributes["atos_tipooferta"]).Value == 300000000) // Si es multipunto actualiza stage de las hijas
                        {
                            Log.writelog("Tipo de oferta es multi-punto: ", true);

                            Log.writelog("inicio actualizaPasoHijas 1", true);
                            actualizaPasoHijas(efpre, _oferta, _ofertaPricing, localcontext);
                            Log.writelog("fin actualizaPasoHijas 1", true);
                        }

                        Log.writelog("stagecategory == 1-->llega 1 ", true);
                        if (((OptionSetValue)processStagePrev.Attributes["stagecategory"]).Value == 2)
                        {
                            Log.writelog("stagecategory == 1-->llega 2 ", true);
                            // Pricing gas
                            if ( (esGas && peajeGasId == Guid.Empty) ||
                                 (!esGas && (_oferta.Attributes.Contains("atos_tarifaid") == false ||
                                _oferta.Attributes.Contains("atos_sistemaelectricoid") == false ||
                                _oferta.Attributes.Contains("atos_subsistemaid") == false)))
                            {
                                Log.writelog("===============================================================");
                                return;
                            }

                            if (((OptionSetValue)_oferta.Attributes["atos_tipooferta"]).Value == 300000002 && _oferta.Attributes.Contains("atos_ofertapadreid")) // Si es oferta hija no hace nada
                            {
                                Log.writelog("===============================================================");
                                return;
                            }

                            Log.writelog("stagecategory == 1-->llega 3 ", true);
                            deletepricinginput(ref _oferta);
                            Log.writelog("creapricinginputCollection", true);
                            creapricinginputCollection(ref _oferta);


                            if (((OptionSetValue)_oferta.Attributes["atos_tipooferta"]).Value == 300000001)
                            { // Si es suboferta actualiza stage de las hijas
                                Log.writelog("inicio actualizaPasoHijas 2", true);
                                actualizaPasoHijas(efpre, _oferta, _ofertaPricing, localcontext);
                                Log.writelog("fin actualizaPasoHijas 2", true);
                            }
                            //throw new Exception("Error provocado");
                        }
                    }

                    localcontext.OrganizationService.Update(_oferta);
                    Log.writelog("===============================================================", true);
                    return;
                }
                else if (((OptionSetValue)processStage.Attributes["stagecategory"]).Value == 3) // Calcular Pricing Outputs
                {
                    Log.writelog("stagecategory == 3",true);
                    Log.writelog("Calcular Pricing Outputs", true);


                    if (_oferta.Attributes.Contains("atos_tipodecalculo"))
                    {
                        if (((OptionSetValue)_oferta.Attributes["atos_tipodecalculo"]).Value == 300000000) // Tipo de calculo promedio
                            tipoCalculoPromedio = true;
                    }
                  

                    // Pricing Gas
                    if ( esGas ) // En gas el tipo de calculo siempre es directo
                    {
                        tipoCalculoPromedio = false;
                    }
                    // Fin Pricing Gas

                    Log.writelog("tipoCalculoPromedio: " + tipoCalculoPromedio.ToString());

                    if (((OptionSetValue)_oferta.Attributes["atos_tipooferta"]).Value == 300000000) // Si es multipunto actualiza stage de las hijas
                        actualizaPasoHijas(efpre, _oferta, _ofertaPricing,localcontext, false, true);

                    if ((esGas && peajeGasId == Guid.Empty) ||
                        (!esGas && (_oferta.Attributes.Contains("atos_tarifaid") == false ||
                                    _oferta.Attributes.Contains("atos_sistemaelectricoid") == false ||
                                    _oferta.Attributes.Contains("atos_subsistemaid") == false)))
                    {
                        Log.writelog("===============================================================");
                        return;
                    }

                    if (((OptionSetValue)_oferta.Attributes["atos_tipooferta"]).Value == 300000002 && _oferta.Attributes.Contains("atos_ofertapadreid")) // Si es oferta hija no hace nada
                    {
                        Log.writelog("===============================================================");
                        return;
                    }

                    // Pricing Gas
                    Entity _tarifa;
                    if ( esGas )
                    {
                        Log.writelog("buscando peaje: " + peajeGasId.ToString());
                        _tarifa = localcontext.OrganizationService.Retrieve("atos_tablasatrgas",
                                                                            peajeGasId,
                                                                            new ColumnSet(new[] { "atos_name" }));
                        _tarifa.Attributes["atos_numeroperiodos"] = (Decimal) 1;
                        Log.writelog("encontrado peaje ");
                        if (_tarifa.Attributes.Contains("atos_name"))
                        {
                            Log.writelog("peaje: " + _tarifa.Attributes["atos_name"].ToString());
                        }
                    }
                    else {
                        _tarifa = localcontext.OrganizationService.Retrieve("atos_tarifa",
                                                                                    ((EntityReference)_oferta.Attributes["atos_tarifaid"]).Id,
                                                                                    new ColumnSet(new[] { "atos_name", "atos_numeroperiodos" }));
                    }
                    Log.writelog("atos de buscar tipo de producto",true);

                    // Fin Pricing Gas
                    if (!_oferta.Contains("atos_tipodeproductofinalid"))
                    {
                        Log.writelog("no hay atos_tipodeproductofinalid", true);
                    }
                    Entity _tipoProducto = localcontext.OrganizationService.Retrieve("atos_tipodeproducto",
                                                                                    ((EntityReference)_oferta.Attributes["atos_tipodeproductofinalid"]).Id,
                                                                                    new ColumnSet(new[] {"atos_formula",    "atos_nombreems",
																					                 "atos_nombrevi1",  "atos_valorvi1",
																					                 "atos_nombrevi2",  "atos_valorvi2", 
																					                 "atos_nombrevi3",  "atos_valorvi3", 
																					                 "atos_nombrevi4",  "atos_valorvi4", 
																					                 "atos_nombrevi5",  "atos_valorvi5", 
																					                 "atos_nombrevi6",  "atos_valorvi6", 
																					                 "atos_nombrevi7",  "atos_valorvi7", 
																					                 "atos_nombrevi8",  "atos_valorvi8", 
																					                 "atos_nombrevi9",  "atos_valorvi9", 
																					                 "atos_nombrevi10", "atos_valorvi10" }));
                    // Antes de calcular los pricing output borramos los que puedan existir.
                    // deletepricingoutput(ref _oferta);
                    // No debería hacer falta, solo necesario si se actualiza a stage 3 estando en stage 3, pero en ese caso no debería llegar hasta aquí.
                    Log.writelog("-----construyeFormulas------", true);
                    construyeFormulas(_tipoProducto);
                    Log.writelog("-----calcula-----", true);
                    calcula(ref _oferta, _oferta, _tipoProducto, _tarifa);
                    Log.writelog("----actualizaPasoHijas-----", true);
                    if (((OptionSetValue)_oferta.Attributes["atos_tipooferta"]).Value == 300000001) // Si es suboferta actualiza stage de las hijas
                        actualizaPasoHijas(efpre, _oferta,_ofertaPricing, localcontext, false, true);
                }

             
                
                String _error = "";
                if (errores.Count > 0)
                {
                    Log.writelog("=========================================", true);
                    Log.writelog("Se han encontrado los siguientes errores:", true);

                    for (int i = 0; i < errores.Count; i++)
                    {
                        Log.writelog(" - " + errores[i], true);
                        _error += string.Format("{1}{0}.<br/>", errores[i], Environment.NewLine);
                    }
                    Log.writelog("=========================================", true);
                }

                if (_error != "")
                {
                    _error += Environment.NewLine;
                    throw new InvalidPluginExecutionException(OperationStatus.Canceled, _error);
                }

                Log.writelog("===============================================================");

            }
            catch (FaultException<OrganizationServiceFault> e)
            {
                localcontext.Trace(string.Format(CultureInfo.InvariantCulture, "Exception: {0}", e.ToString()));

                throw;
            }
            finally
            {
                localcontext.Trace(string.Format(CultureInfo.InvariantCulture, "Exiting TermPricing.Execute()"));
            }
        }
    }
}
