// <copyright file="Plugin.cs" company="Licence Owner">
// Copyright (c) 2015 All Rights Reserved
// </copyright>
// <author>Licence Owner</author>
// <date>8/18/2015 12:55:19 PM</date>
// <summary>Implements the Plugin Workflow Activity.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
namespace Acciona
{
    using System;
    using System.Collections.ObjectModel;
    using System.Globalization;
    using System.Linq;
    using System.ServiceModel;
    using Microsoft.Xrm.Sdk;
    using Microsoft.Xrm.Sdk.Query;
    using System.Diagnostics;
    using System.IO;
    using ClosedXML.Excel;

    /// <summary>
    /// Base class for all Plugins.
    /// </summary>    
    public class InformesAcciona : IPlugin
    {
        #region Constantes y Variables
        private String rutaTempServidor;//Ruta temporal del servidor para las plantillas
        private String rutaDestino;//Ruta donde se almacenarán los informes
        private String url;//Url del entorno en el que estamos trabajando
        private Boolean _log = false;
        private Boolean _Merge = false;
        private ITracingService tracingService;
        private String nombre = "";
        private const Char SEPARADOR = '#';
        private const string CONTRATOS = @"Contratos/";
        private const string OFERTAS = @"Ofertas/";
        private const string PLANTILLAOFERTA = "Plantillas//Plantilla_Oferta.xlsx";
        private const string PLANTILLACONTRATO = "Plantillas//Plantilla_Contrato.xlsx";
        private const string CONATR = "Coste_suministro_con_ATR";
        private const string SINATR = "Coste_suministro_sin_ATR";
        private const int FILASENCABEZADO = 4;


        //Constantes para el manejo de informes
        //private string ER = "EntityReference";
        private string D = "Date";

        #endregion

        public InformesAcciona(String parametros)
        {
            if (String.IsNullOrEmpty(parametros))
            {
                throw new InvalidPluginExecutionException("Conexión mal configurada.");
            }
            else
            {
                String[] arrayPar = parametros.Split(SEPARADOR);
                rutaTempServidor = arrayPar[0];
                rutaDestino = arrayPar[1];
                if (arrayPar[2] == "SI")
                    _log = true;
                url = arrayPar[3];
                if (arrayPar.Length > 4 && arrayPar[4] == "SI")
                {
                    _Merge = true;
                }
            }
        }


        public void Execute(IServiceProvider serviceProvider)
        {

            EntityCollection ecInstalacionesMulti = new EntityCollection();
            EntityCollection ecPricingMulti = new EntityCollection();
            EntityCollection ecOfertasFechas = new EntityCollection();
            Microsoft.Xrm.Sdk.IPluginExecutionContext context = (Microsoft.Xrm.Sdk.IPluginExecutionContext)serviceProvider.GetService(typeof(Microsoft.Xrm.Sdk.IPluginExecutionContext));
            serviceProvider.GetService(typeof(Microsoft.Xrm.Sdk.IPluginExecutionContext));

            IOrganizationServiceFactory serviceFactory = (IOrganizationServiceFactory)serviceProvider.GetService(typeof(IOrganizationServiceFactory));
            IOrganizationService _servicio = serviceFactory.CreateOrganizationService(context.InitiatingUserId);
            IOrganizationService _servicioConsultas = serviceFactory.CreateOrganizationService(context.UserId);
            tracingService = (ITracingService)serviceProvider.GetService(typeof(ITracingService));
            writelog(rutaDestino + "log_Plugin.txt", "\n============================================" + "\r\n");
            writelog(rutaDestino + "log_Plugin.txt", "Informes Acciona " + System.DateTime.Now.ToLongDateString() + "\r\n");
            //Comprobamos la acción. Solo nos interesa la creación
            if (context.MessageName == "Create")
            {
                writelog(rutaDestino + "log_Plugin.txt", "context.MessageName: " + context.MessageName + "\r\n");
                if (context.InputParameters.Contains("Target") && context.InputParameters["Target"] is Entity)
                {
                    Entity entityTrigger = (Entity)context.InputParameters["Target"];
                    writelog(rutaDestino + "log_Plugin.txt", "entity: " + entityTrigger.LogicalName + "acción: " + entityTrigger.Attributes["atos_accion"].ToString() + "\r\n");

                    if (entityTrigger.Attributes["atos_accion"].ToString() == "1" || entityTrigger.Attributes["atos_accion"].ToString() == "2")
                    //Habrá que añadir las opciones de contrato
                    {
                        //Creación Excel
                        writelog(rutaDestino + "log_Plugin.txt", "Se crea un libro excel. ClosedXML.Excel.XLWorkbook" + "\r\n");
                        var libro = new ClosedXML.Excel.XLWorkbook();
                        System.DateTime fecha = Convert.ToDateTime(entityTrigger.Attributes["createdon"]).ToLocalTime();
                        String sFecha = fecha.ToString("yyyyMMdd_hhMss");
                        #region Ofertas
                        if (entityTrigger.Attributes["atos_accion"].ToString() == "1")
                        {
                            //Creamos la oferta
                            writelog(rutaDestino + "log_Plugin.txt", "Se inicializa el libro con la plantilla " + rutaTempServidor + PLANTILLAOFERTA + "\r\n");
                            libro = new ClosedXML.Excel.XLWorkbook(rutaTempServidor + PLANTILLAOFERTA);
                            //Recogemos los datos necesarios
                            Entity eOferta = CamposOferta(_servicioConsultas, entityTrigger);

                            GenerarHoja1Oferta(libro, _servicioConsultas, eOferta, fecha);
                            GenerarHoja3Oferta(libro, _servicioConsultas, eOferta);
                            GenerarHoja4Oferta(libro, _servicioConsultas, eOferta);
                            //Mail del comercial                                   
                            String mailAgente = ObtenerMailAgenteComercial(eOferta, _servicioConsultas);
                            writelog(rutaDestino + "log_Plugin.txt", "mailAgente: " + mailAgente+ "\r\n");
                            GenerarCierres(eOferta, _servicioConsultas, libro, mailAgente);
                            GenerarCierreCoberturas(eOferta, mailAgente, libro);
                            /******************************************************************************************************************************************/
                            /*IMPORTANTE!!La hoja 2 la generamos después de los cierres porque elimina pestañas y nos descuadraría la clonación de pestañas en cierres*/
                            /******************************************************************************************************************************************/
                            GenerarHoja2Oferta(libro, eOferta);
                            //Comprobamos si la oferta seleccionada es multipunto
                            if (((OptionSetValue)eOferta.Attributes["atos_tipooferta"]).Value != 300000002)
                            {
                                //Oferta multipunto. Buscamos sus ofertas hijas
                                EntityCollection ecOfertasHijas = ConsultaHijos(_servicioConsultas, eOferta);
                                writelog(rutaDestino + "log_Plugin.txt", "Esta oferta multipunto tiene " + ecOfertasHijas.Entities.Count + " ofertas hijas" + "\r\n");
                                if (ecOfertasHijas.Entities.Count > 0)
                                {
                                    foreach (Entity oferta in ecOfertasHijas.Entities)
                                    {
                                        writelog(rutaDestino + "log_Plugin.txt", "TIPO OFERTA " + ((OptionSetValue)oferta.Attributes["atos_tipooferta"]).Value + "\r\n");
                                        if (((OptionSetValue)oferta.Attributes["atos_tipooferta"]).Value == 300000002)  //Oferta simple                                     
                                        {
                                            //Recogemos su instalación y la guardamos en una lista
                                            ecInstalacionesMulti.Entities.Add(CamposInstalacion(_servicioConsultas, oferta)[0]);
                                            EntityCollection pricingOutput = CamposPricingOutput(_servicioConsultas, oferta);
                                            if (pricingOutput.Entities.Count > 0)
                                                ecPricingMulti.Entities.Add(pricingOutput[0]);
                                            ecOfertasFechas.Entities.Add(oferta);
                                        }
                                        else
                                        {
                                            BuscarHijosOferta(oferta, _servicioConsultas, ref ecInstalacionesMulti, ref ecPricingMulti, ref ecOfertasFechas);
                                        }
                                    }
                                }
                            }

                            writelog(rutaDestino + "log_Plugin.txt", "OfertasFechas: " + ecOfertasFechas.Entities.Count() + "\r\n");
                            GenerarAnexoI(libro, _servicioConsultas, eOferta, ecInstalacionesMulti, ecOfertasFechas);
                            GenerarAnexoII(libro, _servicioConsultas, eOferta);
                            GenerarAnexoIII(libro, _servicioConsultas, eOferta);
                            //Generamos el nombre del libro a partir del nombre de la oferta y la fecha de creación de la entidad trigger y lo guardamos en el campo
                            //atos_respuesta de dicha entidad  
                            String sOferta = eOferta.Attributes["atos_name"].ToString();
                            sOferta = OFERTAS + sOferta.Replace("/", "-");
                            nombre = sOferta + "_" + sFecha;
                        }

                        #endregion Ofertas
                        #region contrato
                        else if (entityTrigger.Attributes["atos_accion"].ToString() == "2")
                        {
                            //Creamos el contrato
                            writelog(rutaDestino + "log_Plugin.txt", "Se inicializa el libro con la plantilla " + rutaTempServidor + PLANTILLACONTRATO + "\r\n");
                            libro = new ClosedXML.Excel.XLWorkbook(rutaTempServidor + PLANTILLACONTRATO);
                            /*AQUI*/
                            //Recogemos los datos necesarios
                            Entity contrato = CamposContrato(_servicioConsultas, entityTrigger);
                            writelog(rutaDestino + "log_Plugin.txt", "finalizado la consulta " + "\r\n");

                            GenerarHoja1Contrato(libro, _servicioConsultas, contrato, fecha);

                            //Comprobamos si el contrato seleccionado es multipunto
                            /*if (!contrato.Attributes.Contains("atos_instalacionid")) //Si no tiene instalación informada es multipunto
                            {
                                //Contrato multipunto. Buscamos sus contratos hijos
                                EntityCollection ecContratosHijos = ConsultaHijos(_servicioConsultas, contrato);
                                writelog(rutaDestino + "log_Plugin.txt", "Este contrato multipunto tiene " + ecContratosHijos.Entities.Count + " contratos hijos" + "\r\n");
                                if (ecContratosHijos.Entities.Count > 0)
                                {
                                    foreach (Entity miContrato in ecContratosHijos.Entities)
                                    {
                                        if (miContrato.Attributes.Contains("atos_instalacionid"))  //Contrato simple                                     
                                        {
                                            writelog(rutaDestino + "log_Plugin.txt", miContrato.Attributes["atos_name"] + " es un Contrato simple" + "\r\n");
                                            //Recogemos su instalación y la guardamos en una lista
                                            ecInstalacionesMulti.Entities.Add(CamposInstalacion(_servicioConsultas, miContrato)[0]);
                                            EntityCollection pricingOutput = CamposPricingOutput(_servicioConsultas, miContrato);

                                            writelog(rutaDestino + "log_Plugin.txt", pricingOutput.Entities.Count + "\r\n");
                                            if (pricingOutput.Entities.Count > 0)
                                                ecPricingMulti.Entities.Add(pricingOutput[0]);
                                        }
                                        else
                                        {
                                            BuscarHijosContrato(contrato, _servicioConsultas, ref ecInstalacionesMulti);
                                        }
                                    }
                                }
                            }*/

                            //    GenerarHoja2(libro, _servicioConsultas, contrato, ecInstalacionesMulti);
                            //    GenerarHoja3(libro, _servicioConsultas, contrato, ecInstalacionesMulti, ecPricingMulti);

                            //    //Generamos el nombre del libro a partir del nombre del contrato y la fecha de creación de la entidad trigger y lo guardamos en el campo
                            //    //atos_respuesta de dicha entidad  
                            String sContrato = contrato.Attributes["atos_name"].ToString();
                            sContrato = sContrato.Replace("/", "-");
                            nombre = CONTRATOS + sContrato + "_" + sFecha;
                            writelog(rutaDestino + "log_Plugin.txt", "Final EXECUTE " + "\r\n");
                        }
                        #endregion


                        foreach (IXLWorksheet worksheet in libro.Worksheets)
                        {
                            worksheet.Columns().Width = 9;
                            if (worksheet.Name == "AnexoI")
                            {
                                //Si tratamos las hojas del anexoI, 
                                //columna lote y CUPS más pequeña y resto más grandes
                                worksheet.Columns().Width = 10;

                                worksheet.Column(1).Width = 4;
                                worksheet.Column(2).Width = 8.5;
                                worksheet.Column(3).Width = 8.5;

                                //ClosedXML.Excel.XLColumn' to type 'ClosedXML.Excel.IXLColumns


                            }
                            else if (worksheet.Name == "AnexoII")
                            {
                                //Si tratamos las hojas del anexoII, vamos a hacer diferencias
                                worksheet.Column(1).Width = 5;
                                worksheet.Column(2).Width = 5;
                                worksheet.Column(3).Width = 5;
                                worksheet.Column(4).Width = 12;
                                worksheet.Column(5).Width = 5;

                            }
                            else if (worksheet.Name == "AnexoIII")
                            {
                                //Si tratamos las hojas del anexoIII, vamos a hacer diferencias
                                worksheet.Column(2).Width = 10.5;
                                worksheet.Column(3).Width = 7;
                                worksheet.Column(4).Width = 12;
                                worksheet.Column(5).Width = 4;
                                worksheet.Column(6).Width = 8;
                                worksheet.Column(7).Width = 8;
                                worksheet.Column(8).Width = 8;
                                worksheet.Column(9).Width = 8;
                                worksheet.Column(10).Width = 8;
                                worksheet.Column(11).Width = 8;
                            }


                        }

                        writelog(rutaDestino + "log_Plugin.txt", "Salvamos el libro " + nombre + ".xlsx" + "\r\n");
                        entityTrigger.Attributes["atos_respuesta"] = nombre;
                        writelog(rutaDestino + "log_Plugin.txt", "URL: " + url + "\r\n");
                        entityTrigger.Attributes["atos_url"] = url;
                        _servicioConsultas.Update(entityTrigger);
                        writelog(rutaDestino + "log_Plugin.txt", rutaTempServidor + nombre + ".xlsx");
                        libro.SaveAs(rutaTempServidor + nombre + ".xlsx");

                        if (_Merge)
                        {
                            MergeSpreadsheets(rutaTempServidor + nombre, libro);
                        }

                    }
                    else if (entityTrigger.Attributes["atos_accion"].ToString() == "99")
                    {
                        writelog(rutaDestino + "log_Plugin.txt", "Accion 3 \r\n");
                        MoveryEliminarFichero(entityTrigger.Attributes["atos_respuesta"].ToString());
                    }
                    else
                        return; //No hacemos nada
                }
                else
                    return; //No hacemos nada               
            }
        }

        #region Contrato
        private void BuscarHijosContrato(Entity contrato, IOrganizationService servicioConsultas, ref EntityCollection ecInstalacionesMulti)
        {
            writelog(rutaDestino + "log_Plugin.txt", "BuscarHijos " + contrato.Attributes["atos_name"].ToString() + "\r\n");
            EntityCollection ecHijos = ConsultaHijos(servicioConsultas, contrato);
            writelog(rutaDestino + "log_Plugin.txt", "Esta entidad tiene " + ecHijos.Entities.Count + " hijos" + "\r\n");

            if (ecHijos.Entities.Count > 0)
            {
                foreach (Entity myEntity in ecHijos.Entities)
                {
                    if (contrato.Attributes.Contains("atos_instalacionid"))  //Simple
                    {
                        //Recogemos su instalación y la guardamos en una lista
                        writelog(rutaDestino + "log_Plugin.txt", "Nos guardamos los datos de la instalacion" + myEntity.Attributes["atos_name"].ToString() + "\r\n");
                        ecInstalacionesMulti.Entities.Add(CamposInstalacion(servicioConsultas, myEntity)[0]);
                    }
                    else
                    {
                        writelog(rutaDestino + "log_Plugin.txt", "Seguimos en múltiple" + "\r\n");
                        BuscarHijosContrato(myEntity, servicioConsultas, ref ecInstalacionesMulti);
                    }
                }
            }
            else
            {
                if (contrato.Attributes.Contains("atos_instalacionid"))   //Contrato simple
                {
                    //Recogemos su instalación y la guardamos en una lista
                    writelog(rutaDestino + "log_Plugin.txt", "Nos guardamos los datos de la instalacion " + contrato.Attributes["atos_name"].ToString() + "\r\n");
                    ecInstalacionesMulti.Entities.Add(CamposInstalacion(servicioConsultas, contrato)[0]);
                }
            }
        }

        private void GenerarHoja1Contrato(ClosedXML.Excel.XLWorkbook libro, IOrganizationService servicioConsultas, Entity contrato, System.DateTime fecha)
        {
            writelog(rutaDestino + "log_Plugin.txt", "GenerarHoja1 \r\n");
            writelog(rutaDestino + "log_Plugin.txt", "tengo estos campos: " + contrato.Attributes.Count + " \r\n");

            var hoja = libro.Worksheet("1.Cabecera"); //Seleccionamos la hoja de trabajo

            llenar(contrato, "createdon", hoja, 11, 3, D);
            llenar(contrato, "atos_cups", hoja, 18, 2);
            llenar(contrato, "atos_fechainiciocontrato", hoja, 19, 3, D);
            llenar(contrato, "atos_fechafincontrato", hoja, 19, 8, D);

            Entity AgenteCom = CamposAgenteComercial(servicioConsultas, contrato);
            llenar(AgenteCom, "atos_name", hoja, 11, 8);
            llenar(AgenteCom, "atos_telefono", hoja, 12, 8);
            llenar(AgenteCom, "emailaddress", hoja, 12, 2);

            Entity RazonSoci = CamposRazonSocial(servicioConsultas, contrato);
            writelog(rutaDestino + "log_Plugin.txt", "tengo estos campos RS: " + RazonSoci.Attributes.Count + " \r\n");

            Entity PersCont = CamposContactoComercial(servicioConsultas, RazonSoci);
            writelog(rutaDestino + "log_Plugin.txt", "tengo estos campos Percont: " + PersCont.Attributes.Count + " \r\n");


            /*
             "firstname", "lastname", "emailaddress1", "atos_numerodocumento", "telephone1"
             */
            llenar(RazonSoci, "name", hoja, 14, 4);
            llenar(RazonSoci, "atos_numerodedocumento", hoja, 15, 2);
            llenar(PersCont, "firstname", hoja, 15, 8);
            llenar(PersCont, "emailaddress1", hoja, 16, 2);
            llenar(PersCont, "telephone1", hoja, 16, 8);


            //String sociedad = "";
            //Entity rsocial = new Entity();
            //Entity contacto = new Entity();
            //Entity cn = new Entity();
            //if (contrato.Attributes.Contains("atos_razonsocialid"))
            //{
            //    rsocial = CamposRazonSocial(servicioConsultas, contrato);
            //    sociedad = rsocial.Attributes["name"].ToString();
            //    if (rsocial.Attributes.Contains("atos_contactocomercialid"))
            //        contacto = CamposContactoComercial(servicioConsultas, rsocial);
            //}
            //else if (contrato.Attributes.Contains("atos_cuentanegociadoraid"))
            //{
            //    cn = CamposCN(servicioConsultas, contrato);
            //    if (cn.Attributes.Contains("atos_contactocomercialid"))
            //    {
            //        contacto = CamposContactoComercial(servicioConsultas, cn);
            //    }
            //}

            //var hoja = libro.Worksheet("1.Cabecera");
            //Entity productoFinal = new Entity();
            //if (contrato.Attributes.Contains("atos_tipodeproductofinalid"))
            //    productoFinal = ConsultaProductoFinal(servicioConsultas, contrato);
            //writelog(rutaDestino + "log_Plugin.txt", "productoFinal \r\n");
            //if (productoFinal != null)
            //{
            //    if (productoFinal.Attributes.Contains("atos_descripcion"))
            //        hoja.Cell(3, 1).Value = productoFinal.Attributes["atos_descripcion"];
            //    else
            //        hoja.Cell(3, 1).Value = "";
            //}
            ////if (((OptionSetValue)oferta.Attributes["atos_tipooferta"]).Value == 300000000) //Multipunto
            //if (((OptionSetValue)contrato.Attributes["atos_tipooferta"]).Value != 300000002) //Multipunto
            //{
            //    if (cn.Attributes.Contains("atos_name"))
            //        sociedad = cn.Attributes["atos_name"].ToString();
            //    hoja.Cell(18, 2).Value = "Ver Anexo I";
            //}
            //else
            //{
            //    if (((OptionSetValue)contrato.Attributes["atos_tipooferta"]).Value == 300000002)  //Oferta simple 
            //    {
            //        //Recogemos el CUPS de la instalacion
            //        if (contrato.Attributes.Contains("atos_instalacionid"))
            //        {
            //            Entity instalacion = CamposInstalacion(servicioConsultas, contrato)[0];
            //            if (instalacion != null)
            //            {
            //                if (instalacion.Attributes.Contains("atos_cups20"))
            //                    hoja.Cell(18, 2).Value = instalacion.Attributes["atos_cups20"].ToString();
            //                else
            //                    hoja.Cell(18, 2).Value = "";
            //            }
            //        }
            //        else
            //            hoja.Cell(18, 2).Value = "";
            //    }
            //    else
            //        hoja.Cell(18, 2).Value = "Ver Anexo I";

            //}

            //hoja.Cell(2, 1).Value = "PROPUESTA INDICATIVA DE SUMINISTRO DE ELECTRICIDAD A " + sociedad;
            //hoja.Column(3).Width = 11;
            //hoja.Cell(14, 4).Value = sociedad;
            //hoja.Cell(11, 3).Value = fecha.ToLocalTime().ToString("dd/MM/yyyy");

            //Entity agenteComercial = new Entity();
            //if (contrato.Attributes.Contains("atos_agentecomercialid"))
            //    agenteComercial = CamposAgenteComercial(servicioConsultas, contrato);
            //if (agenteComercial.Attributes.Contains("atos_name"))
            //    hoja.Cell(11, 8).Value = agenteComercial.Attributes["atos_name"].ToString();
            //else
            //    hoja.Cell(11, 8).Value = "";
            //if (agenteComercial.Attributes.Contains("emailaddress"))
            //    hoja.Cell(12, 2).Value = agenteComercial.Attributes["emailaddress"].ToString();
            //else
            //    hoja.Cell(12, 2).Value = "";
            //if (agenteComercial.Attributes.Contains("atos_telefono"))
            //    hoja.Cell(12, 8).Value = agenteComercial.Attributes["atos_telefono"].ToString();
            //else
            //    hoja.Cell(12, 8).Value = "";

            //if (rsocial.Attributes.Contains("atos_numerodedocumento"))
            //    hoja.Cell(15, 2).Value = rsocial.Attributes["atos_numerodedocumento"].ToString();
            //else
            //    hoja.Cell(15, 2).Value = "";

            //string nombre = "";

            //if (contacto.Attributes.Contains("firstname"))
            //    nombre = contacto.Attributes["firstname"].ToString();
            //if (contacto.Attributes.Contains("lastname"))
            //    nombre = nombre + contacto.Attributes["lastname"].ToString();
            //hoja.Cell(15, 8).Value = nombre;
            //if (contacto.Attributes.Contains("emailaddress1"))
            //    hoja.Cell(16, 2).Value = contacto.Attributes["emailaddress1"].ToString();
            //else
            //    hoja.Cell(16, 2).Value = "";
            //if (contacto.Attributes.Contains("telephone1"))
            //    hoja.Cell(16, 8).Value = contacto.Attributes["telephone1"].ToString();
            //else
            //    hoja.Cell(16, 8).Value = "";
            //if (contrato.Attributes.Contains("atos_fechainicio"))
            //    hoja.Cell(19, 3).Value = Convert.ToDateTime(contrato.Attributes["atos_fechainicio"]).ToLocalTime().ToString("dd/MM/yyyy");
            //else
            //    hoja.Cell(19, 3).Value = "";
            //if (contrato.Attributes.Contains("atos_fechafin"))
            //    hoja.Cell(19, 8).Value = Convert.ToDateTime(contrato.Attributes["atos_fechafin"]).ToLocalTime().ToString("dd/MM/yyyy");
            //else
            //    hoja.Cell(19, 3).Value = "";
            //hoja.Column(5).Width = 15;
            //hoja.Column(7).Width = 15;

            writelog(rutaDestino + "log_Plugin.txt", "FINAL GenerarHoja1 \r\n");
        }


        /*private void GenerarHoja1ContratoVIEJO(ClosedXML.Excel.XLWorkbook libro, IOrganizationService servicioConsultas, Entity contrato)
        {
            var hoja = libro.Worksheet("1.Cabecera");
            writelog(rutaDestino + "log_Plugin.txt", "GenerarHoja1 \r\n");
            if (contrato.Attributes.Contains("atos_name"))
                hoja.Cell(3, 3).Value = contrato.Attributes["atos_name"];
            else
                hoja.Cell(3, 3).Value = "";

            Entity rsocial = new Entity();
            Entity cn = new Entity();
            if (contrato.Attributes.Contains("atos_razonsocialid"))
                rsocial = CamposRazonSocial(servicioConsultas, contrato);
            else if (contrato.Attributes.Contains("atos_cuentanegociadoraid"))
                cn = CamposCN(servicioConsultas, contrato);

            Entity firmante1 = new Entity();
            Entity firmante2 = new Entity();
            //Recuperamos el contenido de la fila 10
            string frase = hoja.Cell(10, 1).GetString();
            if (contrato.Attributes.Contains("atos_representante1clienteid"))
                firmante1 = CamposFirmante(servicioConsultas, contrato, 1);
            if (contrato.Attributes.Contains("atos_representante2clienteid"))
                firmante2 = CamposFirmante(servicioConsultas, contrato, 2);
            string nombre = "";
            if (rsocial.Attributes.Contains("name"))
                frase = frase.Replace("[Nombre  Cliente en CRM]", rsocial.Attributes["name"].ToString());
            else
                frase = frase.Replace("[Nombre  Cliente en CRM]", "_____________________________");

            if (rsocial.Attributes.Contains("atos_numerodedocumento"))
                frase = frase.Replace("[CIF en CRM]", rsocial.Attributes["atos_numerodedocumento"].ToString());
            else
                frase = frase.Replace("[CIF en CRM]", "_____________________________");

            if (!String.IsNullOrEmpty(GetCNAE(servicioConsultas, rsocial)))
            {
                frase = frase.Replace("[CNAE en CRM]", GetCNAE(servicioConsultas, rsocial));
            }
            else
                frase = frase.Replace("[CNAE en CRM]", "_____________________________");

            if (rsocial.Attributes.Contains("atos_rsdireccion"))
                frase = frase.Replace("[Dirección razón social en CRM]", rsocial.Attributes["atos_rsdireccion"].ToString());
            else
                frase = frase.Replace("[Dirección razón social en CRM]", "_____________________________");

            if (firmante1.Attributes.Contains("firstname"))
                nombre = firmante1.Attributes["firstname"].ToString();
            else
                nombre = "_____________________________";
            if (firmante1.Attributes.Contains("lastname"))
                nombre = nombre + firmante1.Attributes["lastname"].ToString();
            else
                nombre = "_____________________________";
            frase = frase.Replace("[firmante 1 en CRM]", nombre);

            if (firmante1.Attributes.Contains("atos_numerodocumento"))
                frase = frase.Replace("[NIF firmante 1 en CRM]", firmante1.Attributes["atos_numerodocumento"].ToString());
            else
                frase = frase.Replace("[NIF firmante 1 en CRM]", "_____________________________");

            if (firmante1.Attributes.Contains("jobtitle"))
                frase = frase.Replace("[cargo firmante 1 en CRM]", firmante1.Attributes["jobtitle"].ToString());
            else
                frase = frase.Replace("[cargo firmante 1 en CRM]", "_____________________________");

            if (firmante2.Attributes.Contains("firstname"))
                nombre = firmante2.Attributes["firstname"].ToString();
            if (firmante2.Attributes.Contains("lastname"))
                nombre = nombre + firmante2.Attributes["lastname"].ToString();
            frase = frase.Replace("[firmante 2 en CRM]", nombre);

            if (firmante2.Attributes.Contains("atos_numerodocumento"))
                frase = frase.Replace("[NIF firmante 2 en CRM]", firmante2.Attributes["atos_numerodocumento"].ToString());
            else
                frase = frase.Replace("[NIF firmante 2 en CRM]", "_____________________________");
            if (firmante2.Attributes.Contains("jobtitle"))
                frase = frase.Replace("[cargo firmante 2 en CRM]", firmante2.Attributes["jobtitle"].ToString());
            else
                frase = frase.Replace("[cargo firmante 2 en CRM]", "_____________________________");
            hoja.Cell(10, 1).Value = frase;
            //DIRECCION PARA COMUNICACIONES Y PERSONAS DE CONTACTO
            //Dirección para comunicaciones             
            if (rsocial.Attributes.Contains("atos_rstipodeviaid"))
            {
                if (!String.IsNullOrEmpty(GetTipoVia(servicioConsultas, rsocial)))
                {
                    hoja.Cell(68, 2).Value = GetTipoVia(servicioConsultas, rsocial);
                }
                else
                    hoja.Cell(68, 2).Value = "";
            }
            else
                hoja.Cell(68, 2).Value = "";
            if (rsocial.Attributes.Contains("atos_rsdireccion"))
                hoja.Cell(68, 5).Value = rsocial.Attributes["atos_rsdireccion"].ToString();
            else
                hoja.Cell(68, 5).Value = "";
            if (rsocial.Attributes.Contains("atos_rsnumero"))
                hoja.Cell(69, 2).Value = rsocial.Attributes["atos_rsnumero"].ToString();
            else
                hoja.Cell(69, 2).Value = "";
            if (rsocial.Attributes.Contains("atos_rsescalera"))
                hoja.Cell(69, 5).Value = rsocial.Attributes["atos_rsescalera"].ToString();
            else
                hoja.Cell(69, 5).Value = "";
            if (rsocial.Attributes.Contains("atos_rspiso"))
                hoja.Cell(69, 8).Value = rsocial.Attributes["atos_rspiso"].ToString();
            else
                hoja.Cell(69, 8).Value = "";
            if (rsocial.Attributes.Contains("atos_rspuerta"))
                hoja.Cell(70, 2).Value = rsocial.Attributes["atos_rspuerta"].ToString();
            else
                hoja.Cell(70, 2).Value = "";
            if (rsocial.Attributes.Contains("atos_rspoligono"))
                hoja.Cell(70, 5).Value = rsocial.Attributes["atos_rspoligono"].ToString();
            else
                hoja.Cell(70, 5).Value = "";

            if (rsocial.Attributes.Contains("atos_rscodigopostalid"))
            {
                if (!String.IsNullOrEmpty(GetCodigoPostal(servicioConsultas, rsocial)))
                {
                    hoja.Cell(71, 2).Value = GetCodigoPostal(servicioConsultas, rsocial);
                }
                else
                    hoja.Cell(71, 2).Value = "";
            }
            else
                hoja.Cell(71, 2).Value = "";

            if (rsocial.Attributes.Contains("atos_rsmunicipioid"))
            {
                if (!String.IsNullOrEmpty(GetMunicipio(servicioConsultas, rsocial)))
                {
                    hoja.Cell(71, 5).Value = GetMunicipio(servicioConsultas, rsocial);
                }
                else
                    hoja.Cell(71, 5).Value = "";
            }
            else
                hoja.Cell(71, 5).Value = "";

            if (rsocial.Attributes.Contains("atos_rspaisid"))
            {
                if (!String.IsNullOrEmpty(GetPais(servicioConsultas, rsocial)))
                {
                    hoja.Cell(71, 8).Value = GetPais(servicioConsultas, rsocial);
                }
                else
                    hoja.Cell(71, 8).Value = "";
            }
            else
                hoja.Cell(71, 8).Value = "";
            //Datos Contacto CLIENTE
            Entity contacto = new Entity();
            //if (rsocial.Attributes.Contains("primarycontactid"))
            //   contacto = CamposContactoPrincipal(servicioConsultas, rsocial);
            //else if (cn.Attributes.Contains("atos_contactoprincipalid"))
            //    contacto = CamposCN(servicioConsultas, cn);
            //if (contacto.Attributes.Contains("firstname"))
            //    nombre = contacto.Attributes["firstname"].ToString();
            //if (contacto.Attributes.Contains("lastname"))
            //    nombre = nombre + contacto.Attributes["lastname"].ToString();
            //hoja.Cell(75, 3).Value = nombre;
            //if (contacto.Attributes.Contains("atos_numerodocumento"))
            //    hoja.Cell(75, 7).Value = contacto.Attributes["atos_numerodocumento"].ToString();
            //else
            //    hoja.Cell(75, 7).Value = "";
            //if (contacto.Attributes.Contains("emailaddress1"))
            //    hoja.Cell(76, 2).Value = contacto.Attributes["emailaddress1"].ToString();
            //else
            //    hoja.Cell(76, 2).Value = "";
            //if (contacto.Attributes.Contains("telephone1"))
            //    hoja.Cell(76, 8).Value = contacto.Attributes["telephone1"].ToString();
            //else
            //    hoja.Cell(76, 8).Value = "";
            //Datos Contacto VENDEDOR
            Entity agenteComercial = new Entity();
            if (contrato.Attributes.Contains("atos_agentecomercialid"))
                agenteComercial = CamposAgenteComercial(servicioConsultas, contrato);
            if (agenteComercial.Attributes.Contains("atos_name"))
                hoja.Cell(79, 3).Value = agenteComercial.Attributes["atos_name"].ToString();
            else
                hoja.Cell(79, 3).Value = "";
            if (agenteComercial.Attributes.Contains("atos_telefono"))
                hoja.Cell(79, 8).Value = agenteComercial.Attributes["atos_telefono"].ToString();
            else
                hoja.Cell(79, 8).Value = "";
            if (agenteComercial.Attributes.Contains("emailaddress"))
                hoja.Cell(80, 2).Value = agenteComercial.Attributes["emailaddress"].ToString();
            else
                hoja.Cell(80, 2).Value = "";

            if (contrato.Attributes.Contains("atos_fechafirmacontrato"))
                hoja.Cell(92, 3).Value = Convert.ToDateTime(contrato.Attributes["atos_fechafirmacontrato"].ToString()).ToLocalTime().ToString("dd/MM/yyyy");
            else
                hoja.Cell(92, 3).Value = "";

        }*/
        #endregion

        #region Oferta
        private void GenerarAnexoII(ClosedXML.Excel.XLWorkbook libro, IOrganizationService servicioConsultas, Entity oferta)
        {
            writelog(rutaDestino + "log_Plugin.txt", "GenerarAnexoII \r\n");
            var posicionIniTabla = 5 + FILASENCABEZADO;
            var ultimaPosOcupada = posicionIniTabla + 3;
            var hoja = libro.Worksheet("AnexoII");
            hoja.Cell(1 + FILASENCABEZADO, 1).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
            hoja.Cell(3 + FILASENCABEZADO, 1).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
            writelog(rutaDestino + "log_Plugin.txt", "Posicion inicio tabla: " + posicionIniTabla + " \r\n");

            if (((OptionSetValue)oferta.Attributes["atos_tipooferta"]).Value != 300000000) //Si es simple o suboferta
            {
                if (oferta.Attributes.Contains("atos_lote"))
                {
                    hoja.Cell(posicionIniTabla, 1).Value = "Lote: " + oferta.Attributes["atos_lote"];
                    hoja.Cell(posicionIniTabla, 1).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                }
                else hoja.Cell(posicionIniTabla, 1).Value = "";
                CargaTablaPreciosOferta(libro, servicioConsultas, oferta, posicionIniTabla, ref ultimaPosOcupada);
            }
            else
            {
                writelog(rutaDestino + "log_Plugin.txt", "multipunto \r\n");
                var posicion = ultimaPosOcupada + 2;
                //Recogemos el listado de subofertas
                EntityCollection lSubOfertas = new EntityCollection();
                lSubOfertas = BuscarSubOfertas(oferta, servicioConsultas);
                writelog(rutaDestino + "log_Plugin.txt", "lSubOfertas: " + lSubOfertas.Entities.Count + " \r\n");
                if (lSubOfertas.Entities.Count > 0)
                {
                    if (lSubOfertas.Entities.Count == 1)
                    {
                        if (lSubOfertas.Entities[0].Attributes.Contains("atos_lote"))
                        {
                            hoja.Cell(posicionIniTabla, 1).Value = lSubOfertas.Entities[0].Attributes["atos_lote"];
                            hoja.Cell(posicionIniTabla, 1).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                        }
                        else hoja.Cell(posicionIniTabla, 1).Value = "";
                        CargaTablaPreciosOferta(libro, servicioConsultas, lSubOfertas.Entities[0], posicionIniTabla, ref ultimaPosOcupada);
                    }
                    else
                    {
                        for (int i = 0; i < lSubOfertas.Entities.Count; i++)
                        {
                            writelog(rutaDestino + "log_Plugin.txt", "lSubOfertas.Entities[" + i + "] \r\n");
                            if (i == 0)
                            {
                                if (lSubOfertas.Entities[i].Attributes.Contains("atos_lote"))
                                {
                                    hoja.Cell(posicionIniTabla, 1).Value = lSubOfertas.Entities[i].Attributes["atos_lote"];
                                    hoja.Cell(posicionIniTabla, 1).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                                }
                                else hoja.Cell(posicionIniTabla, 1).Value = "";
                                CargaTablaPreciosOferta(libro, servicioConsultas, lSubOfertas.Entities[i], posicionIniTabla, ref ultimaPosOcupada);
                            }
                            else
                            {
                                writelog(rutaDestino + "log_Plugin.txt", "Comprobamos si tienen lote informado \r\n");
                                if (lSubOfertas.Entities[i - 1].Attributes.Contains("atos_lote") && lSubOfertas.Entities[i].Attributes.Contains("atos_lote"))
                                {
                                    writelog(rutaDestino + "log_Plugin.txt", "Son del mismo lote? \r\n");
                                    if (!lSubOfertas.Entities[i - 1].Attributes["atos_lote"].Equals(lSubOfertas.Entities[i].Attributes["atos_lote"]))
                                    {
                                        ultimaPosOcupada = ultimaPosOcupada + 1;
                                        posicion = ultimaPosOcupada;
                                        //Pintamos la cabecera del nuevo lote                                       
                                        hoja.Cell(posicion, 1).Value = lSubOfertas.Entities[i].Attributes["atos_lote"];
                                        hoja.Cell(posicion, 1).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                                        hoja.Cell(posicion, 1).Style.Font.FontColor = ClosedXML.Excel.XLColor.FromArgb(192, 0, 0);
                                        hoja.Cell(posicion, 1).Style.Font.FontSize = 9;
                                        hoja.Cell(posicion, 1).Style.Font.Bold = true;
                                        for (int j = 1; j <= 11; j++)
                                        {
                                            hoja.Cell(posicion, j).Style.Border.BottomBorder = ClosedXML.Excel.XLBorderStyleValues.Thin;
                                            hoja.Cell(posicion, j).Style.Border.BottomBorderColor = ClosedXML.Excel.XLColor.Black;
                                        }

                                    }
                                }
                                else
                                    writelog(rutaDestino + "log_Plugin.txt", " \r\n");
                                writelog(rutaDestino + "log_Plugin.txt", "CrearPlantillaTaNo son del mismo loteblaPrecios en posicion: " + posicion + " \r\n");
                                posicion = ultimaPosOcupada + 2;
                                ultimaPosOcupada = ultimaPosOcupada + 3;
                                writelog(rutaDestino + "log_Plugin.txt", "2 CrearPlantillaTablaPrecios en posicion: " + posicion + " \r\n");
                                CrearPlantillaTablaPrecios(libro, posicion);
                                writelog(rutaDestino + "log_Plugin.txt", "CargaTablaPreciosOferta ultimaPosOcupada: " + ultimaPosOcupada + " \r\n");
                                CargaTablaPreciosOferta(libro, servicioConsultas, lSubOfertas.Entities[i], posicion, ref ultimaPosOcupada);
                            }
                        }
                    }
                }
            }
            hoja.Cell(1, 1).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
            hoja.Cell(3, 1).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;

        }
        private void CargaTablaPreciosOferta(ClosedXML.Excel.XLWorkbook libro, IOrganizationService servicioConsultas, Entity oferta, int posicion, ref int ultimaPosOcupada)
        {
            writelog(rutaDestino + "log_Plugin.txt", "CargaTablaPreciosOferta posicion: " + posicion + " ultimaPosOcupada: " + ultimaPosOcupada + "\r\n");
            var hoja = libro.Worksheet("AnexoII");
            //Recogemos el producto final
            Entity productoFinal = new Entity();
            String nombreTarifa = "";
            Entity sistElectrico = null;
            if (oferta.Attributes.Contains("atos_subsistemaid"))
            {
                sistElectrico = SubSistemaElectrico(servicioConsultas, oferta.Id.ToString());
            }

            //writelog(rutaDestino + "log_Plugin.txt", "Final de búsqueda de Subsistema " + sistElectrico.Id + "\r\n");
            EntityCollection pricingInputs = new EntityCollection(); ;
            //if (oferta.Attributes.Contains("atos_lote"))
            //    hoja.Cell(posicion, 1).Value = oferta.Attributes["atos_lote"];
            //else hoja.Cell(posicion, 1).Value = "Lote no informado";


            Guid idTarifa = System.Guid.Empty;
            if (oferta.Attributes.Contains("atos_tarifaid"))
            {
                writelog(rutaDestino + "log_Plugin.txt", "MMJ TARIFA EN ANEXO II ENTRA \r\n");
                Entity tarifa = GetTarifa(servicioConsultas, oferta);

                //Pongo los pricing inputos TE y TP correspondientes a su tarifa
                //Entity GetPricingInputPorTarifa(IOrganizationService _servicioConsultas,  Guid idTarifa, String terminoPricing, DateTime fechaInicio, DateTime fechaFin)
                //oferta.Attributes["atos_fechainicio"]

                if (tarifa.Attributes.Contains("atos_name"))
                {
                    writelog(rutaDestino + "log_Plugin.txt", "MMJ TARIFA EN ANEXO II ENTRA 2 \r\n");
                    nombreTarifa = tarifa.Attributes["atos_name"].ToString();
                    idTarifa = tarifa.Id;
                    writelog(rutaDestino + "log_Plugin.txt", "MMJ TARIFA EN ANEXO II ENTRA y tarifa vale:" + tarifa + " \r\n");
                }
            }

            String nombreSistemaElectrico = null;
            Guid idSistElec = System.Guid.Empty;
            if (oferta.Attributes.Contains("atos_subsistemaid"))
            {
                writelog(rutaDestino + "log_Plugin.txt", "IMP SUBSISTEMA EN ANEXO II ENTRA \r\n");
                Entity SistElectrico = SubSistemaElectrico(servicioConsultas, (oferta.Id).ToString());

                if (SistElectrico != null && SistElectrico.Attributes.Contains("atos_name"))
                {
                    writelog(rutaDestino + "log_Plugin.txt", "IMP SubSistemaElectrico EN ANEXO II ENTRA 2 \r\n");
                    nombreSistemaElectrico = SistElectrico.Attributes["atos_name"].ToString();
                    idSistElec = SistElectrico.Id;
                    writelog(rutaDestino + "log_Plugin.txt", "IMP SubSistemaElectrico EN ANEXO II ENTRA y tarifa vale:" + nombreSistemaElectrico + " \r\n");
                }
            }

            writelog(rutaDestino + "log_Plugin.txt", "Formatos: " + oferta.Attributes["atos_fechainicio"].GetType() + "\r\n");
            Entity TerminoPricingATR_TP = GetTerminoPricingInput(servicioConsultas, "ATR TP", "ATRTP");
            Entity TerminoPricingATR_TE = GetTerminoPricingInput(servicioConsultas, "ATR TE", "ATRTE");

            Entity pricingInputTP = GetPricingInputPorTarifa(servicioConsultas, idTarifa, TerminoPricingATR_TP, (DateTime)oferta.Attributes["atos_fechainicio"], (DateTime)oferta.Attributes["atos_fechafin"], idSistElec);
            if (pricingInputTP != null)
            {
                pricingInputs.Entities.Add(pricingInputTP);
                writelog(rutaDestino + "log_Plugin.txt", "CargaTablaPreciosOferta Consulta PricingInput TP: " + pricingInputTP.Id + "\r\n");
            }

            Entity pricingInputTE = GetPricingInputPorTarifa(servicioConsultas, idTarifa, TerminoPricingATR_TE, (DateTime)oferta.Attributes["atos_fechainicio"], (DateTime)oferta.Attributes["atos_fechafin"], idSistElec);
            if (pricingInputTE != null)
            {
                pricingInputs.Entities.Add(pricingInputTE);
                writelog(rutaDestino + "log_Plugin.txt", "CargaTablaPreciosOferta Consulta PricingInput TE: " + pricingInputTE.Id + "\r\n");
            }


            if (oferta.Attributes.Contains("atos_tipodeproductofinalid"))
                productoFinal = ConsultaProductoFinal(servicioConsultas, oferta);

            if (productoFinal != null)
            {
                //Recogemos todos los pricing output de la oferta que no tengan informado el Término de Pricing y que no tengan facturación
                //estimada
                EntityCollection lPricingO = new EntityCollection();
                lPricingO = PricingOutputSinTerminoPricing(servicioConsultas, oferta);
                writelog(rutaDestino + "log_Plugin.txt", "lPricingO.Entities.Count: " + lPricingO.Entities.Count() + "\r\n");
                //Nos quedamos solo con los que su término EMS sea una variable intermedia "mostrable" del producto final


                int cont = 0;
                //Variables intermedias
                for (int i = 1; i <= 10; i++)
                {
                    writelog(rutaDestino + "log_Plugin.txt", "1 PosiciónIni: " + posicion + " ultimaPosOcupada: " + ultimaPosOcupada + "\r\n");
                    if (productoFinal.Attributes.Contains("atos_nombrevi" + i) && productoFinal.Attributes["atos_mostrareninformev" + i].Equals(true))
                    {
                        if (lPricingO.Entities.Count > 0)
                        {
                            for (int j = 0; j < (lPricingO.Entities.Count); j++)
                            {
                                if (lPricingO.Entities[j].Attributes["atos_terminoems"].Equals(productoFinal.Attributes["atos_nombrevi" + i]))
                                {
                                    writelog(rutaDestino + "log_Plugin.txt", lPricingO.Entities[j].Attributes["atos_terminoems"] + "==" + productoFinal.Attributes["atos_nombrevi" + i] + "\r\n");
                                    cont++;
                                    writelog(rutaDestino + "log_Plugin.txt", "cont=" + cont + "\r\n");
                                    if (cont > 1)
                                    {
                                        hoja.Row(ultimaPosOcupada).InsertRowsBelow(1);
                                        hoja.Row(ultimaPosOcupada).Height = 15;
                                        ultimaPosOcupada++;
                                    }
                                    hoja.Range(hoja.Cell(ultimaPosOcupada, 1), hoja.Cell(ultimaPosOcupada, 3)).Merge();
                                    hoja.Cell(ultimaPosOcupada, 1).Value = productoFinal.Attributes["atos_nombrevi" + i];
                                    hoja.Cell(ultimaPosOcupada, 1).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;

                                    if (productoFinal.Attributes.Contains("atos_unidadv" + i))
                                        hoja.Cell(ultimaPosOcupada, 1).Value = hoja.Cell(ultimaPosOcupada, 1).Value + " " + productoFinal.Attributes["atos_unidadv" + i];
                                    for (int k = 1; k <= 6; k++)
                                    {
                                        writelog(rutaDestino + "log_Plugin.txt", "2 PosiciónIni: " + posicion + " ultimaPosOcupada: " + ultimaPosOcupada + "\r\n");
                                        if (lPricingO.Entities[j].Attributes.Contains("atos_p" + k))
                                            hoja.Cell(ultimaPosOcupada, (5 + k)).Value = lPricingO.Entities[j].Attributes["atos_p" + k];
                                    }
                                }


                            }
                        }
                        hoja.Cell(ultimaPosOcupada, 5).Value = nombreTarifa;
                        hoja.Cell(ultimaPosOcupada, 5).DataType = XLCellValues.Text;
                        //writelog(rutaDestino + "log_Plugin.txt", "3 PosiciónIni: " + posicion + " ultimaPosOcupada: " + ultimaPosOcupada + "\r\n");

                        writelog(rutaDestino + "log_Plugin.txt", "MMJ TARIFA EN ANEXO II: " + nombreTarifa + " \r\n");
                        if (sistElectrico != null && sistElectrico.Attributes.Contains("atos_name"))
                            hoja.Cell(ultimaPosOcupada, 4).Value = sistElectrico.Attributes["atos_name"];
                        else
                            hoja.Cell(ultimaPosOcupada, 4).Value = "";
                    }
                }

                //añadimos los dos PricinInputs correspondientes
                if (pricingInputs.Entities.Count > 0)
                {
                    for (int i = 0; i < (pricingInputs.Entities.Count); i++)
                    {
                        hoja.Row(ultimaPosOcupada).InsertRowsBelow(1);
                        hoja.Row(ultimaPosOcupada).Height = 15;
                        ultimaPosOcupada++;

                        hoja.Range(hoja.Cell(ultimaPosOcupada, 1), hoja.Cell(ultimaPosOcupada, 3)).Merge();
                        hoja.Cell(ultimaPosOcupada, 1).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                        hoja.Cell(ultimaPosOcupada, 1).Style.Font.FontColor = ClosedXML.Excel.XLColor.Black;
                        hoja.Cell(ultimaPosOcupada, 1).Style.Fill.BackgroundColor = ClosedXML.Excel.XLColor.LightGray;

                        hoja.Cell(ultimaPosOcupada, 1).Value = pricingInputs.Entities[i].Attributes["atos_name"].ToString();

                        for (int k = 1; k <= 6; k++)
                        {
                            writelog(rutaDestino + "log_Plugin.txt", "4 PosiciónIni: " + posicion + " ultimaPosOcupada: " + ultimaPosOcupada + "\r\n");
                            if (pricingInputs.Entities[i].Attributes.Contains("atos_p" + k))
                                hoja.Cell(ultimaPosOcupada, (5 + k)).Value = pricingInputs.Entities[i].Attributes["atos_p" + k];
                        }

                        //ponemos el sistema eléctrico y la tarifa
                        if (nombreSistemaElectrico != null && nombreSistemaElectrico != "")
                        {//(sistElectrico.Attributes.Contains("atos_name"))
                            {
                                hoja.Cell(ultimaPosOcupada, 4).Value = nombreSistemaElectrico;// sistElectrico.Attributes["atos_name"];
                            }
                            hoja.Cell(ultimaPosOcupada, 5).Value = nombreTarifa;
                            hoja.Cell(ultimaPosOcupada, 5).DataType = XLCellValues.Text;

                        }

                    }
                    //Establezco el área de impresión
                    hoja.PageSetup.PrintAreas.Add(1, 1, ultimaPosOcupada, 11);

                }
            }
        }

        private void CrearPlantillaTablaPrecios(XLWorkbook libro, int posicion)
        {
            writelog(rutaDestino + "log_Plugin.txt", "Creando la plantilla de la tabla de precios: Posición: " + posicion + " \r\n");
            var hoja = libro.Worksheet("AnexoII");

            hoja.Range(hoja.Cell(posicion, 1), hoja.Cell(posicion, 3)).Merge();
            hoja.Range(hoja.Cell(posicion + 1, 1), hoja.Cell(posicion + 1, 3)).Merge();

            hoja.Cell(posicion, 1).Value = "PRECIOS";
            hoja.Cell(posicion, 1).Style.Font.Bold = true;

            hoja.Cell(posicion, 4).Value = "SubSist. Eléctrico";
            hoja.Cell(posicion, 4).Style.Font.Bold = true;

            hoja.Cell(posicion, 5).Value = "TARIFA";
            hoja.Cell(posicion, 5).Style.Font.Bold = true;

            for (int i = 1; i <= 6; i++)
            {
                hoja.Cell(posicion, (5 + i)).Value = "P" + i;
                hoja.Cell(posicion, (5 + i)).Style.Font.Bold = true;
                hoja.Cell(posicion + 1, (5 + i)).Style.NumberFormat.Format = "0.00";
            }

            for (int i = 1; i <= 11; i++)
            {
                hoja.Cell(posicion, i).Style.Fill.BackgroundColor = ClosedXML.Excel.XLColor.FromArgb(166, 166, 166);
                pintaBordes(posicion, i, libro, "AnexoII");
                pintaBordes(posicion + 1, i, libro, "AnexoII");
                hoja.Cell(posicion + 1, i).Style.Font.Bold = true;
            }
            hoja.Cell(posicion + 1, 1).Style.Font.FontColor = ClosedXML.Excel.XLColor.White;
            hoja.Cell(posicion + 1, 1).Style.Fill.BackgroundColor = ClosedXML.Excel.XLColor.FromArgb(192, 0, 0);
            hoja.Cell(posicion + 1, 1).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
        }

        private void manejaCierres(EntityCollection lCierres, ref int pos, XLWorkbook libro, IOrganizationService servicioConsultas)
        {
            for (int i = 0; i < lCierres.Entities.Count; i++)
            {
                if (i == 0)
                {
                    CargaTablaCotizados(libro, servicioConsultas, lCierres[i], pos);
                }
                else
                {
                    pos = pos + 7;
                    writelog(rutaDestino + "log_Plugin.txt", "CrearPlantillaCotizados en posicion: " + pos + " \r\n");
                    CrearPlantillaCotizados(libro, pos);
                    CargaTablaCotizados(libro, servicioConsultas, lCierres[i], pos + 1);
                    pos = pos + 1;
                }
            }

            pos = pos + 10;
            Boolean hayUno = false;
            for (int i = 0; i < lCierres.Entities.Count; i++)
            {
                if (i == 0)
                {
                    if (lCierres.Entities[i].Attributes.Contains("atos_coeficientedeapuntamiento"))
                    {
                        CargaTablaCoefApunt(libro, servicioConsultas, lCierres.Entities[i], ref pos);
                        writelog(rutaDestino + "log_Plugin.txt", "CargaTablaCoefApunt devuelve la posicion: " + pos + " \r\n");
                        pos++;
                        hayUno = true;
                    }
                }
                else
                {
                    if (lCierres.Entities[i].Attributes.Contains("atos_coeficientedeapuntamiento"))
                    {
                        if (hayUno)
                        {
                            writelog(rutaDestino + "log_Plugin.txt", "CrearPlantillaCoefApunt en posicion: " + pos + " \r\n");
                            if (i > 1)
                                pos = pos + 1;
                            CrearPlantillaCoefApunt(libro, pos);
                            pos = pos + 1;
                            CargaTablaCoefApunt(libro, servicioConsultas, lCierres.Entities[i], ref pos);
                        }
                        else
                        {
                            CargaTablaCoefApunt(libro, servicioConsultas, lCierres.Entities[i], ref pos);
                            writelog(rutaDestino + "log_Plugin.txt", "CargaTablaCoefApunt devuelve la posicion: " + pos + " \r\n");
                            pos++;
                            hayUno = true;
                        }
                    }
                }
            }
        }

        private void cambiaTitulo(String tipo, ClosedXML.Excel.XLWorkbook libro, int posicion)
        {
            var hoja = libro.Worksheet("AnexoIII");
            if (tipo.Equals("CNMC"))
                hoja.Cell(posicion, 1).Value = "POSIBILIDAD DE CIERRE DE LOS SERVICIOS COMPLEMENTARIOS CNMC";
            else if (tipo.Equals("REE"))
                hoja.Cell(posicion, 1).Value = "POSIBILIDAD DE CIERRE DE LOS SERVICIOS COMPLEMENTARIOS REE";
        }

        private void PlantillaTitulo(ref int pos, ClosedXML.Excel.XLWorkbook libro, String tipo)
        {
            var hoja = libro.Worksheet("AnexoIII");
            for (int i = 1; i < 12; i++)
            {
                hoja.Cell(pos, i).Style.Border.BottomBorder = XLBorderStyleValues.Thin;
                hoja.Cell(pos, i).Style.Border.BottomBorderColor = XLColor.Black;
            }
            hoja.Cell(pos, 1).Style.Font.Bold = true;
            hoja.Cell(pos, 1).Style.Font.FontColor = XLColor.FromArgb(89, 89, 89);
            hoja.Cell(pos, 1).Style.Font.FontSize = 10;
            if (tipo.Equals("CNMC"))
                hoja.Cell(pos, 1).Value = "POSIBILIDAD DE CIERRE DE LOS SERVICIOS COMPLEMENTARIOS CNMC";
            else if (tipo.Equals("REE"))
                hoja.Cell(pos, 1).Value = "POSIBILIDAD DE CIERRE DE LOS SERVICIOS COMPLEMENTARIOS REE";
            hoja.Range(hoja.Cell(pos, 1), hoja.Cell(pos, 5)).Merge();
            hoja.Cell(pos, 1).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
            pos = pos + 2;
            for (int i = 1; i < 12; i++)
            {
                hoja.Cell(pos, i).Style.Border.BottomBorder = XLBorderStyleValues.Thin;
                hoja.Cell(pos, i).Style.Border.BottomBorderColor = XLColor.Black;
            }
            hoja.Cell(pos, 1).Style.Font.Bold = true;
            hoja.Cell(pos, 1).Style.Font.FontColor = XLColor.FromArgb(192, 0, 0);
            hoja.Cell(pos, 1).Style.Font.FontSize = 9;
            hoja.Cell(pos, 1).Value = "Productos cotizados";
            hoja.Cell(pos, 1).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
            hoja.Range(hoja.Cell(pos, 1), hoja.Cell(pos, 2)).Merge();
            pos = pos + 1;
        }

        private void tituloCoeficientes(ref int pos, ClosedXML.Excel.XLWorkbook libro)
        {
            var hoja = libro.Worksheet("AnexoIII");
            for (int i = 1; i < 12; i++)
            {
                hoja.Cell(pos, i).Style.Border.BottomBorder = XLBorderStyleValues.Thin;
                hoja.Cell(pos, i).Style.Border.BottomBorderColor = XLColor.Black;
            }
            hoja.Cell(pos, 1).Style.Font.Bold = true;
            hoja.Cell(pos, 1).Style.Font.FontColor = XLColor.FromArgb(192, 0, 0);
            hoja.Cell(pos, 1).Style.Font.FontSize = 9;
            hoja.Cell(pos, 1).Value = "Coeficientes de apuntamiento";
            hoja.Cell(pos, 1).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
            hoja.Range(hoja.Cell(pos, 1), hoja.Cell(pos, 2)).Merge();
            pos = pos + 1;
        }

        private void cargaBloquePorTipoCierre(ref int pos, ClosedXML.Excel.XLWorkbook libro, EntityCollection lCierres, IOrganizationService servicioConsultas, string tipo)
        {
            writelog(rutaDestino + "log_Plugin.txt", "posicionIniTabla: " + pos + " \r\n");
            pos = pos + 1;
            PlantillaTitulo(ref pos, libro, tipo);
            CrearPlantillaCotizados(libro, pos);
            pos = pos + 9;
            tituloCoeficientes(ref pos, libro);
            CrearPlantillaCoefApunt(libro, pos);
            //Nos posicionamos al principio de las tablas generadas para empezar a rellenarlas
            pos = pos - 9;
            writelog(rutaDestino + "log_Plugin.txt", "posicionIniTabla: " + pos + " \r\n");
            manejaCierres(lCierres, ref pos, libro, servicioConsultas);
        }

        private void eliminaTablaProductos(ref int posicionIniTabla, XLWorkbook libro)
        {
            var hoja = libro.Worksheet("AnexoIII");
            int pos = posicionIniTabla - 2;
            writelog(rutaDestino + "log_Plugin.txt", "posicion desde donde borro: " + posicionIniTabla + " \r\n");
            for (int i = pos + 5; i >= pos; i--)
            {
                hoja.Row(i).Delete();
            }
            posicionIniTabla = posicionIniTabla - 3;
        }

        private void TablasAnexoIIIPorOferta(EntityCollection listadoCierresSSCC, EntityCollection lCierresOMIP, EntityCollection lCierresCNMC, EntityCollection lCierresREE,
            IOrganizationService servicioConsultas, ref int posicionIniTabla, XLWorkbook libro)
        {
            //Listamos los cierres por tipo   
            CierresPorTipo(listadoCierresSSCC, ref lCierresOMIP, ref lCierresCNMC, ref lCierresREE);
            writelog(rutaDestino + "log_Plugin.txt", "lCierresOMIP: " + lCierresOMIP.Entities.Count + " \r\n");
            writelog(rutaDestino + "log_Plugin.txt", "lCierresCNMC: " + lCierresCNMC.Entities.Count + " \r\n");
            writelog(rutaDestino + "log_Plugin.txt", "lCierresREE: " + lCierresREE.Entities.Count + " \r\n");
            //Maneja cierres
            if (lCierresOMIP.Entities.Count > 0)
            {
                manejaCierres(lCierresOMIP, ref posicionIniTabla, libro, servicioConsultas);
                int contCoef = 0;
                int i = 0;
                while (i < lCierresOMIP.Entities.Count && contCoef == 0)
                {
                    if (lCierresOMIP.Entities[i].Attributes.Contains("atos_coeficientedeapuntamiento"))
                        contCoef++;
                    i++;
                }
                if (contCoef == 0)
                    eliminaTablaProductos(ref posicionIniTabla, libro);
                //posicionIniTabla = posicionIniTabla + 3;
                if (lCierresCNMC.Entities.Count > 0)
                {
                    //Desplazamos filas y Ponemos nuevo título
                    cargaBloquePorTipoCierre(ref posicionIniTabla, libro, lCierresCNMC, servicioConsultas, "CNMC");
                }

                if (lCierresREE.Entities.Count > 0)
                {
                    //Desplazamos filas y Ponemos nuevo título
                    cargaBloquePorTipoCierre(ref posicionIniTabla, libro, lCierresREE, servicioConsultas, "REE");
                }
            }
            else
            {
                if (lCierresCNMC.Entities.Count > 0)
                {
                    cambiaTitulo("CNMC", libro, 3);
                    manejaCierres(lCierresCNMC, ref posicionIniTabla, libro, servicioConsultas);
                    //posicionIniTabla = posicionIniTabla + 3;
                    int contCoef = 0;
                    int i = 0;
                    while (i < lCierresCNMC.Entities.Count && contCoef == 0)
                    {
                        if (lCierresCNMC.Entities[i].Attributes.Contains("atos_coeficientedeapuntamiento"))
                            contCoef++;
                        i++;
                    }
                    if (contCoef == 0)
                        eliminaTablaProductos(ref posicionIniTabla, libro);
                    if (lCierresREE.Entities.Count > 0)
                    {
                        //Desplazamos filas y Ponemos nuevo título
                        cargaBloquePorTipoCierre(ref posicionIniTabla, libro, lCierresREE, servicioConsultas, "REE");
                    }
                }
                else if (lCierresREE.Entities.Count > 0)
                {
                    cambiaTitulo("REE", libro, 3);
                    manejaCierres(lCierresREE, ref posicionIniTabla, libro, servicioConsultas);
                    //posicionIniTabla = posicionIniTabla + 3;
                    int contCoef = 0;
                    int i = 0;
                    while (i < lCierresREE.Entities.Count && contCoef == 0)
                    {
                        if (lCierresREE.Entities[i].Attributes.Contains("atos_coeficientedeapuntamiento"))
                            contCoef++;
                        i++;
                    }
                    if (contCoef == 0)
                        eliminaTablaProductos(ref posicionIniTabla, libro);
                }
            }
            //Establezco el área de impresión
            libro.Worksheet("AnexoIII").PageSetup.PrintAreas.Add(1, 1, posicionIniTabla, 10);
        }

        private void GenerarAnexoIII(ClosedXML.Excel.XLWorkbook libro, IOrganizationService servicioConsultas, Entity oferta)
        {
            EntityCollection listadoCierresSSCC = new EntityCollection();
            EntityCollection lCierresOMIP = new EntityCollection();
            EntityCollection lCierresCNMC = new EntityCollection();
            EntityCollection lCierresREE = new EntityCollection();

            var posicionIniTabla = 7 + FILASENCABEZADO;
            if (((OptionSetValue)oferta.Attributes["atos_tipooferta"]).Value != 300000000) //Si es simple o suboferta
            {
                //Recogemos el listado de cierres de la oferta
                listadoCierresSSCC = CierresSSCC(servicioConsultas, oferta);
                writelog(rutaDestino + "log_Plugin.txt", "IMP Número de Cierres SSCC" + listadoCierresSSCC.Entities.Count + "\r\n");
                if (listadoCierresSSCC.Entities.Count == 0)
                    libro.Worksheet("AnexoIII").Delete();
                else
                    TablasAnexoIIIPorOferta(listadoCierresSSCC, lCierresOMIP, lCierresCNMC, lCierresREE, servicioConsultas, ref posicionIniTabla, libro);
            }
            else
            {
                writelog(rutaDestino + "log_Plugin.txt", "Multipunto \r\n");
                //Recogemos el listado de subofertas
                EntityCollection lSubOfertas = BuscarSubOfertas(oferta, servicioConsultas);
                foreach (Entity subOferta in lSubOfertas.Entities)
                {
                    //Para cada subOferta, buscamos su listado de cierres
                    EntityCollection lCierresSubOferta = CierresSSCC(servicioConsultas, subOferta);
                    writelog(rutaDestino + "log_Plugin.txt", "IMP Número de Cierres MP SSCC" + listadoCierresSSCC.Entities.Count + "\r\n");
                    foreach (Entity cierre in lCierresSubOferta.Entities)
                    {
                        //Cada cierre encontrado lo guardamos en el listado de cierres
                        listadoCierresSSCC.Entities.Add(cierre);
                    }
                }

                writelog(rutaDestino + "log_Plugin.txt", "lSubOfertas: " + lSubOfertas .Entities.Count+ " \r\n");
                if (listadoCierresSSCC.Entities.Count == 0)
                    libro.Worksheet("AnexoIII").Delete();
                else
                    TablasAnexoIIIPorOferta(listadoCierresSSCC, lCierresOMIP, lCierresCNMC, lCierresREE, servicioConsultas, ref posicionIniTabla, libro);
            }
            
        }

        private void CargaTablaCotizados(ClosedXML.Excel.XLWorkbook libro, IOrganizationService servicioConsultas, Entity cierre, int posicion)
        {
            writelog(rutaDestino + "log_Plugin.txt", "CargaTablaCotizados posicion: " + posicion + "\r\n");
            var hoja = libro.Worksheet("AnexoIII");
            if (cierre.Attributes.Contains("atos_name"))
                hoja.Cell(posicion, 1).Value = "Cierre: " + cierre.Attributes["atos_name"];
            if (cierre.Attributes.Contains("atos_periododecierre"))
                hoja.Cell(posicion + 1, 3).Value = cierre.FormattedValues["atos_periododecierre"];
            if (cierre.Attributes.Contains("atos_numerocierrespermitido"))
                hoja.Cell(posicion + 2, 3).Value = cierre.Attributes["atos_numerocierrespermitido"];
            if (cierre.Attributes.Contains("atos_coeficientedeapuntamiento"))
            {
                Entity termino = TerminoDePricing(servicioConsultas, cierre);
                hoja.Cell(posicion + 3, 3).Value = termino.Attributes["atos_denominacionbreve"];
            }
            if (cierre.Attributes.Contains("atos_porcentajecierre"))
                hoja.Cell(posicion + 4, 3).Value = cierre.Attributes["atos_porcentajecierre"];
            if (cierre.Attributes.Contains("atos_energiacierre"))
                hoja.Cell(posicion + 5, 3).Value = cierre.Attributes["atos_energiacierre"];
            if (cierre.Attributes.Contains("atos_costegestioncierre"))
                hoja.Cell(posicion + 6, 3).Value = cierre.Attributes["atos_costegestioncierre"];
        }

        private void CrearPlantillaCotizados(XLWorkbook libro, int posicion)
        {
            var hoja = libro.Worksheet("AnexoIII");
            //Espacio en blanco entre tablas
            hoja.Row(posicion).InsertRowsBelow(1);
            posicion = posicion + 1;
            hoja.Row(posicion).Height = 15;
            writelog(rutaDestino + "log_Plugin.txt", "Empiezo a pintar la tabla en la posición: " + posicion + " \r\n");
            for (int i = 0; i <= 6; i++)
            {
                hoja.Row(posicion + i).InsertRowsBelow(1);
                hoja.Row(posicion + i).Height = 15;
            }
            for (int i = 0; i < 7; i++)
            {
                hoja.Range(hoja.Cell(posicion + i, 1), hoja.Cell(posicion + i, 2)).Merge();
                hoja.Range(hoja.Cell(posicion + i, 3), hoja.Cell(posicion + i, 8)).Merge();
                hoja.Cell(posicion + i, 3).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                hoja.Cell(posicion + i, 1).Style.Font.Bold = true;
                for (int j = 1; j < 9; j++)
                {
                    pintaBordes(posicion + i, j, libro, "AnexoIII");
                    hoja.Cell(posicion + i, j).Style.Font.Bold = true;
                }
                if (i > 0)
                {
                    hoja.Cell(posicion + i, 1).Style.Fill.BackgroundColor = ClosedXML.Excel.XLColor.FromArgb(217, 217, 217);
                    for (int j = 1; j < 9; j++)
                    {
                        hoja.Cell(posicion + i, j).Style.Font.SetFontSize(8);
                        hoja.Cell(posicion + i, j).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                    }
                }
                else for (int j = 1; j < 9; j++)
                    {
                        hoja.Cell(posicion + i, j).Style.Font.SetFontSize(9);
                        if (j > 2)
                            hoja.Cell(posicion + i, j).Style.Font.FontColor = ClosedXML.Excel.XLColor.FromArgb(182, 0, 0);
                    }

            }

            hoja.Cell(posicion, 1).Style.Fill.BackgroundColor = ClosedXML.Excel.XLColor.FromArgb(166, 166, 166);
            hoja.Cell(posicion, 1).Style.Font.SetFontSize(9);
            hoja.Cell(posicion, 1).Value = "Cierre: ";
            hoja.Cell(posicion + 1, 1).Value = "Periodo de cierre:";
            hoja.Cell(posicion + 2, 1).Value = "Número de cierres permitidos:";
            hoja.Cell(posicion + 3, 1).Value = "Coeficiente de apuntamiento:";
            hoja.Cell(posicion + 4, 1).Value = "Cierre:";
            hoja.Cell(posicion + 5, 1).Value = "Cierre por MWh:";
            hoja.Cell(posicion + 6, 1).Value = "Coste gestión cierre(€/KWh):";
        }

        private void CargaTablaCoefApunt(ClosedXML.Excel.XLWorkbook libro, IOrganizationService servicioConsultas, Entity cierre, ref int posicion)
        {
            writelog(rutaDestino + "log_Plugin.txt", "CargaTablaCoefApunt posicion: " + posicion + "\r\n");
            var hoja = libro.Worksheet("AnexoIII");
            if (cierre.Attributes.Contains("atos_coeficientedeapuntamiento"))
            {
                Entity termino = TerminoDePricing(servicioConsultas, cierre);
                hoja.Cell(posicion, 4).Value = termino.Attributes["atos_denominacionbreve"];
            }
            EntityCollection listaPricingInput = ListadoPricinInput(servicioConsultas, cierre);
            writelog(rutaDestino + "log_Plugin.txt", "listaPricingInput.Entities.Count: " + listaPricingInput.Entities.Count + "\r\n");
            posicion = posicion + 1;
            for (int i = 0; i < listaPricingInput.Entities.Count; i++)
            {
                posicion = posicion + 1;
                if (i > 0)
                {
                    hoja.Row(posicion - 1).InsertRowsBelow(1);
                    hoja.Row(posicion - 1).Height = 15;
                    hoja.Row(posicion).Height = 15;
                    hoja.Range(hoja.Cell(posicion, 2), hoja.Cell(posicion, 3)).Merge();
                }
                if (cierre.Attributes.Contains("ofertaCierre.atos_lote"))
                    hoja.Cell(posicion, 1).Value = ((AliasedValue)cierre.Attributes["ofertaCierre.atos_lote"]).Value;
                if (listaPricingInput.Entities[i].Contains("atos_fechainicioaplicacion") && listaPricingInput.Entities[i].Contains("atos_fechafinaplicacion"))
                    hoja.Cell(posicion, 2).Value = Convert.ToDateTime(listaPricingInput.Entities[i].Attributes["atos_fechainicioaplicacion"]).ToLocalTime().ToString("dd/MM/yyyy") + "-"
                        + Convert.ToDateTime(listaPricingInput.Entities[i].Attributes["atos_fechafinaplicacion"]).ToLocalTime().ToString("dd/MM/yyyy");

                writelog(rutaDestino + "log_Plugin.txt", "MMJ: " + ((EntityReference)(listaPricingInput.Entities[i].Attributes["atos_ofertaid"])).Id.ToString() + "\r\n");
                Entity sistElectrico = null;

                if (listaPricingInput.Entities[i].Contains("atos_subsistemaid"))
                {
                    sistElectrico = SubSistemaElectrico(servicioConsultas, ((EntityReference)(listaPricingInput.Entities[i].Attributes["atos_ofertaid"])).Id.ToString());
                }
                    
                if (sistElectrico != null && sistElectrico.Attributes.Contains("atos_name"))
                {
                    hoja.Cell(posicion, 4).Value = sistElectrico.Attributes["atos_name"];
                    writelog(rutaDestino + "log_Plugin.txt", "SIST ELECTRICO: " + sistElectrico.Attributes["atos_name"] + "\r\n");
                }

                Entity myOferta = getOferta(servicioConsultas, ((EntityReference)(listaPricingInput.Entities[i].Attributes["atos_ofertaid"])).Id.ToString());
                Entity tarifa = GetTarifa(servicioConsultas, myOferta);
                if (tarifa.Attributes.Contains("atos_name"))
                {
                    hoja.Cell(posicion, 5).Value = tarifa.Attributes["atos_name"].ToString();
                    hoja.Cell(posicion, 5).DataType = XLCellValues.Text;
                    writelog(rutaDestino + "log_Plugin.txt", "TARIFA: " + tarifa.Attributes["atos_name"].ToString() + "\r\n");
                }

                if (listaPricingInput.Entities[i].Attributes.Contains("atos_pfijo"))
                {
                    //Precio fijo. Rellenamos el mismo precio en tantos períodos como indique la tarifa
                    int numPeriodos = 6;
                    if (tarifa.Attributes.Contains("atos_numeroperiodos"))
                        numPeriodos = System.Convert.ToInt32(tarifa.Attributes["atos_numeroperiodos"]);
                    for (int k = 1; k <= numPeriodos; k++)
                    {
                        hoja.Cell(posicion, (5 + k)).Value = listaPricingInput.Entities[i].Attributes["atos_pfijo"];
                    }
                }
                else
                {
                    for (int k = 1; k <= 6; k++)
                    {
                        if (listaPricingInput.Entities[i].Attributes.Contains("atos_p" + k))
                            hoja.Cell(posicion, (5 + k)).Value = listaPricingInput.Entities[i].Attributes["atos_p" + k];
                    }
                }
            }
            posicion = posicion + listaPricingInput.Entities.Count;
        }

        private void CrearPlantillaCoefApunt(XLWorkbook libro, int posicion)
        {
            var hoja = libro.Worksheet("AnexoIII");
            //Espacio en blanco entre tablas
            posicion = posicion + 1;

            hoja.Range(hoja.Cell(posicion, 1), hoja.Cell(posicion, 3)).Merge();
            hoja.Cell(posicion, 1).Style.Fill.BackgroundColor = ClosedXML.Excel.XLColor.FromArgb(166, 166, 166);
            hoja.Range(hoja.Cell(posicion, 4), hoja.Cell(posicion, 11)).Merge();
            for (int i = 0; i < 3; i++)
            {
                for (int j = 1; j <= 11; j++)
                {
                    pintaBordes(posicion + i, j, libro, "AnexoIII");
                    hoja.Cell(posicion + i, j).Style.Font.Bold = true;
                    hoja.Cell(posicion + i, j).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;

                    if (i == 0)
                    {
                        hoja.Cell(posicion + i, 1).Style.Font.SetFontSize(9);
                        hoja.Cell(posicion + i, j).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                        if (j <= 3)
                            hoja.Cell(posicion + i, j).Style.Fill.BackgroundColor = ClosedXML.Excel.XLColor.FromArgb(166, 166, 166);
                        else
                        {
                            hoja.Cell(posicion + i, j).Style.Fill.BackgroundColor = ClosedXML.Excel.XLColor.White;
                            hoja.Cell(posicion + i, j).Style.Font.SetFontSize(8);
                            hoja.Cell(posicion + i, j).Style.Font.FontColor = ClosedXML.Excel.XLColor.FromArgb(182, 0, 0);
                        }
                    }
                    else
                    {
                        if (i == 1)
                        {
                            hoja.Cell(posicion + i, j).Style.Font.SetFontSize(8);
                            hoja.Cell(posicion + i, j).Style.Font.Bold = true;
                            hoja.Cell(posicion + i, j).Style.Fill.BackgroundColor = ClosedXML.Excel.XLColor.FromArgb(166, 166, 166);
                        }
                        else
                        {
                            hoja.Cell(posicion + i, j).Style.Fill.BackgroundColor = ClosedXML.Excel.XLColor.FromArgb(217, 217, 217);
                            hoja.Cell(posicion + i + 2, j).Style.NumberFormat.Format = "0.000";
                        }
                    }

                }
            }
            hoja.Cell(posicion, 1).Value = "Producto: ";
            hoja.Cell(posicion + 1, 1).Value = "Lote";
            hoja.Range(hoja.Cell(posicion + 1, 2), hoja.Cell(posicion + 1, 3)).Merge();
            hoja.Range(hoja.Cell(posicion + 2, 2), hoja.Cell(posicion + 2, 3)).Merge();
            hoja.Cell(posicion + 1, 2).Value = "Periodos cierre";
            hoja.Cell(posicion + 1, 4).Value = "SubSist.Electrico";
            hoja.Cell(posicion + 1, 5).Value = "Tarifa";
            for (int i = 0; i < 6; i++)
                hoja.Cell(posicion + 1, 6 + i).Value = "P" + (i + 1);

        }

        private void pintaBordes(int fila, int col, XLWorkbook libro, String sHoja)
        {
            var hoja = libro.Worksheet(sHoja);
            hoja.Cell(fila, col).Style.Border.BottomBorder = ClosedXML.Excel.XLBorderStyleValues.Medium;
            hoja.Cell(fila, col).Style.Border.LeftBorder = ClosedXML.Excel.XLBorderStyleValues.Medium;
            hoja.Cell(fila, col).Style.Border.RightBorder = ClosedXML.Excel.XLBorderStyleValues.Medium;
            hoja.Cell(fila, col).Style.Border.TopBorder = ClosedXML.Excel.XLBorderStyleValues.Medium;
            hoja.Cell(fila, col).Style.Border.BottomBorderColor = ClosedXML.Excel.XLColor.FromArgb(128, 128, 128);
            hoja.Cell(fila, col).Style.Border.LeftBorderColor = ClosedXML.Excel.XLColor.FromArgb(128, 128, 128);
            hoja.Cell(fila, col).Style.Border.RightBorderColor = ClosedXML.Excel.XLColor.FromArgb(128, 128, 128);
            hoja.Cell(fila, col).Style.Border.TopBorderColor = ClosedXML.Excel.XLColor.FromArgb(128, 128, 128);
        }

        private void GenerarCierres(Entity eOferta, IOrganizationService _servicioConsultas, ClosedXML.Excel.XLWorkbook libro, String mailAgente)
        {
            EntityCollection listadoCierresSSCC = new EntityCollection();
            if (((OptionSetValue)eOferta.Attributes["atos_tipooferta"]).Value == 300000000) //Multipunto                
            {
                //Recogemos el listado de subofertas
                EntityCollection lSubOfertas = BuscarSubOfertas(eOferta, _servicioConsultas);
                foreach (Entity subOferta in lSubOfertas.Entities)
                {
                    //Para cada subOferta, buscamos su listado de cierres
                    EntityCollection lCierresSubOferta = CierresSSCC(_servicioConsultas, subOferta);
                    foreach (Entity cierre in lCierresSubOferta.Entities)
                    {
                        //Cada cierre encontrado lo guardamos en el listado de cierres
                        listadoCierresSSCC.Entities.Add(cierre);
                    }
                }
            }
            else
                listadoCierresSSCC = CierresSSCC(_servicioConsultas, eOferta);

            writelog(rutaDestino + "log_Plugin.txt", "listadoCierresSSCC: " + listadoCierresSSCC.Entities.Count() + "\r\n");
            if (listadoCierresSSCC.Entities.Count > 0)
            {
                String nombreHoja = "";
                EntityCollection lCierresOMIP = new EntityCollection();
                EntityCollection lCierresCNMC = new EntityCollection();
                EntityCollection lCierresREE = new EntityCollection();

                CierresPorTipo(listadoCierresSSCC, ref lCierresOMIP, ref lCierresCNMC, ref lCierresREE);
                //Eliminamos la hoja de cierres del tipo que no exista y creamos hojas si hay más de una de ese tipo
                writelog(rutaDestino + "log_Plugin.txt", "numCierresREE: " + lCierresREE.Entities.Count() + "\r\n");
                if (lCierresREE.Entities.Count() > 1)
                {
                    //Creamos tantas hojas como cierres de este tipo haya (Ojo!! Ya existe una)
                    nombreHoja = "Cierre_SSCC_REE_";
                    CrearHojasCierre(lCierresREE.Entities.Count(), nombreHoja, libro, 6);
                }
                if (lCierresREE.Entities.Count() > 0)
                    RellenarHojasCierres(libro, lCierresREE, mailAgente, _servicioConsultas);
                writelog(rutaDestino + "log_Plugin.txt", "numCierresCNMC: " + lCierresCNMC.Entities.Count() + "\r\n");
                if (lCierresCNMC.Entities.Count() > 1)
                {
                    //Creamos tantas hojas como cierres de este tipo haya (Ojo!! Ya existe una)
                    nombreHoja = "Cierre_SSCC_CNMC_";
                    CrearHojasCierre(lCierresCNMC.Entities.Count(), nombreHoja, libro, 7);
                }
                if (lCierresCNMC.Entities.Count() > 0)
                    RellenarHojasCierres(libro, lCierresCNMC, mailAgente, _servicioConsultas);
                writelog(rutaDestino + "log_Plugin.txt", "numCierresOMIP: " + lCierresOMIP.Entities.Count() + "\r\n");
                if (lCierresOMIP.Entities.Count() > 1)
                {
                    //Creamos tantas hojas como cierres de este tipo haya (Ojo!! Ya existe una)
                    nombreHoja = "Cierre_OMIP_";
                    CrearHojasCierre(lCierresOMIP.Entities.Count(), nombreHoja, libro, 5);
                }
                if (lCierresOMIP.Entities.Count() > 0)
                    RellenarHojasCierres(libro, lCierresOMIP, mailAgente, _servicioConsultas);

                if (lCierresREE.Entities.Count() == 0)
                    libro.Worksheet("Cierre_SSCC_REE").Delete();

                if (lCierresCNMC.Entities.Count() == 0)
                    libro.Worksheet("Cierre_SSCC_CNMC").Delete();

                if (lCierresOMIP.Entities.Count() == 0)
                    libro.Worksheet("Cierre_OMIP").Delete();
            }
            else
            {
                libro.Worksheet("Cierre_SSCC_REE").Delete();
                libro.Worksheet("Cierre_SSCC_CNMC").Delete();
                libro.Worksheet("Cierre_OMIP").Delete();
            }
        }

        private void RellenarHojasCierres(XLWorkbook libro, EntityCollection cierresTipo, String mailAgente, IOrganizationService servicioConsultas)
        {
            for (int i = 0; i < cierresTipo.Entities.Count(); i++)
                Cierres(libro, cierresTipo.Entities[i], mailAgente, i, servicioConsultas);
        }

        private void CrearHojasCierre(int numCierres, String nombreHoja, XLWorkbook libro, int posicion)
        {
            writelog(rutaDestino + "log_Plugin.txt", "CrearHojasCierre: " + nombreHoja + "\r\n");
            for (int i = 0; i < (numCierres - 1); i++)
            {
                var wsSource = libro.Worksheet(posicion);
                // Copy the worksheet to a new sheet in this workbook                
                wsSource.CopyTo(nombreHoja + (i + 2), (i + posicion + 1));
                libro.Worksheet(i + posicion + 1).SetTabColor(XLColor.FromArgb(149, 179, 215));
            }
        }

        private void CierresPorTipo(EntityCollection lCierres, ref EntityCollection lCierresOMIP, ref EntityCollection lCierresCNMC, ref EntityCollection lCierresREE)
        {
            String tipo = "";
            foreach (Entity cierre in lCierres.Entities)
            {
                tipo = ((OptionSetValue)((AliasedValue)cierre.Attributes["pricingOut.atos_tipo"]).Value).Value.ToString();
                if (tipo == "300000003" || tipo == "300000004")
                    lCierresCNMC.Entities.Add(cierre);
                else if (tipo == "300000001" || tipo == "300000002")
                    lCierresREE.Entities.Add(cierre);
                else if (tipo == "300000005" || tipo == "300000006")
                    lCierresOMIP.Entities.Add(cierre);

            }
        }

        private void Cierres(ClosedXML.Excel.XLWorkbook libro, Entity cierre, string mailAgente, int contador, IOrganizationService servicioConsultas)
        {
            writelog(rutaDestino + "log_Plugin.txt", "Cierres \r\n");
            string RRTT = "";
            string costeGestion = "";
            string Ac = "";

            if (cierre.Attributes.Contains("pricingOut.atos_terminoems"))
                RRTT = (((AliasedValue)cierre.Attributes["pricingOut.atos_terminoems"]).Value).ToString();
            if (cierre.Attributes.Contains("atos_costegestioncierre"))
                costeGestion = decimal.Round(System.Convert.ToDecimal(cierre.Attributes["atos_costegestioncierre"].ToString()), 6).ToString();
            if (cierre.Attributes.Contains("atos_coeficientedeapuntamiento"))
            {
                Entity termino = TerminoDePricing(servicioConsultas, cierre);
                Ac = termino.Attributes["atos_denominacionbreve"].ToString();
            }
            writelog(rutaDestino + "log_Plugin.txt", "RRTT:" + RRTT + " \r\n");
            writelog(rutaDestino + "log_Plugin.txt", "costeGestion:" + costeGestion + " \r\n");
            writelog(rutaDestino + "log_Plugin.txt", "Ac:" + Ac + " \r\n");
            String nombreHoja = "Cierre_SSCC_CNMC";
            var hoja = libro.Worksheet(nombreHoja);
            String tipo = ((OptionSetValue)((AliasedValue)cierre.Attributes["pricingOut.atos_tipo"]).Value).Value.ToString();
            writelog(rutaDestino + "log_Plugin.txt", "tipo:" + tipo + " \r\n");
            if (tipo == "300000003" || tipo == "300000004")
            {
                writelog(rutaDestino + "log_Plugin.txt", "CNMC \r\n");
                //CNMC
                if (contador > 0)
                    nombreHoja = nombreHoja + "_" + (contador + 1);
                hoja = libro.Worksheet(nombreHoja);
                hoja.Cell(3 + FILASENCABEZADO, 1).Value = "El CLIENTE tiene la posibilidad de fijar el precio de los siguientes conceptos: " + RRTT +
                    ". La fórmula que calcula el valor de " + RRTT + " por periodo tarifario, es la siguiente:";
                hoja.Cell(6 + FILASENCABEZADO, 1).Value = "La fórmula que calcula el valor de " + RRTT + " por periodo tarifario, es la siguiente:";
                hoja.Cell(7 + FILASENCABEZADO, 2).Value = RRTT + " (€/MWh) = (C * Ac) + CG";
                hoja.Cell(18 + FILASENCABEZADO, 2).Value = "El coste de gestión es de " + costeGestion + " €/MWh.";
                //Mail del comercial
                hoja.Cell(32 + FILASENCABEZADO, 2).Value = mailAgente;
            }
            else if (tipo == "300000001" || tipo == "300000002")
            {
                writelog(rutaDestino + "log_Plugin.txt", "REE \r\n");
                nombreHoja = "Cierre_SSCC_REE";
                if (contador > 0)
                    nombreHoja = nombreHoja + "_" + (contador + 1);
                hoja = libro.Worksheet(nombreHoja);
                hoja.Cell(3 + FILASENCABEZADO, 1).Value = "El CLIENTE tiene la posibilidad de fijar el precio de los siguientes conceptos: " +
                                        RRTT + ". La fórmula que calcula el valor de " +
                                        RRTT + " por periodo tarifario, es la siguiente:";
                hoja.Cell(6 + FILASENCABEZADO, 2).Value = RRTT + " (€/MWh) = (C * Ap) + CG";
                hoja.Cell(8 + FILASENCABEZADO, 3).Value = "Valor de " + RRTT
                    + " que corresponde a la media móvil del precio de los últimos 12 meses publicados, calculado una vez que el CLIENTE le notifique a ACCIONA la intención de cerrar.";
                hoja.Cell(10 + FILASENCABEZADO, 3).Value = "Promedio del coeficiente mensual de apuntamiento Ac (ver Anexo III), por periodo tarifario. Si el cierre se realiza en el mes M, el coeficiente " +
                    Ac + " será el promedio desde el mes M+1 hasta el último mes con posibilidad de cerrar.";
                hoja.Cell(17 + FILASENCABEZADO, 2).Value = "El coste de gestión es de " + costeGestion + " €/MWh.";
                //Mail del comercial
                hoja.Cell(30 + FILASENCABEZADO, 2).Value = mailAgente;
            }
            else if (tipo == "300000005" || tipo == "300000006")
            {
                nombreHoja = "Cierre_OMIP";
                if (contador > 0)
                    nombreHoja = nombreHoja + "_" + (contador + 1);
                hoja = libro.Worksheet(nombreHoja);
                hoja.Cell(3 + FILASENCABEZADO, 1).Value = "El CLIENTE tiene la posibilidad de fijar el precio indexado a OMIE con el precio publicado en OMIP, para parte o todo su consumo real. La fórmula polinómica que calcula el valor de " +
                RRTT + " para cada periodo tarifario, es la siguiente:";
                hoja.Cell(6 + FILASENCABEZADO, 2).Value = RRTT + " (€/MWh) = (OMIP * Ap) + CG";
                hoja.Cell(18 + FILASENCABEZADO, 2).Value = "El coste de gestión es de " + costeGestion + " €/MWh.";
                //Mail del comercial
                hoja.Cell(33 + FILASENCABEZADO, 2).Value = mailAgente;
            }
        }

        private void GenerarHoja2Oferta(ClosedXML.Excel.XLWorkbook libro, Entity eOferta)
        {
            if (eOferta.Attributes["atos_gestionatr"].Equals(true))
                libro.Worksheet("2." + SINATR).Delete();
            else
                libro.Worksheet("2." + CONATR).Delete();
        }

        private String ObtenerMailAgenteComercial(Entity eOferta, IOrganizationService _servicioConsultas)
        {
            Entity agenteComercial = new Entity();
            if (eOferta.Attributes.Contains("atos_agentecomercialid"))
                agenteComercial = CamposAgenteComercial(_servicioConsultas, eOferta);
            String mailAgente = "";
            if (agenteComercial.Attributes.Contains("emailaddress"))
                mailAgente = agenteComercial.Attributes["emailaddress"].ToString();
            return mailAgente;
        }

        private void GenerarCierreCoberturas(Entity eOferta, String mailAgente, ClosedXML.Excel.XLWorkbook libro)
        {
            if (eOferta.Attributes.Contains("atos_posibilidadrealizarcoberturas"))
            {
                if (eOferta.Attributes["atos_posibilidadrealizarcoberturas"].Equals(true))
                {
                    var hoja = libro.Worksheet("Cierre_coberturas");
                    string costeCobertura = "";
                    if (eOferta.Attributes.Contains("atos_costegestioncobertura"))
                    {
                        costeCobertura = decimal.Round(((Money)eOferta.Attributes["atos_costegestioncobertura"]).Value, 2).ToString();
                        hoja.Cell(23 + FILASENCABEZADO, 1).Value = "Coste de cobertura: " +
                            costeCobertura +
                            " €/MWh. Dicho coste incluye los fees de OMIP, OMICLEAR y los costes financieros de garantías y liquidación.";
                        hoja.Cell(25 + FILASENCABEZADO, 2).Value = "Coste Cobertura  = " + costeCobertura +
                                " (€/MWh) * CCEi (MW) * h";
                    }
                    hoja.Cell(40 + FILASENCABEZADO, 2).Value = mailAgente;
                }
                else
                    libro.Worksheet("Cierre_coberturas").Delete();
            }
            else
                libro.Worksheet("Cierre_coberturas").Delete();
        }

        private void BuscarHijosOferta(Entity oferta, IOrganizationService servicioConsultas, ref EntityCollection ecInstalacionesMulti, ref EntityCollection ecPricingMulti, ref EntityCollection ecOfertasFechas)
        {
            writelog(rutaDestino + "log_Plugin.txt", "BuscarHijos " + oferta.Attributes["atos_name"].ToString() + "\r\n");
            EntityCollection ecHijos = ConsultaHijos(servicioConsultas, oferta);
            writelog(rutaDestino + "log_Plugin.txt", "Esta entidad tiene " + ecHijos.Entities.Count + " hijos" + "\r\n");

            if (ecHijos.Entities.Count > 0)
            {
                foreach (Entity myEntity in ecHijos.Entities)
                {
                    if (((OptionSetValue)myEntity.Attributes["atos_tipooferta"]).Value == 300000002)  //Simple
                    {
                        //Recogemos su instalación y la guardamos en una lista
                        writelog(rutaDestino + "log_Plugin.txt", "Comprobamos is tiene instalación informada" + myEntity.Attributes["atos_name"].ToString() + "\r\n");
                        if (myEntity.Attributes.Contains("atos_instalacionid"))
                        {
                            writelog(rutaDestino + "log_Plugin.txt", "Nos guardamos los datos de la instalacion" + myEntity.Attributes["atos_name"].ToString() + "\r\n");
                            ecInstalacionesMulti.Entities.Add(CamposInstalacion(servicioConsultas, myEntity)[0]);
                            EntityCollection pricingOutput = CamposPricingOutput(servicioConsultas, myEntity);
                            if (pricingOutput.Entities.Count > 0)
                                ecPricingMulti.Entities.Add(pricingOutput[0]);
                            ecOfertasFechas.Entities.Add(myEntity);
                        }
                    }
                    else
                    {
                        writelog(rutaDestino + "log_Plugin.txt", "Seguimos en múltiple" + "\r\n");
                        BuscarHijosOferta(myEntity, servicioConsultas, ref ecInstalacionesMulti, ref ecPricingMulti, ref ecOfertasFechas);
                    }
                }
            }
            else
            {
                if (((OptionSetValue)oferta.Attributes["atos_tipooferta"]).Value == 300000002)  //Oferta simple
                {
                    //Recogemos su instalación y la guardamos en una lista
                    writelog(rutaDestino + "log_Plugin.txt", "Nos guardamos los datos de la instalacion \r\n");
                    ecInstalacionesMulti.Entities.Add(CamposInstalacion(servicioConsultas, oferta)[0]);
                    EntityCollection pricingOutput = CamposPricingOutput(servicioConsultas, oferta);
                    if (pricingOutput.Entities.Count > 0)
                        ecPricingMulti.Entities.Add(pricingOutput[0]);
                }
            }
        }

        private void GenerarHoja1Oferta(ClosedXML.Excel.XLWorkbook libro, IOrganizationService servicioConsultas, Entity oferta, System.DateTime fecha)
        {
            writelog(rutaDestino + "log_Plugin.txt", "GenerarHoja1 \r\n");
            String sociedad = "";
            Entity rsocial = new Entity();
            Entity contacto = new Entity();
            Entity cn = new Entity();
            if (oferta.Attributes.Contains("atos_razonsocialid"))
            {
                rsocial = CamposRazonSocial(servicioConsultas, oferta);
                sociedad = rsocial.Attributes["name"].ToString();
                if (rsocial.Attributes.Contains("atos_contactocomercialid"))
                    contacto = CamposContactoComercial(servicioConsultas, rsocial);
            }
            else if (oferta.Attributes.Contains("atos_cuentanegociadoraid"))
            {
                cn = CamposCN(servicioConsultas, oferta);
                if (cn.Attributes.Contains("atos_contactocomercialid"))
                {
                    contacto = CamposContactoComercial(servicioConsultas, cn);
                }
            }

            var hoja = libro.Worksheet("1.Cabecera");
            Entity productoFinal = new Entity();
            if (oferta.Attributes.Contains("atos_tipodeproductofinalid"))
                productoFinal = ConsultaProductoFinal(servicioConsultas, oferta);
            writelog(rutaDestino + "log_Plugin.txt", "productoFinal \r\n");
            /*if (productoFinal != null)
            {
                if (productoFinal.Attributes.Contains("atos_descripcion"))
                    hoja.Cell(3, 1).Value = productoFinal.Attributes["atos_descripcion"];
                else
                    hoja.Cell(3, 1).Value = "";
            }*/
            //if (((OptionSetValue)oferta.Attributes["atos_tipooferta"]).Value == 300000000) //Multipunto
            if (((OptionSetValue)oferta.Attributes["atos_tipooferta"]).Value != 300000002) //Multipunto
            {
                if (cn.Attributes.Contains("atos_name"))
                    sociedad = cn.Attributes["atos_name"].ToString();
                hoja.Cell(16 + FILASENCABEZADO, 2).Value = "Ver Anexo I";
            }
            else
            {
                if (((OptionSetValue)oferta.Attributes["atos_tipooferta"]).Value == 300000002)  //Oferta simple 
                {
                    //Recogemos el CUPS de la instalacion
                    if (oferta.Attributes.Contains("atos_instalacionid"))
                    {
                        Entity instalacion = CamposInstalacion(servicioConsultas, oferta)[0];
                        if (instalacion != null)
                        {
                            if (instalacion.Attributes.Contains("atos_cups20"))
                                hoja.Cell(16 + FILASENCABEZADO, 2).Value = instalacion.Attributes["atos_cups20"].ToString();
                            else
                                hoja.Cell(16 + FILASENCABEZADO, 2).Value = "";
                        }
                    }
                    else
                        hoja.Cell(16 + FILASENCABEZADO, 2).Value = "";
                }
                else
                    hoja.Cell(16 + FILASENCABEZADO, 2).Value = "Ver Anexo I";

            }

            hoja.Cell(1 + FILASENCABEZADO, 1).Value = "PROPUESTA INDICATIVA DE SUMINISTRO DE ELECTRICIDAD A " + sociedad;
            hoja.Column(3).Width = 11;
            hoja.Cell(12 + FILASENCABEZADO, 4).Value = sociedad;
            hoja.Cell(9 + FILASENCABEZADO, 3).Value = new DateTime(fecha.Year, fecha.Month, fecha.Day);

            Entity agenteComercial = new Entity();
            if (oferta.Attributes.Contains("atos_agentecomercialid"))
                agenteComercial = CamposAgenteComercial(servicioConsultas, oferta);
            if (agenteComercial.Attributes.Contains("atos_name"))
                hoja.Cell(9 + FILASENCABEZADO, 8).Value = agenteComercial.Attributes["atos_name"].ToString();
            else
                hoja.Cell(9 + FILASENCABEZADO, 8).Value = "";
            if (agenteComercial.Attributes.Contains("emailaddress"))
                hoja.Cell(10 + FILASENCABEZADO, 2).Value = agenteComercial.Attributes["emailaddress"].ToString();
            else
                hoja.Cell(10 + FILASENCABEZADO, 2).Value = "";
            if (agenteComercial.Attributes.Contains("atos_telefono"))
                hoja.Cell(10 + FILASENCABEZADO, 8).Value = agenteComercial.Attributes["atos_telefono"].ToString();
            else
                hoja.Cell(10 + FILASENCABEZADO, 8).Value = "";

            if (rsocial.Attributes.Contains("atos_numerodedocumento"))
                hoja.Cell(13 + FILASENCABEZADO, 2).Value = rsocial.Attributes["atos_numerodedocumento"].ToString();
            else
                hoja.Cell(13 + FILASENCABEZADO, 2).Value = "";

            string nombre = "";

            if (contacto.Attributes.Contains("firstname"))
                nombre = contacto.Attributes["firstname"].ToString() + " ";
            if (contacto.Attributes.Contains("lastname"))
                nombre = nombre + contacto.Attributes["lastname"].ToString();
            hoja.Cell(13 + FILASENCABEZADO, 8).Value = nombre;
            if (contacto.Attributes.Contains("emailaddress1"))
                hoja.Cell(14 + FILASENCABEZADO, 2).Value = contacto.Attributes["emailaddress1"].ToString();
            else
                hoja.Cell(14 + FILASENCABEZADO, 2).Value = "";
            if (contacto.Attributes.Contains("telephone1"))
                hoja.Cell(14 + FILASENCABEZADO, 8).Value = contacto.Attributes["telephone1"].ToString();
            else
                hoja.Cell(14 + FILASENCABEZADO, 8).Value = "";
            if (oferta.Attributes.Contains("atos_fechainicio"))
                hoja.Cell(17 + FILASENCABEZADO, 3).Value = Convert.ToDateTime(oferta.Attributes["atos_fechainicio"]).ToLocalTime();
            else
                hoja.Cell(17 + FILASENCABEZADO, 3).Value = "";
            if (oferta.Attributes.Contains("atos_fechafin"))
                hoja.Cell(17 + FILASENCABEZADO, 8).Value = Convert.ToDateTime(oferta.Attributes["atos_fechafin"]).ToLocalTime();
            else
                hoja.Cell(17 + FILASENCABEZADO, 3).Value = "";
            hoja.Column(5).Width = 15;
            hoja.Column(7).Width = 15;

            hoja.PageSetup.AddHorizontalPageBreak(hoja.RowCount());
        }

        private Entity BuscarSubofertaMismoProducto(Entity oferta, Entity productoFinal, IOrganizationService servicioConsultas)
        {
            Entity subOferta = new Entity();
            EntityCollection ecOfertasHijas = ConsultaHijos(servicioConsultas, oferta);
            writelog(rutaDestino + "log_Plugin.txt", "Esta oferta multipunto tiene " + ecOfertasHijas.Entities.Count + " ofertas hijas" + "\r\n");
            if (ecOfertasHijas.Entities.Count > 0)
            {
                bool encontrado = false;
                int i = 0;
                while (i < ecOfertasHijas.Entities.Count() && !encontrado)
                {
                    writelog(rutaDestino + "log_Plugin.txt", "TIPO OFERTA " + ((OptionSetValue)ecOfertasHijas.Entities[i].Attributes["atos_tipooferta"]).Value + "\r\n");
                    if (((OptionSetValue)ecOfertasHijas.Entities[i].Attributes["atos_tipooferta"]).Value != 300000002)  //No es Simple
                    {
                        if (((OptionSetValue)ecOfertasHijas.Entities[i].Attributes["atos_tipooferta"]).Value == 300000001)  //Suboferta                                     
                        {
                            //Comprobamos si el producto contratado coincide con el de la oferta padre
                            if (ecOfertasHijas.Entities[i].Attributes.Contains("atos_tipodeproductofinalid"))
                            {
                                if (((EntityReference)ecOfertasHijas.Entities[i].Attributes["atos_tipodeproductofinalid"]).Id == productoFinal.Id)
                                {
                                    writelog(rutaDestino + "log_Plugin.txt", "ENCONTRADO \r\n");
                                    encontrado = true;
                                    subOferta = ecOfertasHijas.Entities[i];
                                }
                            }
                            BuscarSubofertaMismoProducto(ecOfertasHijas.Entities[i], productoFinal, servicioConsultas);
                        }
                    }
                    i++;
                }
            }
            return subOferta;
        }

        private EntityCollection BuscarSubOfertas(Entity oferta, IOrganizationService servicioConsultas)
        {
            EntityCollection ecOfertasHijas = ConsultaHijos(servicioConsultas, oferta);
            EntityCollection lSubOfertas = new EntityCollection();
            writelog(rutaDestino + "log_Plugin.txt", "Esta oferta multipunto tiene " + ecOfertasHijas.Entities.Count + " ofertas hijas" + "\r\n");
            if (ecOfertasHijas.Entities.Count > 0)
            {
                foreach (Entity subOferta in ecOfertasHijas.Entities)
                {
                    writelog(rutaDestino + "log_Plugin.txt", "TIPO OFERTA " + ((OptionSetValue)subOferta.Attributes["atos_tipooferta"]).Value + "\r\n");
                    if (((OptionSetValue)subOferta.Attributes["atos_tipooferta"]).Value != 300000002)  //No es Simple
                    {
                        if (((OptionSetValue)subOferta.Attributes["atos_tipooferta"]).Value == 300000001)  //Suboferta                                     
                        {
                            //La añadimos a la lista de subOfertas
                            lSubOfertas.Entities.Add(subOferta);
                        }
                        BuscarSubOfertas(subOferta, servicioConsultas);
                    }
                }
            }
            return lSubOfertas;
        }

        private void GenerarHoja3Oferta(ClosedXML.Excel.XLWorkbook libro, IOrganizationService servicioConsultas, Entity oferta)
        {
            //Generamos la hoja en fucnión al producto seleccionado
            writelog(rutaDestino + "log_Plugin.txt", "GenerarHoja3Oferta para el producto \r\n");
            var hoja = libro.Worksheet("3.Precio");
            //Recogemos el producto final
            Entity productoFinal = new Entity();
            if (oferta.Attributes.Contains("atos_tipodeproductofinalid"))
                productoFinal = ConsultaProductoFinal(servicioConsultas, oferta);
            int filaVariable = 9 + FILASENCABEZADO;
            writelog(rutaDestino + "log_Plugin.txt", "productoFinal \r\n");
            if (productoFinal.Attributes.Contains("atos_tipodeproductoid"))
            {
                /*if (productoFinal.Attributes.Contains("atos_descripcion"))
                    hoja.Cell(3, 3).Value = productoFinal.Attributes["atos_descripcion"];
                else
                    hoja.Cell(3, 3).Value = "";
                 */
                if (productoFinal.Attributes.Contains("atos_formula"))
                    hoja.Cell(8 + FILASENCABEZADO, 2).Value = "Precio (€/MWh) = " + productoFinal.Attributes["atos_formula"].ToString();
                else
                    hoja.Cell(8 + FILASENCABEZADO, 2).Value = "";

                for (int i = 1; i <= 10; i++)
                {
                    if (productoFinal.Attributes.Contains("atos_valorvi" + i) && productoFinal.Attributes["atos_mostrareninformev" + i].Equals(true))
                    {
                        hoja.Row(filaVariable).InsertRowsBelow(1);
                        hoja.Row(filaVariable).Height = 15;
                        filaVariable = filaVariable + 1;
                        hoja.Cell(filaVariable, 2).Value = productoFinal.Attributes["atos_nombrevi" + i] + " = " + productoFinal.Attributes["atos_valorvi" + i];
                    }
                }
                EntityCollection listaPricingInput = new EntityCollection();
                //Si la oferta es multipunto, recogemos el listado de pricingInput de la suboferta que contenga el mismo producto
                if (((OptionSetValue)oferta.Attributes["atos_tipooferta"]).Value == 300000000) //Multipunto
                {
                    Entity subOferta = BuscarSubofertaMismoProducto(oferta, productoFinal, servicioConsultas);
                    listaPricingInput = ListadoPricinInput(servicioConsultas, subOferta);
                }
                else
                    listaPricingInput = ListadoPricinInput(servicioConsultas, oferta);

                writelog(rutaDestino + "log_Plugin.txt", "listaPricingInput.Entities.Count: "+listaPricingInput.Entities.Count+" \r\n");                

                if (listaPricingInput.Entities.Count > 0)
                {
                    //Dejamos una fila de espacio                   
                    filaVariable = filaVariable + 1;
                    for (int i = 0; i < listaPricingInput.Entities.Count; i++)
                    {
                        //Aquí se pintan los términos de pricing
                        String DenominacionPricing = ((AliasedValue)listaPricingInput.Entities[i].Attributes["terminoPricing.atos_denominacionbreve"]).Value.ToString();
                        if (DenominacionPricing != "CFE" && DenominacionPricing != "MAE")
                        {
                            String DescripcionPricing = ((AliasedValue)listaPricingInput.Entities[i].Attributes["terminoPricing.atos_name"]).Value.ToString();
                            if (DenominacionPricing == "MC")
                            {
                                DescripcionPricing = "Coste de Gestión (€/MWh)";
                            }
                            hoja.Row(filaVariable).InsertRowsBelow(1);
                            hoja.Row(filaVariable).Height = 15;
                            hoja.Cell(filaVariable + 1, 2).Style.Border.BottomBorder = ClosedXML.Excel.XLBorderStyleValues.None;
                            filaVariable = filaVariable + 1;

                            hoja.Cell(filaVariable, 2).Value = DenominacionPricing + " : ";
                            hoja.Cell(filaVariable, 3).Value = DescripcionPricing;
                            //Aplicamos estilo
                            hoja.Range(hoja.Cell(filaVariable, 3), hoja.Cell(filaVariable, 9)).Merge();
                            hoja.Range(hoja.Cell(filaVariable, 3), hoja.Cell(filaVariable, 9)).Merge().Style.Border.BottomBorder = ClosedXML.Excel.XLBorderStyleValues.None;
                            hoja.Cell(filaVariable, 2).Style.Border.LeftBorder = ClosedXML.Excel.XLBorderStyleValues.Thin;
                            hoja.Cell(filaVariable, 2).Style.Fill.BackgroundColor = ClosedXML.Excel.XLColor.FromArgb(242, 242, 242);
                            hoja.Cell(filaVariable, 2).Style.Font.FontColor = ClosedXML.Excel.XLColor.FromArgb(192, 0, 0);
                            hoja.Cell(filaVariable, 9).Style.Border.RightBorder = ClosedXML.Excel.XLBorderStyleValues.Thin;
                            hoja.Cell(filaVariable, 3).Style.Fill.BackgroundColor = ClosedXML.Excel.XLColor.FromArgb(242, 242, 242);
                        }
                        /*else { 
                            //Si no vamos a pintar la fila porque sea uno de esos términos, hay que quitar una fila
                            filaVariable = filaVariable - 1;
                        }*/
                    }
                }

                //Añadimos margen inferior tabla
                if (listaPricingInput.Entities.Count > 0)
                    hoja.Range(hoja.Cell(filaVariable + 1, 2), hoja.Cell(filaVariable + 3, 9)).Merge().Style.Border.TopBorder = ClosedXML.Excel.XLBorderStyleValues.Thin;
            }
            writelog(rutaDestino + "log_Plugin.txt", " ########### ÚLTIMA FILA HOJA 3: "+ filaVariable +" \r\n");
            //Establezco el área de impresión
            hoja.PageSetup.PrintAreas.Add(1, 1, filaVariable, 10);
        }

        private void GenerarHoja4Oferta(ClosedXML.Excel.XLWorkbook libro, IOrganizationService servicioConsultas, Entity oferta)
        {
            //Generamos la hoja en fucnión al producto seleccionado
            writelog(rutaDestino + "log_Plugin.txt", "GenerarHoja4Oferta para el producto \r\n");
            var hoja = libro.Worksheet("Punto 4");

            //Ponemos los días de pago
            if (oferta.Attributes.Contains("atos_condicionpagoid") && oferta.Attributes["atos_condicionpagoid"] != null)
            {
                String diasPago = GetDiasPago(servicioConsultas, oferta);
                int pagonumber;
                if (diasPago != null && diasPago != "" && int.TryParse(diasPago, out pagonumber))
                {
                    hoja.Cell(3 + FILASENCABEZADO, 1).Value = "El pago de la factura será efectuado a los " + diasPago + " días de fecha factura.";
                }
                else
                {
                    hoja.Cell(3 + FILASENCABEZADO, 1).Value = "No hay fecha límite para vencimiento del pago.";
                }

            }

            if (oferta.Attributes.Contains("atos_fechafinvigenciaoferta"))
            {
                DateTime fechafinvigencia = DateTime.Parse(oferta.Attributes["atos_fechafinvigenciaoferta"].ToString());

                hoja.Cell(9 + FILASENCABEZADO, 1).Value = "La presente propuesta es estrictamente confidencial y mantendrá su vigencia hasta el día " + fechafinvigencia.ToLocalTime().ToString("dd/MM/yyyy") + ".";
            }

            writelog(rutaDestino + "log_Plugin.txt", "Tiene penalización: " + oferta.Attributes["atos_penalizacionconsumo"].ToString() + "\r\n");
            if (oferta.Attributes["atos_penalizacionconsumo"].Equals(false))
            {
                hoja.Cell(11 + FILASENCABEZADO, 1).Value = "";
                hoja.Range(hoja.Cell(11 + FILASENCABEZADO, 1), hoja.Cell(13 + FILASENCABEZADO, 10)).Unmerge();
                hoja.Range(hoja.Cell(11 + FILASENCABEZADO, 1), hoja.Cell(13 + FILASENCABEZADO, 10)).Style.Fill.BackgroundColor = ClosedXML.Excel.XLColor.White;
            }
            else
            {
                String rangoInf = "__";
                String rangoSup = "__";
                String importe = "__";

                if (oferta.Attributes.Contains("atos_rangoinferiorpenalizacion"))
                    rangoInf = decimal.Round(Convert.ToDecimal(oferta.Attributes["atos_rangoinferiorpenalizacion"]), 0).ToString();
                if (oferta.Attributes.Contains("atos_rangosuperiorpenalizacion"))
                    rangoSup = decimal.Round(Convert.ToDecimal(oferta.Attributes["atos_rangosuperiorpenalizacion"]), 0).ToString();
                if (oferta.Attributes.Contains("atos_importepenalizacion"))
                    importe = decimal.Round(((Money)oferta.Attributes["atos_importepenalizacion"]).Value, 2).ToString();
                hoja.Cell(11 + FILASENCABEZADO, 1).Value = "En el caso de que el cliente consuma por encima del " +
                    rangoSup + "% o por debajo del " + rangoInf + "% del consumo agregado anual por periodo " +
                    "(facilitado por el cliente y descrito en las condiciones particulares-término de energía (€/MWh)) tendrá una penalización de " +
                    importe + "€/MWh a aplicar al consumo que exceda de estos valores.";
                hoja.Cell(11 + FILASENCABEZADO, 1).Style.Font.FontColor = ClosedXML.Excel.XLColor.Black;

            }

        }

        private void GenerarAnexoI(ClosedXML.Excel.XLWorkbook libro, IOrganizationService servicioConsultas, Entity entidad, EntityCollection ecOfertaMulti, EntityCollection ecOfertasFechas)
        {
            var hoja = libro.Worksheet("AnexoI");
            decimal[] totales = new decimal[7];
            int filaTabla1 = 6 + FILASENCABEZADO;//Contamos a partir de la primera fila de datos
            int filaTabla2 = 4;//Distancia entre tablas           
            int filaTabla3 = 4;//Distancia entre tablas     
            int numHijos = ecOfertaMulti.Entities.Count();//Número de ofertas hijas

            writelog(rutaDestino + "log_Plugin.txt", "GenerarAnexoI \r\n");
            writelog(rutaDestino + "log_Plugin.txt", "numHijos: " + numHijos + " \r\n");
            if (numHijos == 0)
            {
                if (entidad.Attributes.Contains("atos_instalacionid"))
                {
                    EntityCollection ecInstalacion = CamposInstalacion(servicioConsultas, entidad);
                    writelog(rutaDestino + "log_Plugin.txt", "ecInstalacion.Entities.Count:" + ecInstalacion.Entities.Count + " \r\n");

                    if (ecInstalacion.Entities.Count > 0)
                    {
                        filaTabla2 = filaTabla2 + filaTabla1 + 1;
                        filaTabla3 = filaTabla3 + filaTabla2 + 1;

                        RellenaTabla1AnexoI(ecInstalacion.Entities[0], libro, filaTabla1, servicioConsultas, entidad);
                        RellenaTabla2AnexoI(ecInstalacion.Entities[0], libro, filaTabla2, servicioConsultas);
                        RellenaTabla3AnexoI(ecInstalacion.Entities[0], libro, filaTabla3, servicioConsultas, totales);
                        RellenaTotalesTabla3AnexoI(libro, filaTabla3, totales);
                    }

                }
            }
            else
            {
                if (numHijos > 1)
                {
                    hoja.Row(filaTabla1).InsertRowsBelow(numHijos - 1);
                    for (int i = 0; i < (numHijos - 1); i++)
                        hoja.Row(filaTabla1 + i).Height = 15;
                }
                for (int i = 0; i < numHijos; i++)
                {
                    writelog(rutaDestino + "log_Plugin.txt", "En GenerarAnexoI ecInstalacion.Entities.Count:" + ecOfertasFechas.Entities.Count + " \r\n");
                    RellenaTabla1AnexoI(ecOfertaMulti.Entities[i], libro, filaTabla1, servicioConsultas, ecOfertasFechas.Entities[i]);
                    filaTabla1 = filaTabla1 + 1;
                }

                filaTabla2 = filaTabla2 + filaTabla1;
                if (numHijos > 1)
                {
                    hoja.Row(filaTabla2).InsertRowsBelow(numHijos - 1);
                    for (int i = 0; i < (numHijos - 1); i++)
                        hoja.Row(filaTabla2 + i).Height = 15;
                }

                for (int i = 0; i < numHijos; i++)
                {
                    writelog(rutaDestino + "log_Plugin.txt", "RellenaTabla2AnexoI \r\n");
                    RellenaTabla2AnexoI(ecOfertaMulti.Entities[i], libro, filaTabla2, servicioConsultas);
                    filaTabla2 = filaTabla2 + 1;
                }
                filaTabla3 = filaTabla3 + filaTabla2;
                if (numHijos > 1)
                {
                    hoja.Row(filaTabla3).InsertRowsBelow(numHijos - 1);
                    for (int i = 0; i < (numHijos - 1); i++)
                        hoja.Row(filaTabla3 + i).Height = 15;
                }

                for (int i = 0; i < numHijos; i++)
                {
                    RellenaTabla3AnexoI(ecOfertaMulti.Entities[i], libro, filaTabla3, servicioConsultas, totales);
                    filaTabla3 = filaTabla3 + 1;
                }
                RellenaTotalesTabla3AnexoI(libro, filaTabla3, totales);
            }

            //Establezco el área de impresión
            hoja.PageSetup.PrintAreas.Add(1, 1, filaTabla3, 10);

        }

        #region Tablas Dinámicas Anexo I
        private void RellenaTabla1AnexoI(Entity instalacion, ClosedXML.Excel.XLWorkbook libro, int filaTabla1, IOrganizationService servicioConsultas, Entity eFechasOferta)
        {
            writelog(rutaDestino + "log_Plugin.txt", "RellenaTabla1AnexoI \r\n");
            var hoja = libro.Worksheet("AnexoI");
            if (instalacion.Attributes.Contains("atos_lote"))
                hoja.Cell(filaTabla1, 1).Value = instalacion.Attributes["atos_lote"];
            else
                hoja.Cell(filaTabla1, 1).Value = "";

            if (instalacion.Attributes.Contains("atos_cups20"))
                hoja.Cell(filaTabla1, 2).Value = instalacion.Attributes["atos_cups20"];
            else
                hoja.Cell(filaTabla1, 2).Value = "";

            if (instalacion.Attributes.Contains("atos_tarifaid"))
            {
                Entity tarifa = GetTarifa(servicioConsultas, instalacion);
                if (tarifa.Attributes.Contains("atos_name"))
                {
                    hoja.Cell(filaTabla1, 4).Value = tarifa.Attributes["atos_name"].ToString();
                    hoja.Cell(filaTabla1, 4).DataType = XLCellValues.Text;
                }
                else
                    hoja.Cell(filaTabla1, 4).Value = "";
            }
            else
                hoja.Cell(filaTabla1, 4).Value = "";
            if (eFechasOferta.Attributes.Contains("atos_fechainicio"))
                hoja.Cell(filaTabla1, 5).Value = ((DateTime)(eFechasOferta.Attributes["atos_fechainicio"])).ToLocalTime();

            if (eFechasOferta.Attributes.Contains("atos_fechafin"))
                hoja.Cell(filaTabla1, 8).Value = ((DateTime)(eFechasOferta.Attributes["atos_fechafin"])).ToLocalTime();
            hoja.Range(hoja.Cell(filaTabla1, 2), hoja.Cell(filaTabla1, 3)).Merge();
            hoja.Range(hoja.Cell(filaTabla1, 5), hoja.Cell(filaTabla1, 7)).Merge();
            hoja.Range(hoja.Cell(filaTabla1, 8), hoja.Cell(filaTabla1, 10)).Merge();
            writelog(rutaDestino + "log_Plugin.txt", "SALGO \r\n");
        }

        private void RellenaTabla2AnexoI(Entity instalacion, ClosedXML.Excel.XLWorkbook libro, int filaTabla2, IOrganizationService servicioConsultas)
        {
            writelog(rutaDestino + "log_Plugin.txt", "RellenaTabla2AnexoI \r\n");
            var hoja = libro.Worksheet("AnexoI");
            if (instalacion.Attributes.Contains("atos_lote"))
                hoja.Cell(filaTabla2, 1).Value = instalacion.Attributes["atos_lote"];
            else
                hoja.Cell(filaTabla2, 1).Value = "";
            if (instalacion.Attributes.Contains("atos_cups20"))
                hoja.Cell(filaTabla2, 2).Value = instalacion.Attributes["atos_cups20"];
            else
                hoja.Cell(filaTabla2, 2).Value = "";

            if (instalacion.Attributes.Contains("atos_tarifaid"))
            {
                Entity tarifa = GetTarifa(servicioConsultas, instalacion);
                if (tarifa.Attributes.Contains("atos_name"))
                {
                    hoja.Cell(filaTabla2, 4).Value = tarifa.Attributes["atos_name"].ToString();
                    hoja.Cell(filaTabla2, 4).DataType = XLCellValues.Text;
                }
                else
                    hoja.Cell(filaTabla2, 4).Value = "";
            }
            else
                hoja.Cell(filaTabla2, 4).Value = "";

            if (instalacion.Attributes.Contains("atos_potenciacontratada1"))
                hoja.Cell(filaTabla2, 5).Value = decimal.Round(Convert.ToDecimal(instalacion.Attributes["atos_potenciacontratada1"]), 3);

            if (instalacion.Attributes.Contains("atos_potenciacontratada2"))
                hoja.Cell(filaTabla2, 6).Value = decimal.Round(Convert.ToDecimal(instalacion.Attributes["atos_potenciacontratada2"]), 3);

            if (instalacion.Attributes.Contains("atos_potenciacontratada3"))
                hoja.Cell(filaTabla2, 7).Value = decimal.Round(Convert.ToDecimal(instalacion.Attributes["atos_potenciacontratada3"]), 3);

            if (instalacion.Attributes.Contains("atos_potenciacontratada4"))
                hoja.Cell(filaTabla2, 8).Value = decimal.Round(Convert.ToDecimal(instalacion.Attributes["atos_potenciacontratada4"]), 3);

            if (instalacion.Attributes.Contains("atos_potenciacontratada5"))
                hoja.Cell(filaTabla2, 9).Value = decimal.Round(Convert.ToDecimal(instalacion.Attributes["atos_potenciacontratada5"]), 3);

            if (instalacion.Attributes.Contains("atos_potenciacontratada6"))
                hoja.Cell(filaTabla2, 10).Value = decimal.Round(Convert.ToDecimal(instalacion.Attributes["atos_potenciacontratada6"]), 3);
            hoja.Range(hoja.Cell(filaTabla2, 2), hoja.Cell(filaTabla2, 3)).Merge();
        }

        private void RellenaTabla3AnexoI(Entity instalacion, ClosedXML.Excel.XLWorkbook libro, int filaTabla3, IOrganizationService servicioConsultas, decimal[] totales)
        {
            writelog(rutaDestino + "log_Plugin.txt", "RellenaTabla3AnexoI \r\n");
            var hoja = libro.Worksheet("AnexoI");
            if (instalacion.Attributes.Contains("atos_lote"))
                hoja.Cell(filaTabla3, 1).Value = instalacion.Attributes["atos_lote"];
            else
                hoja.Cell(filaTabla3, 1).Value = "";
            if (instalacion.Attributes.Contains("atos_cups20"))
                hoja.Cell(filaTabla3, 2).Value = instalacion.Attributes["atos_cups20"];
            else
                hoja.Cell(filaTabla3, 2).Value = "";
            if (instalacion.Attributes.Contains("atos_cups20"))
                hoja.Cell(filaTabla3, 2).Value = instalacion.Attributes["atos_cups20"];
            else
                hoja.Cell(filaTabla3, 2).Value = "";

            if (instalacion.Attributes.Contains("atos_consumoestimadototalanual"))
            {
                hoja.Cell(filaTabla3, 4).Value = decimal.Round(Convert.ToDecimal(instalacion.Attributes["atos_consumoestimadototalanual"]), 3); ;
                totales[0] = totales[0] + decimal.Round(Convert.ToDecimal(hoja.Cell(filaTabla3, 4).Value), 3);
                writelog(rutaTempServidor + "log_Plugin.txt", "aTotales[0] = " + totales[0] + "\r\n");
            }
            else
                hoja.Cell(filaTabla3, 4).Value = "";

            if (instalacion.Attributes.Contains("atos_consumoestimadoanual1"))
            {
                hoja.Cell(filaTabla3, 5).Value = decimal.Round(Convert.ToDecimal(instalacion.Attributes["atos_consumoestimadoanual1"]), 3);
                totales[1] = totales[1] + decimal.Round(Convert.ToDecimal(hoja.Cell(filaTabla3, 5).Value), 3);
            }
            else
                hoja.Cell(filaTabla3, 5).Value = "";
            if (instalacion.Attributes.Contains("atos_consumoestimadoanual2"))
            {
                hoja.Cell(filaTabla3, 6).Value = decimal.Round(Convert.ToDecimal(instalacion.Attributes["atos_consumoestimadoanual2"]), 3);
                totales[2] = totales[2] + decimal.Round(Convert.ToDecimal(hoja.Cell(filaTabla3, 6).Value), 3);
            }
            else
                hoja.Cell(filaTabla3, 6).Value = "";

            if (instalacion.Attributes.Contains("atos_consumoestimadoanual3"))
            {
                hoja.Cell(filaTabla3, 7).Value = decimal.Round(Convert.ToDecimal(instalacion.Attributes["atos_consumoestimadoanual3"]), 3);
                totales[3] = totales[3] + decimal.Round(Convert.ToDecimal(hoja.Cell(filaTabla3, 7).Value), 3);
            }
            else
                hoja.Cell(filaTabla3, 7).Value = "";

            if (instalacion.Attributes.Contains("atos_consumoestimadoanual4"))
            {
                hoja.Cell(filaTabla3, 8).Value = decimal.Round(Convert.ToDecimal(instalacion.Attributes["atos_consumoestimadoanual4"]), 3);
                totales[4] = decimal.Round(totales[4] + Convert.ToDecimal(hoja.Cell(filaTabla3, 8).Value), 3);
            }
            else
                hoja.Cell(filaTabla3, 8).Value = "";

            if (instalacion.Attributes.Contains("atos_consumoestimadoanual5"))
            {
                hoja.Cell(filaTabla3, 9).Value = decimal.Round(Convert.ToDecimal(instalacion.Attributes["atos_consumoestimadoanual5"]), 3);
                totales[5] = decimal.Round(totales[5] + Convert.ToDecimal(hoja.Cell(filaTabla3, 9).Value), 3);
            }
            else
                hoja.Cell(filaTabla3, 9).Value = "";

            if (instalacion.Attributes.Contains("atos_consumoestimadoanual6"))
            {
                hoja.Cell(filaTabla3, 10).Value = decimal.Round(Convert.ToDecimal(instalacion.Attributes["atos_consumoestimadoanual6"]), 3);
                totales[6] = decimal.Round(totales[6] + Convert.ToDecimal(hoja.Cell(filaTabla3, 10).Value), 3);
            }
            else
                hoja.Cell(filaTabla3, 10).Value = "";
            hoja.Range(hoja.Cell(filaTabla3, 2), hoja.Cell(filaTabla3, 3)).Merge();
        }

        private void RellenaTotalesTabla3AnexoI(ClosedXML.Excel.XLWorkbook libro, int filaTabla3, decimal[] totales)
        {
            var hoja = libro.Worksheet("AnexoI");
            hoja.Cell(filaTabla3, 4).Value = totales[0];
            hoja.Cell(filaTabla3, 5).Value = totales[1];
            hoja.Cell(filaTabla3, 6).Value = totales[2];
            hoja.Cell(filaTabla3, 7).Value = totales[3];
            hoja.Cell(filaTabla3, 8).Value = totales[4];
            hoja.Cell(filaTabla3, 9).Value = totales[5];
            hoja.Cell(filaTabla3, 10).Value = totales[6];
        }
        #endregion
        #endregion

        #region Consultas
        private Entity ConsultaProductoFinal(IOrganizationService servicioConsultas, Entity entity)
        {
            ColumnSet colSet = new ColumnSet("atos_formula", "atos_mostrareninformev1", "atos_mostrareninformev2", "atos_mostrareninformev3"
                , "atos_mostrareninformev4", "atos_mostrareninformev5", "atos_mostrareninformev6", "atos_mostrareninformev7"
                , "atos_mostrareninformev8", "atos_mostrareninformev9", "atos_mostrareninformev10", "atos_nombrevi1",
                "atos_nombrevi2", "atos_nombrevi3", "atos_nombrevi4", "atos_nombrevi5", "atos_nombrevi6", "atos_nombrevi7", "atos_nombrevi8",
                "atos_nombrevi9", "atos_nombrevi10", "atos_valorvi1", "atos_valorvi2", "atos_valorvi3", "atos_valorvi4", "atos_valorvi5",
                "atos_valorvi6", "atos_valorvi7", "atos_valorvi8", "atos_valorvi9", "atos_valorvi10", "atos_descripcion", "atos_unidadv1",
                "atos_unidadv2", "atos_unidadv3", "atos_unidadv4", "atos_unidadv5", "atos_unidadv6", "atos_unidadv7", "atos_unidadv8", "atos_unidadv9", "atos_unidadv10");
            writelog(rutaDestino + "log_Plugin.txt", "Lanzando ConsultaProductoFinal \r\n");
            return servicioConsultas.Retrieve("atos_tipodeproducto", ((EntityReference)entity.Attributes["atos_tipodeproductofinalid"]).Id, colSet);
        }

        private Entity CamposOferta(IOrganizationService servicioConsultas, Entity entity)
        {
            ColumnSet colSet = new ColumnSet("atos_name", "atos_ofertapadreid", "atos_razonsocialid", "atos_cuentanegociadoraid",
                                             "atos_fechainicio", "atos_fechafin", "atos_tipooferta", "atos_fechafinvigenciaoferta",
                                             "atos_instalacionid", "atos_agentecomercialid", "atos_tipodeproductofinalid", "atos_gestionatr",
                                             "atos_penalizacionconsumo", "atos_rangoinferiorpenalizacion", "atos_rangosuperiorpenalizacion", "atos_importepenalizacion",
                                             "atos_posibilidadrealizarcoberturas", "atos_costegestioncobertura", "atos_lote", "atos_subsistemaid", "atos_tarifaid", "atos_subsistemaid", "atos_sistemaelectricoid", "atos_condicionpagoid");
            writelog(rutaDestino + "log_Plugin.txt", "Lanzando consultaOferta " + entity.Attributes["atos_guid"].ToString() + "\r\n");
            return servicioConsultas.Retrieve("atos_oferta", new Guid(entity.Attributes["atos_guid"].ToString()), colSet);
        }

        private Entity CamposContrato(IOrganizationService servicioConsultas, Entity entity)
        {
            ColumnSet colSet = new ColumnSet("atos_name", "createdon", "atos_agentecomercialid", "atos_razonsocialid", "atos_cups", "atos_fechainiciocontrato", "atos_fechafincontrato");
            writelog(rutaDestino + "log_Plugin.txt", "Lanzando consulta Contrato " + entity.Attributes["atos_guid"].ToString() + "\r\n");
            return servicioConsultas.Retrieve("atos_contrato", new Guid(entity.Attributes["atos_guid"].ToString()), colSet);
        }

        private Entity CamposRazonSocial(IOrganizationService servicioConsultas, Entity entity)
        {
            ColumnSet colSet = new ColumnSet("name", "atos_numerodedocumento", "atos_tipodedocumento", "atos_cnaeid",
                  "atos_rstipodeviaid", "atos_rsdireccion", "atos_rsnumero", "atos_rsescalera",
                "atos_rspiso", "atos_rspuerta", "atos_rspoligono", "atos_rscodigopostalid", "atos_rsmunicipioid", "atos_rspaisid",
                "atos_contactocomercialid");

                writelog(rutaDestino + "log_Plugin.txt", "Lanzando CamposRazónSocial " + entity.Attributes["atos_razonsocialid"].ToString() + "\r\n");
                return servicioConsultas.Retrieve("account", ((EntityReference)entity.Attributes["atos_razonsocialid"]).Id, colSet);

        }

        private Entity CamposContactoComercial(IOrganizationService servicioConsultas, Entity entity)
        {
            ColumnSet colSet = new ColumnSet("firstname", "lastname", "emailaddress1", "atos_numerodocumento", "telephone1");
            writelog(rutaDestino + "log_Plugin.txt", "Lanzando CamposContactoComercial \r\n");
            return servicioConsultas.Retrieve("contact", ((EntityReference)entity.Attributes["atos_contactocomercialid"]).Id, colSet);
        }

        private Entity CamposFirmante(IOrganizationService servicioConsultas, Entity contrato, byte firmante)
        {
            ColumnSet colSet = new ColumnSet("firstname", "lastname", "atos_numerodocumento", "jobtitle");

            writelog(rutaDestino + "log_Plugin.txt", "Lanzando CamposFirmante \r\n");
            if (firmante == 1)
                return servicioConsultas.Retrieve("contact", ((EntityReference)contrato.Attributes["atos_representante1clienteid"]).Id, colSet);
            else
                return servicioConsultas.Retrieve("contact", ((EntityReference)contrato.Attributes["atos_representante2clienteid"]).Id, colSet);
        }

        private Entity GetPricingInputPorTarifa(IOrganizationService _servicioConsultas, Guid idTarifa, Entity terminoPricing, DateTime fechaInicio, DateTime fechaFin, Guid idSistemaElectrico)
        {
            writelog(rutaDestino + "log_Plugin.txt", "Lanzando ConsultaPricingInput - Inicio: " + fechaInicio + " Final: " + fechaFin + "\r\n");
            writelog(rutaDestino + "log_Plugin.txt", "Valores : IdTarifa: " + idTarifa + " idSistemaElectrico: " + idSistemaElectrico   + "\r\n");
            writelog(rutaDestino + "log_Plugin.txt", "Valores : terminoPricing.DependeDeTarifa: " + (Boolean)terminoPricing.Attributes["atos_dependenciadetarifa"] + " terminoPricing.DependeSisElectrico: " + (Boolean)terminoPricing.Attributes["atos_dependenciadesistemaelectrico"] + "\r\n");
          

            QueryExpression _consulta = new QueryExpression("atos_pricinginput");
            FilterExpression _filtro = new FilterExpression();
            _filtro.FilterOperator = LogicalOperator.And;

            writelog(rutaDestino + "log_Plugin.txt", " Creación Query y Filtro \r\n");
            //relación con la tarifa
             writelog(rutaDestino + "log_Plugin.txt", " idTarifa == vacio? : " + idTarifa.Equals(System.Guid.Empty)+ " TerminoPricing.DependeDeTarifa : " + terminoPricing.Attributes.Contains("atos_dependenciadetarifa").ToString() + " \r\n");
           
            if (!idTarifa.Equals(System.Guid.Empty) && terminoPricing.Attributes.Contains("atos_dependenciadetarifa") && (Boolean)terminoPricing.Attributes["atos_dependenciadetarifa"] == true)
            {
                writelog(rutaDestino + "log_Plugin.txt", " Tengo tarifa \r\n");
                ConditionExpression _condicionT = new ConditionExpression();
                _condicionT.AttributeName = "atos_tarifaid";
                _condicionT.Operator = ConditionOperator.Equal;
                _condicionT.Operator = ConditionOperator.Equal;
                _condicionT.Values.Add(idTarifa);
                _filtro.Conditions.Add(_condicionT);
            }
            
            //Relacion con el sistema eléctrico
            writelog(rutaDestino + "log_Plugin.txt", " idSistemaElectrico == vacio? : " + idSistemaElectrico.Equals(System.Guid.Empty) + " TerminoPricing.atos_dependenciadesistemaelectrico : " + terminoPricing.Attributes.Contains("atos_dependenciadesistemaelectrico").ToString() + " \r\n");
           
            if (!idSistemaElectrico.Equals(System.Guid.Empty) && terminoPricing.Attributes.Contains("atos_dependenciadesistemaelectrico") && (Boolean)terminoPricing.Attributes["atos_dependenciadesistemaelectrico"] == true)
            {
                writelog(rutaDestino + "log_Plugin.txt", " Tengo SistemaElectrico \r\n");
                ConditionExpression _condicionSE = new ConditionExpression();
                _condicionSE.AttributeName = "atos_subsistemaid";
                _condicionSE.Operator = ConditionOperator.Equal;
                _condicionSE.Values.Add(idSistemaElectrico);
                _filtro.Conditions.Add(_condicionSE);
            }


            //Fechas de aplicación del pricing respecto de la oferta
            ConditionExpression _condicion1 = new ConditionExpression();
            _condicion1.AttributeName = "atos_fechainicioaplicacion";
            _condicion1.Operator = ConditionOperator.LessEqual;
            _condicion1.Values.Add(fechaFin);
            _filtro.Conditions.Add(_condicion1);
            writelog(rutaDestino + "log_Plugin.txt", " Filtro sobre fechaInicioAplicación \r\n");

            ConditionExpression _condicion2 = new ConditionExpression();
            _condicion2.AttributeName = "atos_fechafinaplicacion";
            _condicion2.Operator = ConditionOperator.GreaterEqual;
            _condicion2.Values.Add(fechaInicio);
            _filtro.Conditions.Add(_condicion2);
            writelog(rutaDestino + "log_Plugin.txt", " Filtro sobre fechaFinAplicacion \r\n");

            //Termino de pricing que se está buscando
            ConditionExpression _condicion3 = new ConditionExpression();
            _condicion3.AttributeName = "atos_terminodepricingid";
            _condicion3.Operator = ConditionOperator.Equal;
            _condicion3.Values.Add(terminoPricing.Id);
            _filtro.Conditions.Add(_condicion3);
            writelog(rutaDestino + "log_Plugin.txt", " Filtro sobre termino de pricingId \r\n");

            //No tiene que estar asociado a ninguna oferta. Es un término de Pricing independiente
            ConditionExpression _condicion = new ConditionExpression();
            _condicion.AttributeName = "atos_ofertaid";
            _condicion.Operator = ConditionOperator.Null;
            _filtro.Conditions.Add(_condicion);
            writelog(rutaDestino + "log_Plugin.txt", " Filtro sobre atos_OfertaId \r\n");

            //La el pricingInputo debe estar vigente hoy
            _condicion = new ConditionExpression();
            _condicion.AttributeName = "atos_fechainiciovigencia";
            _condicion.Operator = ConditionOperator.LessEqual;
            _condicion.Values.Add(DateTime.Now);
            _filtro.Conditions.Add(_condicion);
            writelog(rutaDestino + "log_Plugin.txt", " Filtro sobre FechaInicioVigencia \r\n");

            _condicion = new ConditionExpression();
            _condicion.AttributeName = "atos_fechafinvigencia";
            _condicion.Operator = ConditionOperator.GreaterEqual;
            _condicion.Values.Add(DateTime.Now);
            _filtro.Conditions.Add(_condicion);
            writelog(rutaDestino + "log_Plugin.txt", " Filtro sobre FechaFinVigencia \r\n");

            //La facturación estimada no debe estar informada
            _condicion = new ConditionExpression();
            _condicion.AttributeName = "atos_facturacionestimada";
            _condicion.Operator = ConditionOperator.Equal;
            _condicion.Values.Add(false);
            _filtro.Conditions.Add(_condicion);
            writelog(rutaDestino + "log_Plugin.txt", " Filtro sobre facturacionEstimada \r\n");



            _consulta.Criteria.AddFilter(_filtro);
            _consulta.ColumnSet = new ColumnSet("atos_pfijo", "atos_p1", "atos_p2", "atos_p3", "atos_p4", "atos_p5", "atos_p6",
                "atos_tipo", "atos_porcentajeoimporte", "atos_name");

            writelog(rutaDestino + "log_Plugin.txt", " Filtros Añadidos y Conjunto de columnas incluido \r\n");
            EntityCollection _resultado = null;
            try
            {
                _resultado = _servicioConsultas.RetrieveMultiple(_consulta);
                writelog(rutaDestino + "log_Plugin.txt", " Consulta realizada " + _resultado.Entities.Count + " \r\n");

            }
            catch (Exception e)
            {
                writelog(rutaDestino + "log_Plugin.txt", "Error en consulta: " + e.Message.ToString() + "\n");
            }

            writelog(rutaDestino + "log_Plugin.txt", "ConsultaPricingInput. NumeroRegDevueltos: " + _resultado.Entities.Count + "\r\n");
            if (_resultado == null || _resultado.Entities.Count != 1)
            {
                return null;
            }


            return _resultado.Entities[0];

        }

        private Entity GetTerminoPricingInput(IOrganizationService servicioConsultas, String nombre, String terminoEMS)
        {
            ColumnSet colSet = new ColumnSet("atos_name");
            Entity municipio = new Entity();


            QueryExpression _consulta = new QueryExpression("atos_terminodepricing");
            FilterExpression _filtro = new FilterExpression();
            _filtro.FilterOperator = LogicalOperator.And;

            ConditionExpression _condicion = new ConditionExpression();
            _condicion.AttributeName = "atos_name";//"atos_fechasolicitud"; 
            _condicion.Operator = ConditionOperator.Equal;
            _condicion.Values.Add(nombre);
            _filtro.Conditions.Add(_condicion);

            ConditionExpression _condicion1 = new ConditionExpression();
            _condicion1.AttributeName = "atos_terminoems";
            _condicion1.Operator = ConditionOperator.LessEqual;
            _condicion1.Values.Add(terminoEMS);
            _filtro.Conditions.Add(_condicion1);

            _consulta.Criteria.AddFilter(_filtro);
            _consulta.ColumnSet = new ColumnSet("atos_name", "atos_dependenciadesistemaelectrico", "atos_dependenciadetarifa");

            EntityCollection _resultado = null;
            try
            {
                _resultado = servicioConsultas.RetrieveMultiple(_consulta);

            }
            catch (Exception e)
            {
                writelog(rutaDestino + "log_Plugin.txt", "Error en consulta: " + e.Message.ToString() + "\n");
            }

            writelog(rutaDestino + "log_Plugin.txt", "Lanzando ConsultaPricingInputTermino. NumeroRegDevueltos: " + _resultado.Entities.Count + "\r\n");
            if (_resultado == null ||  _resultado.Entities.Count != 1)
            {
                return null;
            }


            return _resultado.Entities[0];

        }


        private String GetMunicipio(IOrganizationService servicioConsultas, Entity entidad)
        {
            ColumnSet colSet = new ColumnSet("atos_name");
            Entity municipio = new Entity();
            if (entidad.LogicalName == "account")
                municipio = servicioConsultas.Retrieve("atos_municipio", ((EntityReference)entidad.Attributes["atos_rsmunicipioid"]).Id, colSet);
            else
                municipio = servicioConsultas.Retrieve("atos_municipio", ((EntityReference)entidad.Attributes["atos_instalacionmunicipioid"]).Id, colSet);
            writelog(rutaDestino + "log_Plugin.txt", "Lanzando GetMunicipio " + municipio.Attributes["atos_name"].ToString() + "\r\n");
            return municipio.Attributes["atos_name"].ToString();
        }

        private String GetPais(IOrganizationService servicioConsultas, Entity rs)
        {
            ColumnSet colSet = new ColumnSet("atos_name");
            Entity pais = servicioConsultas.Retrieve("atos_pais", ((EntityReference)rs.Attributes["atos_rspaisid"]).Id, colSet);
            writelog(rutaDestino + "log_Plugin.txt", "Lanzando GetPais " + pais.Attributes["atos_name"].ToString() + "\r\n");
            return pais.Attributes["atos_name"].ToString();
        }

        private String GetDiasPago(IOrganizationService servicioConsultas, Entity rs)
        {
            ColumnSet colSet = new ColumnSet("atos_name");
            Entity pais = servicioConsultas.Retrieve("atos_condiciondepago", ((EntityReference)rs.Attributes["atos_condicionpagoid"]).Id, colSet);
            writelog(rutaDestino + "log_Plugin.txt", "Lanzando GetPais " + pais.Attributes["atos_name"].ToString() + "\r\n");
            return pais.Attributes["atos_name"].ToString();
        }

        private String GetCodigoPostal(IOrganizationService servicioConsultas, Entity entidad)
        {
            ColumnSet colSet = new ColumnSet("atos_name");
            Entity CP = new Entity();
            if (entidad.LogicalName == "account")
                CP = servicioConsultas.Retrieve("atos_codigopostal", ((EntityReference)entidad.Attributes["atos_rscodigopostalid"]).Id, colSet);
            else
                CP = servicioConsultas.Retrieve("atos_codigopostal", ((EntityReference)entidad.Attributes["atos_instalacioncodigopostalid"]).Id, colSet);
            writelog(rutaDestino + "log_Plugin.txt", "Lanzando GetCodigoPostal " + CP.Attributes["atos_name"].ToString() + "\r\n");
            return CP.Attributes["atos_name"].ToString();
        }

        private Entity GetTarifa(IOrganizationService servicioConsultas, Entity entidad)
        {
            ColumnSet colSet = new ColumnSet("atos_name", "atos_numeroperiodos");
            Entity tarifa = servicioConsultas.Retrieve("atos_tarifa", ((EntityReference)entidad.Attributes["atos_tarifaid"]).Id, colSet);
            writelog(rutaDestino + "log_Plugin.txt", "Lanzando GetTarifa " + tarifa.Attributes["atos_name"].ToString() + "\r\n");
            return tarifa;
        }

        private String GetProvincia(IOrganizationService servicioConsultas, Entity instalacion)
        {
            ColumnSet colSet = new ColumnSet("atos_name");
            Entity provincia = servicioConsultas.Retrieve("atos_provincia", ((EntityReference)instalacion.Attributes["atos_instalacionprovinciaid"]).Id, colSet);
            writelog(rutaDestino + "log_Plugin.txt", "Lanzando GetProvincia " + provincia.Attributes["atos_name"].ToString() + "\r\n");
            return provincia.Attributes["atos_name"].ToString();
        }

        private String GetCNAE(IOrganizationService servicioConsultas, Entity rs)
        {
            ColumnSet colSet = new ColumnSet("atos_name");
            Entity tarifa = servicioConsultas.Retrieve("atos_cnae", ((EntityReference)rs.Attributes["atos_cnaeid"]).Id, colSet);
            writelog(rutaDestino + "log_Plugin.txt", "Lanzando GetCNAE " + tarifa.Attributes["atos_name"].ToString() + "\r\n");
            return tarifa.Attributes["atos_name"].ToString();
        }

        private String GetTipoVia(IOrganizationService servicioConsultas, Entity rs)
        {
            ColumnSet colSet = new ColumnSet("atos_name");
            Entity tipoVia = servicioConsultas.Retrieve("atos_tipodevia", ((EntityReference)rs.Attributes["atos_rstipodeviaid"]).Id, colSet);
            writelog(rutaDestino + "log_Plugin.txt", "Lanzando GetTipoVia \r\n");
            return tipoVia.Attributes["atos_name"].ToString();
        }

        private EntityCollection CamposInstalacion(IOrganizationService servicioConsultas, Entity entidad)
        {
            // writelog(rutaDestino + "log_Plugin.txt", "Id de la instalacion: " + ((EntityReference)(entidad.Attributes["atos_instalacionid"])).Id.ToString() + "\r\n");
            ConditionExpression condicion = new ConditionExpression();
            condicion.AttributeName = "atos_instalacionid";
            condicion.Operator = ConditionOperator.Equal;
            condicion.Values.Add(((EntityReference)(entidad.Attributes["atos_instalacionid"])).Id.ToString());

            FilterExpression filter = new FilterExpression();
            filter.Conditions.Add(condicion);

            QueryExpression consulta = new QueryExpression("atos_instalacion");
            consulta.ColumnSet = new ColumnSet("atos_instalacionid",
                                                "atos_cups20",
                                                "atos_tarifaid",
                                                "atos_instalaciondireccion",
                                                "atos_instalacionnumero",
                                                "atos_instalacionescalera",
                                                "atos_instalacionpiso",
                                                "atos_instalacionpuerta",
                                                "atos_instalacionmunicipioid",
                                                "atos_instalacioncodigopostalid",
                                                "atos_instalacionprovinciaid",
                                                "atos_potenciacontratada1", "atos_potenciacontratada2", "atos_potenciacontratada3",
                                                "atos_potenciacontratada4", "atos_potenciacontratada5", "atos_potenciacontratada6",
                                                "atos_consumoestimadoanual1", "atos_consumoestimadoanual2", "atos_consumoestimadoanual3",
                                                "atos_consumoestimadoanual4", "atos_consumoestimadoanual5", "atos_consumoestimadoanual6",
                                                "atos_consumoestimadototalanual", "atos_lote", "atos_sistemaelectricoid", "atos_subsistemaid");

            consulta.Criteria.AddFilter(filter);
            writelog(rutaDestino + "log_Plugin.txt", "Lanzando consultaInstalacion " + ((EntityReference)(entidad.Attributes["atos_instalacionid"])).Id.ToString() + "\r\n");
            return servicioConsultas.RetrieveMultiple(consulta);
        }

        private Entity CamposAgenteComercial(IOrganizationService servicioConsultas, Entity entidad)
        {
            ColumnSet colSet = new ColumnSet("atos_name", "emailaddress", "atos_telefono");

            writelog(rutaDestino + "log_Plugin.txt", "Lanzando CamposAgenteComercial \r\n");
            return servicioConsultas.Retrieve("atos_agentecomercial", ((EntityReference)entidad.Attributes["atos_agentecomercialid"]).Id, colSet);
        }

        private EntityCollection CamposPricingOutput(IOrganizationService servicioConsultas, Entity entidad)
        {
            writelog(rutaDestino + "log_Plugin.txt", "Lanzando CamposPricingOutput \r\n");
            ConditionExpression condicion1 = new ConditionExpression();
            if (entidad.LogicalName == "atos_oferta")
                condicion1.AttributeName = "atos_ofertaid";
            else
                condicion1.AttributeName = "atos_contratoid";
            condicion1.Operator = ConditionOperator.Equal;
            condicion1.Values.Add(entidad.Id.ToString());

            ConditionExpression condicion2 = new ConditionExpression();
            condicion2.AttributeName = "atos_terminoems";
            condicion2.Operator = ConditionOperator.Equal;
            condicion2.Values.Add("TE");

            ConditionExpression condicion3 = new ConditionExpression();
            condicion3.AttributeName = "atos_facturacionestimada";
            condicion3.Operator = ConditionOperator.Equal;
            condicion3.Values.Add(false);

            ConditionExpression condicion4 = new ConditionExpression();
            condicion4.AttributeName = "atos_facturacionestimada";
            condicion4.Operator = ConditionOperator.Null;

            FilterExpression filter = new FilterExpression();
            filter.Conditions.Add(condicion1);
            filter.Conditions.Add(condicion2);
            filter.FilterOperator = LogicalOperator.And;

            FilterExpression filter2 = new FilterExpression();
            filter2.Conditions.Add(condicion3);
            filter2.Conditions.Add(condicion4);
            filter2.FilterOperator = LogicalOperator.Or;

            QueryExpression consulta = new QueryExpression("atos_pricingoutput");
            consulta.ColumnSet = new ColumnSet("atos_p1", "atos_p2", "atos_p3", "atos_p4", "atos_p5", "atos_p6");
            consulta.Criteria.AddFilter(filter);
            consulta.Criteria.AddFilter(filter2);
            return servicioConsultas.RetrieveMultiple(consulta);
        }

        private EntityCollection ConsultaHijos(IOrganizationService servicioConsultas, Entity entidad)
        {
            ConditionExpression condicion = new ConditionExpression();
            if (entidad.LogicalName == "atos_oferta")
                condicion.AttributeName = "atos_ofertapadreid";
            else
                condicion.AttributeName = "atos_contratomultipuntoid";
            condicion.Operator = ConditionOperator.Equal;
            condicion.Values.Add(entidad.Id.ToString());

            FilterExpression filter = new FilterExpression();
            filter.Conditions.Add(condicion);
            QueryExpression consulta = new QueryExpression();
            if (entidad.LogicalName == "atos_oferta")
            {
                consulta.EntityName = "atos_oferta";
                consulta.ColumnSet = new ColumnSet("atos_name", "atos_subsistemaid", "atos_tipooferta", "atos_instalacionid", "atos_fechainicio", "atos_fechafin", "atos_tipodeproductofinalid", "atos_tarifaid");
            }
            else
            {
                consulta.EntityName = "atos_contrato";
                consulta.ColumnSet = new ColumnSet("atos_name", "atos_instalacionid");
            }

            consulta.Criteria.AddFilter(filter);
            consulta.AddOrder("atos_lote", OrderType.Descending);
            writelog(rutaDestino + "log_Plugin.txt", "Lanzando consultaHijos " + entidad.Id.ToString() + "\r\n");
            return servicioConsultas.RetrieveMultiple(consulta);
        }

        private Entity CamposCN(IOrganizationService servicioConsultas, Entity oferta)
        {
            ColumnSet colSet = new ColumnSet("atos_name", "atos_contactocomercialid");
            writelog(rutaDestino + "log_Plugin.txt", "Lanzando CamposCN " + oferta.Attributes["atos_cuentanegociadoraid"].ToString() + "\r\n");
            return servicioConsultas.Retrieve("atos_cuentanegociadora", ((EntityReference)oferta.Attributes["atos_cuentanegociadoraid"]).Id, colSet);
        }

        private EntityCollection ListadoPricinInput(IOrganizationService servicioConsultas, Entity entity)
        {
            string fetchXML = "";
            writelog(rutaDestino + "log_Plugin.txt", " entity.LogicalName:" + entity.LogicalName + "\r\n");
            if (entity.LogicalName.Equals("atos_oferta"))
                fetchXML = string.Format(@"<fetch distinct='true' mapping='logical'>" +
                                              "<entity name='atos_pricinginput'>" +
                                                  "<attribute name='atos_fechainicioaplicacion'/>" +
                                                  "<attribute name='atos_fechafinaplicacion'/>" +
                                                  "<attribute name='atos_porcentajeoimporte'/>" +
                                                  "<attribute name='atos_tarifaid'/>" +
                                                  "<attribute name='atos_ofertaid'/>" +
                                                  "<attribute name='atos_p1'/>" +
                                                  "<attribute name='atos_p2'/>" +
                                                  "<attribute name='atos_p3'/>" +
                                                  "<attribute name='atos_p4'/>" +
                                                  "<attribute name='atos_p5'/>" +
                                                  "<attribute name='atos_p6'/>" +
                                                  "<attribute name='atos_p6'/>" +
                                                  "<attribute name='atos_pfijo'/>" +
                                                  "<filter type='and'>" +
                                                     "<condition attribute='atos_cierreofertaid' operator='null'/>" +
                                                     "<filter type='or'>" +
                                                     "<condition attribute='atos_facturacionestimada' operator='eq' value='0' />" +
                                                     "<condition attribute='atos_facturacionestimada' operator='null' />" +
                                                     "</filter>" +
                                                     "<condition attribute='atos_ofertaid' operator='eq' value='{0}'/>" +
                                                  "</filter>" +
                                                  "<link-entity name='atos_terminodepricing' alias='terminoPricing' link-type='outer' " +
                                                   "visible='false' to='atos_terminodepricingid' from='atos_terminodepricingid'>" +
                                                    "<attribute name='atos_denominacionbreve'/>" +
                                                    "<attribute name='atos_name'/>" +
                                                  "</link-entity>" +
                                                 "</entity>" +
                                                 "</fetch>", entity.Id.ToString());
            else
                fetchXML = string.Format(@"<fetch distinct='true' mapping='logical'>" +
                                              "<entity name='atos_pricinginput'>" +
                                                  "<attribute name='atos_fechainicioaplicacion'/>" +
                                                  "<attribute name='atos_fechafinaplicacion'/>" +
                                                  "<attribute name='atos_porcentajeoimporte'/>" +
                                                  "<attribute name='atos_tarifaid'/>" +
                                                  "<attribute name='atos_sistemaelectricoid'/>" +
                                                  "<attribute name='atos_subsistemaid'/>" +
                                                  "<attribute name='atos_p1'/>" +
                                                  "<attribute name='atos_p2'/>" +
                                                  "<attribute name='atos_p3'/>" +
                                                  "<attribute name='atos_p4'/>" +
                                                  "<attribute name='atos_p5'/>" +
                                                  "<attribute name='atos_p6'/>" +
                                                  "<attribute name='atos_pfijo'/>" +
                                                  "<attribute name='atos_ofertaid'/>" +
                                                  "<filter type='and'>" +
                                                     "<filter type='or'>" +
                                                     "<condition attribute='atos_facturacionestimada' operator='eq' value='0' />" +
                                                     "<condition attribute='atos_facturacionestimada' operator='null' />" +
                                                     "</filter>" +
                                                     "<condition attribute='atos_cierreofertaid' operator='eq' value='{0}'/>" +
                                                  "</filter>" +
                                                  "<link-entity name='atos_terminodepricing' alias='terminoPricing' link-type='outer' " +
                                                   "visible='false' to='atos_terminodepricingid' from='atos_terminodepricingid'>" +
                                                    "<attribute name='atos_denominacionbreve'/>" +
                                                    "<attribute name='atos_name'/>" +
                                                  "</link-entity>" +
                                                 "</entity>" +
                                                 "</fetch>", entity.Id.ToString());
            writelog(rutaDestino + "log_Plugin.txt", "fetchExp PricingInputOferta: " + fetchXML + "\r\n");
            var fetchExp = new FetchExpression(fetchXML);
            return servicioConsultas.RetrieveMultiple(fetchExp);
        }

        private EntityCollection CierresSSCC(IOrganizationService servicioConsultas, Entity oferta)
        {
            string fetchXML = string.Format(@"<fetch distinct='true' mapping='logical'>" +
                                                "<entity name='atos_cierreoferta'>" +
                                                    "<attribute name='atos_cierreofertaid'/>" +
                                                    "<attribute name='atos_name'/>" +
                                                    "<attribute name='atos_pricingoutputid'/>" +
                                                    "<attribute name='atos_periododecierre'/>" +
                                                    "<attribute name='atos_costegestioncierre'/>" +
                                                    "<attribute name='atos_numerocierrespermitido'/>" +
                                                    "<attribute name='atos_coeficientedeapuntamiento'/>" +
                                                    "<attribute name='atos_porcentajecierre'/>" +
                                                    "<attribute name='atos_energiacierre'/>" +
                                                    "<attribute name='atos_ofertaid'/>" +
                                                    "<order descending='false' attribute='atos_name'/>" +
                                                    "<filter type='and'>" +
                                                        "<condition attribute='statecode' value='0' operator='eq'/>" +
                                                        "<condition attribute='atos_ofertaid' value='{0}' operator='eq'/>" +
                                                    "</filter>" +
                                                    "<link-entity name='atos_pricingoutput' alias='pricingOut' to='atos_pricingoutputid' from='atos_pricingoutputid'>" +
                                                        "<attribute name='atos_tipo'/>" +
                                                        "<attribute name='atos_terminoems'/>" +
                                                        "<filter type='and'>" +
                                                                "<condition attribute='statecode' value='0' operator='eq'/>" +
                                                                "<filter type='or'>" +
                                                                "<condition attribute='atos_facturacionestimada' operator='eq' value='0' />" +
                                                                "<condition attribute='atos_facturacionestimada' operator='null' />" +
                                                                "</filter>" +
                                                                "<condition attribute='atos_tipo' operator='in'>" +
                                                                    "<value>300000003</value>" + //REE
                                                                    "<value>300000004</value>" + //REE
                                                                    "<value>300000001</value>" + //CNMC
                                                                    "<value>300000002</value>" + //CNMC
                                                                    "<value>300000005</value>" + //OMIE
                                                                    "<value>300000006</value>" + //OMIE
                                                                "</condition>" +
                                                        "</filter>" +
                                                    "</link-entity>" +
                                                    "<link-entity name='atos_oferta' from='atos_ofertaid' to='atos_ofertaid' alias='ofertaCierre'>" +
                                                        "<attribute name='atos_lote'/>" +
                                                    "</link-entity>" +
                                                "</entity>" +
                                                "</fetch>", oferta.Id.ToString());
            writelog(rutaDestino + "log_Plugin.txt", "fetchExp CierresSSCC: " + fetchXML + "\r\n");
            var fetchExp = new FetchExpression(fetchXML);
            return servicioConsultas.RetrieveMultiple(fetchExp);
        }

        Entity TerminoDePricing(IOrganizationService servicioConsultas, Entity cierre)
        {
            string fetchXML = string.Format(@"<fetch mapping='logical'>" +
                                                "<entity name='atos_terminodepricing'>" +
                                                    "<attribute name='atos_denominacionbreve' /> " +
                                                    "<link-entity name='atos_cierreoferta' from='atos_coeficientedeapuntamiento' to='atos_terminodepricingid'>" +
                                                        "<filter type='and'>" +
                                                            "<condition attribute='atos_coeficientedeapuntamiento' operator='eq' value='{0}' />" +
                                                        "</filter>" +
                                                    "</link-entity>" +
                                                "</entity>" +
                                               "</fetch>", ((EntityReference)cierre.Attributes["atos_coeficientedeapuntamiento"]).Id);
            writelog(rutaDestino + "log_Plugin.txt", "fetchExp TerminoDePricing: " + fetchXML + "\r\n");
            var fetchExp = new FetchExpression(fetchXML);
            return servicioConsultas.RetrieveMultiple(fetchExp).Entities[0];
        }

        Entity getOferta(IOrganizationService servicioConsultas, String ofertaid)
        {
            ColumnSet colSet = new ColumnSet("atos_name", "atos_ofertapadreid", "atos_razonsocialid", "atos_cuentanegociadoraid",
                                                 "atos_fechainicio", "atos_fechafin", "atos_tipooferta", "atos_fechafinvigenciaoferta",
                                                 "atos_instalacionid", "atos_agentecomercialid", "atos_tipodeproductofinalid", "atos_gestionatr",
                                                 "atos_penalizacionconsumo", "atos_rangoinferiorpenalizacion", "atos_rangosuperiorpenalizacion", "atos_importepenalizacion",
                                                 "atos_posibilidadrealizarcoberturas", "atos_costegestioncobertura", "atos_lote", "atos_tarifaid", "atos_sistemaelectricoid", "atos_subsistemaid");
            writelog(rutaDestino + "log_Plugin.txt", "Lanzando consultaOferta " + ofertaid + "\r\n");
            return servicioConsultas.Retrieve("atos_oferta", new Guid(ofertaid), colSet);
        }

        Entity SubSistemaElectrico(IOrganizationService servicioConsultas, String ofertaid)
        {
            string fetchXML = string.Format(@"<fetch mapping='logical'>" +
                                                "<entity name='atos_subsistema'>" +
                                                    "<attribute name='atos_name' /> " +
                                                    "<link-entity name='atos_oferta' from='atos_subsistemaid' to='atos_subsistemaid'>" +
                                                    "<filter type='and'>" +
                                                        "<condition attribute='atos_ofertaid' operator='eq' value='{0}' /> " +
                                                    "</filter>" +
                                                    "</link-entity>" +
                                                "</entity>" +
                                              "</fetch>", ofertaid);
            writelog(rutaDestino + "log_Plugin.txt", "fetchExp SubSistemaElectrico: " + fetchXML + "\r\n");
            var fetchExp = new FetchExpression(fetchXML);

            EntityCollection resultados = servicioConsultas.RetrieveMultiple(fetchExp);

            return resultados.Entities[0];/*
            if (resultados.TotalRecordCount > 0)
            {
                
            }
            else
            {
                return null;
            }*/
            
        }

        /*
        Entity SistemaElectrico(IOrganizationService servicioConsultas, String ofertaid)
        {
            string fetchXML = string.Format(@"<fetch mapping='logical'>" +
                                                "<entity name='atos_sistemaelectrico'>" +
                                                    "<attribute name='atos_name' /> " +
                                                    "<link-entity name='atos_oferta' from='atos_sistemaelectricoid' to='atos_sistemaelectricoid'>" +
                                                    "<filter type='and'>" +
                                                        "<condition attribute='atos_ofertaid' operator='eq' value='{0}' /> " +
                                                    "</filter>" +
                                                    "</link-entity>" +
                                                "</entity>" +
                                              "</fetch>", ofertaid);
            writelog(rutaDestino + "log_Plugin.txt", "fetchExp SistemaElectrico: " + fetchXML + "\r\n");
            var fetchExp = new FetchExpression(fetchXML);
            return servicioConsultas.RetrieveMultiple(fetchExp).Entities[0];
        }*/

        /*Entity SistemaElectrico(IOrganizationService servicioConsultas, String ofertaid)
        {
            string fetchXML = string.Format(@"<fetch mapping='logical'>" +
                                                "<entity name='atos_sistemaelectrico'>" +
                                                    "<attribute name='atos_name' /> " +
                                                    "<link-entity name='atos_oferta' from='atos_sistemaelectricoid' to='atos_sistemaelectricoid'>" +
                                                    "<filter type='and'>" +
                                                        "<condition attribute='atos_ofertaid' operator='eq' value='{0}' /> " +
                                                    "</filter>" +
                                                    "</link-entity>" +
                                                "</entity>" +
                                              "</fetch>", ofertaid);
            writelog(rutaDestino + "log_Plugin.txt", "fetchExp SistemaElectrico: " + fetchXML + "\r\n");
            var fetchExp = new FetchExpression(fetchXML);
            return servicioConsultas.RetrieveMultiple(fetchExp).Entities[0];
        }*/

        EntityCollection PricingOutputSinTerminoPricing(IOrganizationService servicioConsultas, Entity oferta)
        {
            string fetchXML = string.Format(@"<fetch mapping='logical'>" +
                                                  "<entity name='atos_pricingoutput'>" +
                                                      "<attribute name='atos_pricingoutputid' />" +
                                                      "<attribute name='atos_terminoems' />" +
                                                      "<attribute name='atos_p6' />" +
                                                      "<attribute name='atos_p5' />" +
                                                      "<attribute name='atos_p4' />" +
                                                      "<attribute name='atos_p3' />" +
                                                      "<attribute name='atos_p2' />" +
                                                      "<attribute name='atos_p1' />" +
                                                      "<attribute name='atos_ofertaid' />" +
                                                      "<order attribute='atos_terminoems' descending='false' />" +
                                                      "<filter type='and'>" +
                                                          "<condition attribute='atos_ofertaid' operator='eq' value='{0}' />" +
                                                          "<condition attribute='statecode' operator='eq' value='0' />" +
                                                          "<filter type='or'>" +
                                                            "<condition attribute='atos_facturacionestimada' operator='eq' value='0' />" +
                                                            "<condition attribute='atos_facturacionestimada' operator='null' />" +
                                                          "</filter>" +
                                                          "<condition attribute='atos_terminodepricingid' operator='null' />" +
                                                      "</filter>" +
                                                  "</entity>" +
                                                  "</fetch>", oferta.Id.ToString());
            writelog(rutaDestino + "log_Plugin.txt", "fetchExp PricingOutputSinTerminoPricing: " + fetchXML + "\r\n");
            var fetchExp = new FetchExpression(fetchXML);
            return servicioConsultas.RetrieveMultiple(fetchExp);
        }
        #endregion

        #region Ficheros
        public void MoveryEliminarFichero(String fichero)
        {
            writelog(rutaDestino + "log_Plugin.txt", "MoveryEliminarFichero \r\n");
            string sourceFileExcel = rutaTempServidor + fichero + ".xlsx";
            string destinationFileExcel = rutaDestino + fichero + ".xlsx";
            // To move a file or folder to a new location:
            System.IO.File.Move(sourceFileExcel, destinationFileExcel);
            // Delete a file by using File class static method... 
            if (System.IO.File.Exists(sourceFileExcel))
            {
                try
                {
                    System.IO.File.Delete(sourceFileExcel);
                }
                catch (System.IO.IOException e)
                {
                    writelog(rutaDestino + "log_Plugin.txt", "Error al eliminar el fichero excel de origen." + e.Message + "\r\n");
                    return;
                }
            }
        }
        #endregion

        #region Utilidades
        ///     llenar(contrato, "atos_fechafirmacontrato", hoja, 38, 11, D);
        private void llenar(Entity entidad, string campo, ClosedXML.Excel.IXLWorksheet hoja, int fila, int columna, string tipo = "s")
        {
            // writelog(rutaDestino + "log_Plugin.txt", entidad.Attributes[campo].ToString() + "-->" + entidad.Attributes[campo].GetType() + "\r\n");

            if (entidad.Attributes.Contains(campo))
            {
                if (tipo == "EntityReference")
                {
                    hoja.Cell(fila, columna).Value = ((EntityReference)entidad.Attributes[campo]).Name;
                }
                else if (tipo == "Date")
                {
                    string pattern = "dd-MM-yyyy";
                    string fecha = Convert.ToDateTime(entidad.Attributes[campo]).ToString(pattern);
                    string diaIng = Convert.ToDateTime(entidad.Attributes[campo]).DayOfWeek.ToString();
                    string dia = "";
                    switch (diaIng)
                    {
                        case ("Monday"): { dia = "Lunes"; break; }
                        case ("Tuesday"): { dia = "Martes"; break; }
                        case ("Wednesday"): { dia = "Miércoles"; break; }
                        case ("Thursday"): { dia = "Jueves"; break; }
                        case ("Friday"): { dia = "Viernes"; break; }
                        case ("Saturday"): { dia = "Sábado"; break; }
                        case ("Sunday"): { dia = "Domingo"; break; }
                    }
                    writelog(rutaDestino + "log_Plugin.txt", dia + ", " + fecha + " \r\n");

                    hoja.Cell(fila, columna).Value = dia + ", " + fecha;

                }
                else if (tipo == "s")
                {
                    hoja.Cell(fila, columna).Value = entidad.Attributes[campo].ToString();

                }
                else if (tipo == "INF_DES_TE")
                {
                    double aux = 100 * Convert.ToDouble(entidad.Attributes[campo]);
                    //double aux =  Convert.ToDouble(entidad.Attributes[campo]);
                    //hoja.Cell(fila, columna).Style.NumberFormat.SetFormat("#,#");
                    hoja.Cell(fila, columna).Value = aux;//.ToString().Replace('.',','); //.ToString("F", CultureInfo.CreateSpecificCulture("es-ES"));

                }
                else
                {
                    hoja.Cell(fila, columna).Value = "";

                }
            }
            else
            {
                hoja.Cell(fila, columna).Value = "";

            }

            if (hoja.Name == "1.Cabecera")
                hoja.Cell(fila, columna).Style.Alignment.Horizontal = ClosedXML.Excel.XLAlignmentHorizontalValues.Justify;



        }

        private void MergeSpreadsheets(string destino, ClosedXML.Excel.XLWorkbook libro)
        {
            writelog(rutaDestino + "log_Plugin.txt", "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%" + "\n\r");
            //ClosedXML.Excel.XLWorkbook libro = new ClosedXML.Excel.XLWorkbook(destino + ".xlsx");
            writelog(rutaDestino + "log_Plugin.txt", "Juntando hojas");
            int numHojas = libro.Worksheets.Count();    //writelog(rutaDestino + "log_Plugin.txt", numHojas + "\n\r");
            string[] listaHojas = new string[numHojas + 1];

            for (int i = 1; i < numHojas + 1; i++)
            {
                listaHojas[i] = libro.Worksheet(i).Name.ToString();
                writelog(rutaDestino + "log_Plugin.txt", i + "-- " + listaHojas[i] + "\n\r");
            }

            //var hojaMadre = libro.Worksheets.Add("Salida");
            var hojaMadre = libro.Worksheet("1.Cabecera");
            int filaFinal = hojaMadre.LastRowUsed().RowNumber() + 2;
            int numColHoja = 0, numFilasHoja = 0;

            for (int i = 2; i < numHojas + 1; i++)
            {
                var hoja = libro.Worksheet(listaHojas[i]);

                numFilasHoja = hoja.LastRowUsed().RowNumber(); ;

                if (hoja.LastRowUsed().IsMerged())
                {
                    numFilasHoja = FilasCombinadas(hoja, numFilasHoja);
                }

                writelog(rutaDestino + "log_Plugin.txt", "Filas: " + hoja.LastRowUsed().IsMerged() + numFilasHoja + "-- Columnas: " + numColHoja + "-- Nombrehoja: " + listaHojas[i] + "\r");

                foreach (ClosedXML.Excel.IXLRange r in hoja.MergedRanges) //Cojo los rangos combinados de la hoja de partida
                {
                    //filaFinal++; //Meto una línea entre medias
                    //Busco las casillas que se corresponderían con las de la hoja de inicio en nuestra hojaMadre
                    ClosedXML.Excel.IXLCell Ini = hojaMadre.Cell(r.FirstRow().RowNumber() + filaFinal, r.FirstColumn().ColumnNumber());
                    ClosedXML.Excel.IXLCell Fin = hojaMadre.Cell(r.LastRow().RowNumber() + filaFinal, r.LastColumn().ColumnNumber());
                    hojaMadre.Range(Ini, Fin).Merge(false); //Las combino sin intersección de filas
                    //Cuando tienes varias filas a combinar, si no le pones el "false" solo combina la fila central
                    writelog(rutaDestino + "log_Plugin.txt", "Rango en la hoja de Datos: " + r.RangeAddress + " // Rango que combinar: " + Ini.Address + "--" + Fin.Address + "\r");

                    if ((r.LastColumn().ColumnNumber()) > numColHoja) //actualizo la última columna, para recorrer toda la hoja
                    {
                        numColHoja = r.LastColumn().ColumnNumber();

                    }

                }

                //Recorro la hoja para pasar los valores
                for (int j = 1; j < numFilasHoja + 1; j++)
                { //Filas
                    for (int k = 1; k < numColHoja + 1; k++)
                    { //Columnas
                        hojaMadre.Cell(filaFinal + 1, k).Value = hoja.Cell(j, k); //Copio el valor de la celda
                        //Controlo el formato de la celda
                        hojaMadre.Cell(filaFinal + 1, k);

                        if (hoja.Name == "Punto 6")
                        {
                            ClosedXML.Excel.XLChart a = new XLChart((XLWorksheet)hoja);
                            a.ChartType = XLChartType.Cylinder;
                            a.Position.SetRow(j);
                            a.Position.SetColumn(k);


                        }

                    }

                    filaFinal++;
                }



                writelog(rutaDestino + "log_Plugin.txt", "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%" + "\n\r");
            }

            libro.SaveAs(destino + ".xlsx");
        }


        private int FilasCombinadas(ClosedXML.Excel.IXLWorksheet hoja, int filaFin)
        {
            if (hoja.Row(filaFin).IsMerged())
                return FilasCombinadas(hoja, filaFin + 1);
            else
            {
                writelog(rutaDestino + "log_Plugin.txt", "FilaFinMetodo" + filaFin + "\n\r");
                return filaFin;
            }
        }


        private void writelog(String fichero, String texto)
        {
            tracingService.Trace(texto);
            if (_log == true)
                System.IO.File.AppendAllText(fichero, texto + "\n");
        }
        #endregion


    }
}