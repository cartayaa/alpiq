// <copyright file="Plugin.cs" company="Licence Owner">
// Copyright (c) 2015 All Rights Reserved
// </copyright>
// <author>Licence Owner</author>
// <date>9/17/2015 5:33:55 PM</date>
// <summary>Implements the Plugin Workflow Activity.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
namespace CierreOfertaCoefApun
{
    using System;
    using System.Collections.ObjectModel;
    using System.Globalization;
    using System.Linq;
    using System.ServiceModel;
    using Microsoft.Xrm.Sdk;
    using Microsoft.Xrm.Sdk.Query;
    using TermPricing;
    using System.Collections.Generic;
    using System.Xml;
    /// <summary>
    /// Base class for all Plugins.
    /// </summary>    
    public class CierreOferta : IPlugin
    {
        private IOrganizationService OrganizationService;
        private ITracingService TracingService;
        private IPluginExecutionContext PluginExecutionContext;

        private CommonWS.Log Log = null;
        private bool _log = false;

        //private String ficherolog = "D:\\Tmp\\TermPricing.txt";
        //private const Char SEPARADOR = '#';*/

        public CierreOferta(String unsecureconfiguration, String secureconfiguration)
        {
            Log = new CommonWS.Log();
            String parametros = "";
            if (secureconfiguration != "" && secureconfiguration != null)
                parametros = secureconfiguration;
            else if (unsecureconfiguration != "" && unsecureconfiguration != null)
                parametros = unsecureconfiguration;


            if (parametros != "")
            {
                XmlDocument res = new XmlDocument();

                res.LoadXml(parametros);


                if (res.GetElementsByTagName("log").Count > 0)
                {
                    XmlNode logxml = res.GetElementsByTagName("log")[0];
                    bool _log = Convert.ToBoolean(logxml.Attributes["escribirlog"].Value);
                    String urlwslog = logxml.Attributes["urlwslog"].Value;
                    String ficherolog = logxml.Attributes["ficherolog"].Value;
                    String subcarpetalog = logxml.Attributes["subcarpetalog"].Value;
                    Log.setLog(_log, urlwslog, subcarpetalog, ficherolog, null);

                }
            }

        }

        /*public CierreOferta(String parametros)
        {

            if (String.IsNullOrEmpty(parametros) == false)
            {
                String[] arrayPar = parametros.Split(SEPARADOR);
                if (arrayPar.Length > 0)
                {

                    if (arrayPar[0] == "LOG")
                        _log = true;
                    if (arrayPar.Length > 1)
                    {
                        ficherolog = arrayPar[1];
                        if (ficherolog == "")
                            _log = false;
                    }
                }
            }
        }
        */

        private void writelog(String texto, bool _traza = false)
        {
            Log.writelog(texto, _traza);
            /*if (_traza)
                TracingService.Trace(texto);
            if (_log == true)
                System.IO.File.AppendAllText(ficherolog, texto + "\r\n");*/
        }

        private void deletepricinginput(Guid cierreofertaid)
        {
            writelog("Borra Pricing Input");

            writelog("Id recibido " + cierreofertaid.ToString());
            QueryExpression _consulta = new QueryExpression("atos_pricinginput");

            FilterExpression _filtro = new FilterExpression();
            _filtro.FilterOperator = LogicalOperator.And;
            writelog("New ConditionExpression");
            ConditionExpression _condicion = new ConditionExpression();
            writelog("AttributeName atos_cierreofertaid");
            _condicion.AttributeName = "atos_cierreofertaid";
            _condicion.Operator = ConditionOperator.Equal;
            writelog("Values.Add(cierreofertaid.ToString()");
            _condicion.Values.Add(cierreofertaid.ToString());
            writelog("Id Cierre Oferta " + cierreofertaid.ToString());
            _filtro.Conditions.Add(_condicion);

            _consulta.Criteria.AddFilter(_filtro);

            _consulta.ColumnSet.AddColumns("atos_pricinginputid");


            EntityCollection _resultado = OrganizationService.RetrieveMultiple(_consulta);

            for (int i = 0; i < _resultado.Entities.Count; i++)
            {
                Guid _pricinginputid = _resultado.Entities[i].Id;
                OrganizationService.Delete("atos_pricinginput", _pricinginputid);
            }
            writelog("Borra Pricing Input Final");
        }


		private void creaPricingInput(Entity pricingInputbase, ref List<Componente> componentes, Entity cierreOferta, Entity oferta)
		{
			Entity _pricingInput = new Entity("atos_pricinginput");

			if (pricingInputbase.Attributes.Contains("atos_porcentajeoimporte"))
				_pricingInput.Attributes["atos_porcentajeoimporte"] = pricingInputbase.Attributes["atos_porcentajeoimporte"];
			if (pricingInputbase.Attributes.Contains("atos_pfijo"))
				_pricingInput.Attributes["atos_pfijo"] = pricingInputbase.Attributes["atos_pfijo"];
			if (pricingInputbase.Attributes.Contains("atos_p1"))
				_pricingInput.Attributes["atos_p1"] = pricingInputbase.Attributes["atos_p1"];
			if (pricingInputbase.Attributes.Contains("atos_p2"))
				_pricingInput.Attributes["atos_p2"] = pricingInputbase.Attributes["atos_p2"];
			if (pricingInputbase.Attributes.Contains("atos_p3"))
				_pricingInput.Attributes["atos_p3"] = pricingInputbase.Attributes["atos_p3"];
			if (pricingInputbase.Attributes.Contains("atos_p4"))
				_pricingInput.Attributes["atos_p4"] = pricingInputbase.Attributes["atos_p4"];
			if (pricingInputbase.Attributes.Contains("atos_p5"))
				_pricingInput.Attributes["atos_p5"] = pricingInputbase.Attributes["atos_p5"];
			if (pricingInputbase.Attributes.Contains("atos_p6"))
				_pricingInput.Attributes["atos_p6"] = pricingInputbase.Attributes["atos_p6"];
			if (pricingInputbase.Attributes.Contains("atos_tipo"))
				_pricingInput.Attributes["atos_tipo"] = pricingInputbase.Attributes["atos_tipo"];

			if (pricingInputbase.Attributes.Contains("atos_fechainiciovigencia"))
				_pricingInput.Attributes["atos_fechainiciovigencia"] = pricingInputbase.Attributes["atos_fechainiciovigencia"];
			else if (oferta.Attributes.Contains("createdon"))
				_pricingInput.Attributes["atos_fechainiciovigencia"] = oferta.Attributes["createdon"];

			if (pricingInputbase.Attributes.Contains("atos_fechainicioaplicacion"))
				_pricingInput.Attributes["atos_fechainicioaplicacion"] = pricingInputbase.Attributes["atos_fechainicioaplicacion"];

			//Se deja como fecha fin de vigencia la fecha fin de vigencia del pricing input que encuentre o el 1/01/4000 si no encuentra (no se toma la fecha de fin de la oferta por los contratos a pasado).
			//if (_oferta.Attributes.Contains("atos_fechafin"))
			//    _pricingInput.Attributes["atos_fechafinvigencia"] = _oferta.Attributes["atos_fechafin"];

			if (pricingInputbase.Attributes.Contains("atos_fechafinvigencia"))
				_pricingInput.Attributes["atos_fechafinvigencia"] = pricingInputbase.Attributes["atos_fechafinvigencia"];

			if (pricingInputbase.Attributes.Contains("atos_fechafinaplicacion"))
				_pricingInput.Attributes["atos_fechafinaplicacion"] = pricingInputbase.Attributes["atos_fechafinaplicacion"];

			if (((TermPricing)componentes[0]).DependeDeSistemaElectrico == true)
				_pricingInput.Attributes["atos_sistemaelectricoid"] = new EntityReference("atos_sistemaelectrico", ((EntityReference)oferta.Attributes["atos_sistemaelectricoid"]).Id);

            if (((TermPricing)componentes[0]).DependeDeSubSistemaElectrico == true)
                _pricingInput.Attributes["atos_subsistemaid"] = new EntityReference("atos_subsistema", ((EntityReference)oferta.Attributes["atos_subsistemaid"]).Id);


            if (((TermPricing)componentes[0]).DependeDeTarifa == true)
				_pricingInput.Attributes["atos_tarifaid"] = new EntityReference("atos_tarifa", ((EntityReference)oferta.Attributes["atos_tarifaid"]).Id);

            if (((TermPricing)componentes[0]).DependeDePeaje == true)
                _pricingInput.Attributes["atos_peajeid"] = new EntityReference("atos_tablasatrgas", ((EntityReference)oferta.Attributes["atos_peajeid"]).Id);
            //_pricingInput.Attributes["atos_peajeid"] = new EntityReference("atos_peajeid", ((EntityReference)oferta.Attributes["atos_peajeid"]).Id);


            writelog("Asocia pricinginput a oferta");
			_pricingInput.Attributes["atos_ofertaid"] = new EntityReference("atos_oferta", oferta.Id);
			_pricingInput.Id = Guid.NewGuid();
			writelog("Asocia pricinginput a terminodepricing");
			_pricingInput.Attributes["atos_terminodepricingid"] = new EntityReference("atos_terminodepricing", ((TermPricing)componentes[0]).TermpricingId);
			writelog("Actualiza nombre de pricinginput");

            if (pricingInputbase.Attributes.Contains("atos_name"))
                _pricingInput.Attributes["atos_name"] = pricingInputbase.Attributes["atos_name"];

			//if (((TermPricing)componentes[0]).NombreEms != "")
			//	_pricingInput.Attributes["atos_name"] = ((TermPricing)componentes[0]).NombreEms + "-";
			//else
			//	_pricingInput.Attributes["atos_name"] = componentes[0].NombreComponente + "-";
            //_pricingInput.Attributes["atos_name"] += cierreOferta.Attributes["atos_name"].ToString() + "-1";

            _pricingInput.Attributes["atos_cierreofertaid"] = new EntityReference("atos_cierreoferta", cierreOferta.Id);

            _pricingInput.Attributes["atos_facturacionestimada"] = false;

			//writelog("Pricing Input Name: " + _pricingInput.Attributes["atos_name"].ToString());

			writelog("Antes de Create pricingInput");
			OrganizationService.Create(_pricingInput);
			writelog("Después de Create pricingInput");	
		}


        /// <summary>
        /// Executes the plug-in.
        /// </summary>
        /// <param name="serviceProvider">The service provider.</param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics CRM caches plug-in instances. 
        /// The plug-in's Execute method should be written to be stateless as the constructor 
        /// is not called for every invocation of the plug-in. Also, multiple system threads 
        /// could execute the plug-in at the same time. All per invocation state information 
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        public void Execute(IServiceProvider serviceProvider)
        {

            // Obtain the execution context service from the service provider.
            this.PluginExecutionContext = (IPluginExecutionContext)serviceProvider.GetService(typeof(IPluginExecutionContext));

            // Obtain the tracing service from the service provider.
            this.TracingService = (ITracingService)serviceProvider.GetService(typeof(ITracingService));

            // Obtain the Organization Service factory service from the service provider
            IOrganizationServiceFactory factory = (IOrganizationServiceFactory)serviceProvider.GetService(typeof(IOrganizationServiceFactory));

            // Use the factory to generate the Organization Service.
            this.OrganizationService = factory.CreateOrganizationService(this.PluginExecutionContext.UserId);

            if (PluginExecutionContext.MessageName != "Create" && PluginExecutionContext.MessageName != "Update")
                return;
            Entity _ef = (Entity)PluginExecutionContext.InputParameters["Target"];
            if (_ef.LogicalName != "atos_cierreoferta")
                return;

            writelog("Plugin CierreOfertaCoefApun " + PluginExecutionContext.MessageName + " " + _ef.LogicalName);
            if (_ef.Attributes.Contains("atos_coeficientedeapuntamiento") == false)
                return;
            Entity _cierreoferta;
            if (PluginExecutionContext.MessageName == "Update" && _ef.Attributes.Contains("atos_name") == false)
            {
                _cierreoferta = (Entity)PluginExecutionContext.PostEntityImages["PostImage"];
                //_cierreoferta = OrganizationService.Retrieve("atos_cierreoferta", _ef.Id, new ColumnSet(new String[] { "atos_name" }));
                //_cierreoferta.Attributes["atos_coeficientedeapuntamiento"] = _ef.Attributes["atos_coeficientedeapuntamiento"];
            }
            else
                _cierreoferta = _ef;

            // En creación no llega el nombre
            //if (_cierreoferta.Attributes.Contains("atos_name") == false)
            //    return;

            // Borra los pricing input del cierre
            writelog("Id del cierre oferta " + _ef.Id.ToString());
            deletepricinginput(_ef.Id);

            // Crea los pricing input del cierre
            List<Componente> _componentes = new List<Componente>();
            writelog("Buscando termino de pricing");
            Entity _coeficienteapuntamiento = OrganizationService.Retrieve("atos_terminodepricing", ((EntityReference)_cierreoferta.Attributes["atos_coeficientedeapuntamiento"]).Id, new ColumnSet(new String[] { "atos_denominacionbreve" }));
            if (_coeficienteapuntamiento.Attributes.Contains("atos_denominacionbreve") == false)
                writelog("No existe atos_denominacionbreve");
            else
                writelog("Encontrado atos_denominacionbreve");
            _componentes.Add(new TermPricing(_coeficienteapuntamiento.Attributes["atos_denominacionbreve"].ToString(), OrganizationService));

            writelog("Buscando oferta");
            if (_cierreoferta.Attributes.Contains("atos_ofertaid") == false)
                writelog("Cierre no tiene atos_ofertaid");
            else
                writelog("La oferta del cierre es " + ((EntityReference) _cierreoferta.Attributes["atos_ofertaid"]).Id);
            Entity _oferta = OrganizationService.Retrieve("atos_oferta", ((EntityReference)_cierreoferta.Attributes["atos_ofertaid"]).Id, new ColumnSet(true)); //new String[] { "atos_name", "atos_fechainicio", "atos_fechafin", "atos_tarifaid", "atos_sistemaelectricoid", "createdon" }));

            //PricingInput _pricingInput = new PricingInput(OrganizationService, TracingService, _log, ficherolog);
            PricingInput _pricingInput = new PricingInput(OrganizationService, Log);
            writelog("Objeto PricingInput");
            EntityCollection _pricingInputs = _pricingInput.coleccion(ref _componentes, 0, _oferta, _oferta);
            writelog("Encontrados " + _pricingInputs.Entities.Count.ToString());
            for (int i = 0; i < _pricingInputs.Entities.Count; i++)
            {
                Entity _pricingInputBase = _pricingInputs.Entities[i];
                creaPricingInput(_pricingInputBase, ref _componentes, _cierreoferta, _oferta);
            }
            writelog("Fin del plugin");
            writelog("==============");
        }
    }
}