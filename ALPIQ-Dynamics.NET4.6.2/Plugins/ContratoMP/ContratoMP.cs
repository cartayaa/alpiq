// <copyright file="Plugin.cs" company="Licence Owner">
// Copyright (c) 2015 All Rights Reserved
// </copyright>
// <author>Licence Owner</author>
// <date>6/10/2015 4:56:58 PM</date>
// <summary>Implements the Plugin Workflow Activity.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
namespace ContratoMP
{
    using System;
    using System.Collections.ObjectModel;
    using System.Globalization;
    using System.Linq;
    using System.ServiceModel;
    using Microsoft.Xrm.Sdk;
    using Microsoft.Xrm.Sdk.Query;

    /// <summary>
    /// Base class for all Plugins.
    /// </summary>    
    public class ContratoMP : IPlugin
    {
        
        private ITracingService tracingService;
        private IPluginExecutionContext PluginExecutionContext; ///< Contexto de ejecución del plugin
        private IOrganizationServiceFactory factory;
        private IOrganizationService service;
        
        private bool _log = false; ///< Indica si se activa o no el log. Esta variable debe inicializarse según el parámetro recibido en el constructor.
        private String ficherolog = "C:\\Users\\log_ActualizarEnCascada.txt";  ///< Fichero de log. Esta variable debe inicializarse según el parámetro recibido en el constructor.
        private const Char SEPARADOR = '#'; ///< Constante para el separador a usar en el parámetro que recibe el constructor

        /**
		// <summary>
		// Constructor de la clase
		// </summary>
        // <param name="parametros">Cadena en la que se indica si se escribe log y donde: LOG#C:\\RutaDelLog\\Fichero.log</param>
		// <remarks>
		// Recibe una cadena de texto incluyendo los parámetros (separados por el carácter #)
		// - El primer parámetro activa/desactiva la escritura del fichero log (LOG activa)
		// - El segundo parámetro es el nombre (incluyendo ruta) del fichero de log.
		// </remarks>
         */
        public ContratoMP(String parametros)
        {
            if (String.IsNullOrEmpty(parametros) == false)
            {
                String[] arrayPar = parametros.Split(SEPARADOR);
                if (arrayPar.Length > 0)
                {

                    if (arrayPar[0] == "LOG")
                        _log = true;
                    if (arrayPar.Length > 1)
                        ficherolog = arrayPar[1];
                }
            }
        }


        /**
        // <summary>
        // Función privada para escribir una traza
        // </summary>
        // <param name="texto">Texto a escribir en el fichero de log</param>
        // <remarks>
        // Si el log está activado escribe el mensaje en el fichero de log.
        // </remarks>
         */
        private void writelog(String texto)
        {
            tracingService.Trace(texto);
            if (_log == true)
                System.IO.File.AppendAllText(ficherolog, texto + "\r\n");
        }

/*----------------------------*/
/* Crea Pricing Output        */
/*----------------------------*/

        private void copiaPricingOutput(Guid contratoId, Entity oferta)
        {
            Entity _contrato = service.Retrieve("atos_contrato", contratoId, new ColumnSet(new String[] { "atos_name" }));
            if (_contrato.Attributes.Contains("atos_name"))
                writelog("copiaPricingOutput para " + _contrato.Attributes["atos_name"].ToString() + " desde " + oferta.Attributes["atos_name"].ToString());
            else
                writelog("copiaPrigingOutput no tiene valor atos_name para el contrato");
            QueryExpression _consulta = new QueryExpression("atos_pricingoutput");
            _consulta.ColumnSet = new ColumnSet(true); /*new String[] { "atos_ofertaid", "atos_name", "atos_tipooferta", "atos_fechainicio", "atos_tipodeproductofinalid",
                                                               "atos_fechafin", "atos_gestionatr", "atos_razonsocialid", "atos_cuentanegociadoraid", 
                                                               "atos_tarifaid", "atos_sistemaelectricoid", "atos_agentecomercialid", "atos_lote", 
                                                               "atos_numerodocumento", "atos_penalizacionconsumo", "atos_importepenalizacion", 
                                                               "atos_rangoinferiorpenalizacion", "atos_rangosuperiorpenalizacion", "atos_bonificacionconsumo", 
                                                               "atos_importebonificacion", "atos_rangoinferiorbonificacion", "atos_rangosuperiorbonificacion", 
                                                               "atos_precioincluyegestionatr", "atos_precioincluyeimpuestoelectrico", "atos_precisiondecimalesoferta", 
                                                               "atos_beneficioestimadooferta", "atos_facturacionestimadaoferta", "atos_condicionpagoid", 
                                                               "atos_unidadprecioinforme", "atos_instalacionid", "atos_precisiondecimalesoferta" });*/

            FilterExpression _filtro = new FilterExpression();
            _filtro.FilterOperator = LogicalOperator.And;
            ConditionExpression _condicion = new ConditionExpression();
            _condicion.AttributeName = "atos_ofertaid";
            _condicion.Operator = ConditionOperator.Equal;
            _condicion.Values.Add(oferta.Id.ToString());
            _filtro.Conditions.Add(_condicion);

            _condicion = new ConditionExpression();
            _condicion.AttributeName = "statecode";
            _condicion.Operator = ConditionOperator.Equal;
            _condicion.Values.Add(0);
            _filtro.Conditions.Add(_condicion);
            _consulta.Criteria.AddFilter(_filtro);

            EntityCollection _resPricingOutput = service.RetrieveMultiple(_consulta);
            for (int i = 0; i < _resPricingOutput.Entities.Count; i++)
            {
                Entity _pOutput = _resPricingOutput.Entities[i];
                _pOutput.Attributes.Remove("atos_pricingoutputid");
                _pOutput.Attributes.Remove("atos_ofertaid");
                _pOutput.Attributes["atos_contratoid"] = new EntityReference("atos_contrato", contratoId);
                writelog("Antes de NewGuid");
                _pOutput.Id = Guid.NewGuid();

                if (_contrato.Attributes.Contains("atos_name") && !_pOutput.Attributes.Contains("atos_name"))
                    _pOutput.Attributes["atos_name"] = _pOutput.Attributes["atos_terminoems"].ToString() + "-" +
                        _contrato.Attributes["atos_name"].ToString() + "-" + (i+1).ToString();
                writelog("copiaPricingOutput antes Create " + _pOutput.Attributes["atos_name"].ToString());
                service.Create(_pOutput);
                writelog("copiaPricingOutput Despues Create");
            }
        }

/*----------------------------*/
/* Crea Contratos             */
/*----------------------------*/
        private Guid creaContrato(Entity contratoPadre, Entity oferta)
        {
            writelog("Función creaContrato");
            Entity _contrato = new Entity("atos_contrato");

            _contrato.Attributes["atos_contratomultipuntoid"] = new EntityReference("atos_contrato", contratoPadre.Id);
            _contrato.Attributes["atos_ofertaid"] = new EntityReference("atos_oferta", oferta.Id);

            if (oferta.Attributes.Contains("atos_name"))
                writelog("Contrato asociado a la oferta: " + oferta.Attributes["atos_name"].ToString());
            if (oferta.Attributes.Contains("atos_razonsocialid"))
            {
                writelog("atos_razonsocialid");
                _contrato.Attributes["atos_razonsocialid"] = new EntityReference("account", ((EntityReference)oferta.Attributes["atos_razonsocialid"]).Id);
                Entity _razonsocial = service.Retrieve("account", ((EntityReference)oferta.Attributes["atos_razonsocialid"]).Id, new ColumnSet("atos_numerodedocumento", "atos_grupoempresarialid"));
                if (_razonsocial.Attributes.Contains("atos_numerodedocumento"))
                    _contrato.Attributes["atos_numerodocumento"] = _razonsocial.Attributes["atos_numerodedocumento"];
                if (_razonsocial.Attributes.Contains("atos_grupoempresarialid"))
                    _contrato.Attributes["atos_grupoempresarialid"] = new EntityReference("atos_grupoempresarial", ((EntityReference)_razonsocial.Attributes["atos_grupoempresarialid"]).Id);
            }

            if (oferta.Attributes.Contains("atos_cuentanegociadoraid"))
            {
                writelog("atos_cuentanegociadoraid");
                _contrato.Attributes["atos_cuentanegociadoraid"] = new EntityReference("atos_cuentanegociadora", ((EntityReference)oferta.Attributes["atos_cuentanegociadoraid"]).Id);
            }


            if (oferta.Attributes.Contains("atos_instalacionid") || oferta.Attributes.Contains("atos_instalaciongasid"))
            {
                Entity _instalacion;
                if (oferta.Attributes.Contains("atos_instalacionid"))
                {
                    writelog("atos_instalacionid:" + ((EntityReference)oferta.Attributes["atos_instalacionid"]).Id.ToString());
                    _contrato.Attributes["atos_instalacionid"] = new EntityReference("atos_instalacion", ((EntityReference)oferta.Attributes["atos_instalacionid"]).Id);
                    _instalacion = service.Retrieve("atos_instalacion", ((EntityReference)oferta.Attributes["atos_instalacionid"]).Id,
                        new ColumnSet("atos_cups20", "atos_consultoraid", "atos_contactocomercialid",
                                       "atos_canal", "atos_agentecomercialid", "atos_fechaasignacionagente", "atos_agentefacturacionid", "atos_fechaasignacionagentefacturacion",
                                       "atos_tipopropiedadaparatoid", "atos_importealquilerequipo", "atos_modolecturapuntomedidaid"));
                }
                else
                {
                    writelog("atos_instalaciongasid:" + ((EntityReference)oferta.Attributes["atos_instalaciongasid"]).Id.ToString());
                    _contrato.Attributes["atos_instalaciongasid"] = new EntityReference("atos_instalaciongas", ((EntityReference)oferta.Attributes["atos_instalaciongasid"]).Id);
                    _instalacion = service.Retrieve("atos_instalaciongas", ((EntityReference)oferta.Attributes["atos_instalaciongasid"]).Id,
                        new ColumnSet("atos_cups20", "atos_consultoraid", "atos_contactocomercialid",
                                       "atos_canal", "atos_agentecomercialid", "atos_fechaasignacionagente", "atos_agentefacturacionid", "atos_fechaasignacionagentefacturacion",
                                        "atos_fechainiciovigenciapeaje"));
                }

               
                if (_instalacion.Attributes.Contains("atos_fechainiciovigenciapeaje"))
                {
                    writelog("fechainiciovigenciapeaje: " + _instalacion.Attributes["atos_fechainiciovigenciapeaje"].ToString());
                    _contrato.Attributes["atos_fechainiciovigenciapeaje"] = _instalacion.Attributes["atos_fechainiciovigenciapeaje"];
                }

                if (_instalacion.Attributes.Contains("atos_cups20"))
                {
                    writelog("CUPS: " + _instalacion.Attributes["atos_cups20"].ToString());
                    _contrato.Attributes["atos_cups"] = _instalacion.Attributes["atos_cups20"];
                }

                if (_instalacion.Attributes.Contains("atos_consultoraid"))
                {
                    writelog("consultora: " + _instalacion.Attributes["atos_consultoraid"].ToString());
                    _contrato.Attributes["atos_consultoraid"] = _instalacion.Attributes["atos_consultoraid"];
                }
                //INFORMACION COMERCIAL
                // contacto comercial
                if (_instalacion.Attributes.Contains("atos_contactocomercialid"))
                {
                    writelog("contacto comercial: " + ((EntityReference)_instalacion.Attributes["atos_contactocomercialid"]).Id.ToString());
                    _contrato.Attributes["atos_contactocomercialid"] = _instalacion.Attributes["atos_contactocomercialid"];
                }
                //canal
                if (_instalacion.Attributes.Contains("atos_canal"))
                {
                    writelog("canal: " + ((OptionSetValue)_instalacion.Attributes["atos_canal"]).Value.ToString());
                    _contrato.Attributes["atos_canal"] = new OptionSetValue(((OptionSetValue)_instalacion.Attributes["atos_canal"]).Value); 
                }
                // agente comercial
                if (_instalacion.Attributes.Contains("atos_agentecomercialid"))
                {
                    writelog("agente comercial: " + ((EntityReference)_instalacion.Attributes["atos_agentecomercialid"]).Id.ToString());
                    _contrato.Attributes["atos_agentecomercialid"] = _instalacion.Attributes["atos_agentecomercialid"];
                }
                // fecha asignacion agente
                if (_instalacion.Attributes.Contains("atos_fechaasignacionagente"))
                {
                    writelog("fecha asignacion agente comercial: " + _instalacion.Attributes["atos_fechaasignacionagente"].ToString());
                    _contrato.Attributes["atos_fechaasignacionagente"] = _instalacion.Attributes["atos_fechaasignacionagente"];
                }
                // agente facturacion
                if (_instalacion.Attributes.Contains("atos_agentefacturacionid"))
                {
                    writelog("agente facturacion: " + ((EntityReference)_instalacion.Attributes["atos_agentefacturacionid"]).Id.ToString());
                    _contrato.Attributes["atos_agentefacturacionid"] = _instalacion.Attributes["atos_agentefacturacionid"];
                }
                // fecha asignacion agente de facturacion
                if (_instalacion.Attributes.Contains("atos_fechaasignacionagentefacturacion"))
                {
                    writelog("fecha asignacion agente facturacion: " + _instalacion.Attributes["atos_fechaasignacionagentefacturacion"].ToString());
                    _contrato.Attributes["atos_fechaasignacionagentefacturacion"] = _instalacion.Attributes["atos_fechaasignacionagentefacturacion"];
                }

                //PUNTOS DE MEDIDA
                // tipo propiedad aparato
                if (_instalacion.Attributes.Contains("atos_tipopropiedadaparatoid"))
                {
                    writelog("tipo propiedad aparato: " + ((EntityReference)_instalacion.Attributes["atos_tipopropiedadaparatoid"]).Id.ToString());
                    _contrato.Attributes["atos_tipopropiedadaparatoid"] = _instalacion.Attributes["atos_tipopropiedadaparatoid"];
                }
                // importe alquiler
                if (_instalacion.Attributes.Contains("atos_importealquilerequipo"))
                {
                    writelog("importe alquiler equipo (PM): " + ((Money)_instalacion.Attributes["atos_importealquilerequipo"]).Value);
                    _contrato.Attributes["atos_importealquilerequipo"] = _instalacion.Attributes["atos_importealquilerequipo"];
                }
                // modo de lectura punto de medida
                if (_instalacion.Attributes.Contains("atos_modolecturapuntomedidaid"))
                {
                    writelog("mode de lectura (PM): " + ((EntityReference)_instalacion.Attributes["atos_modolecturapuntomedidaid"]).Id.ToString());
                    _contrato.Attributes["atos_modolecturapuntomedidaid"] = _instalacion.Attributes["atos_modolecturapuntomedidaid"];
                }
            }
            

            if (oferta.Attributes.Contains("atos_tarifaid"))
            {
                writelog("atos_tarifaid");
                _contrato.Attributes["atos_tarifaid"] = new EntityReference("atos_tarifa", ((EntityReference)oferta.Attributes["atos_tarifaid"]).Id);
            }

            if (oferta.Attributes.Contains("atos_sistemaelectricoid"))
            {
                writelog("atos_sistemaelectricoid");
                _contrato.Attributes["atos_sistemaelectricoid"] = new EntityReference("atos_sistemaelectrico", ((EntityReference)oferta.Attributes["atos_sistemaelectricoid"]).Id);
            }

            if (oferta.Attributes.Contains("atos_subsistemaid"))
            {
                writelog("atos_subsistemaid");
                _contrato.Attributes["atos_subsistemaid"] = new EntityReference("atos_subsistema", ((EntityReference)oferta.Attributes["atos_subsistemaid"]).Id);
            }

            if (oferta.Attributes.Contains("atos_peajeid"))
            {
                writelog("atos_peajeid");
                _contrato.Attributes["atos_peajeid"] = new EntityReference("atos_tablasatrgas", ((EntityReference)oferta.Attributes["atos_peajeid"]).Id);
            }

            if (oferta.Attributes.Contains("atos_usodelgasid"))
            {
                writelog("atos_usodelgasid");
                _contrato.Attributes["atos_usodelgasid"] = new EntityReference("atos_tablasatrgas", ((EntityReference)oferta.Attributes["atos_usodelgasid"]).Id);
            }

            if (oferta.Attributes.Contains("atos_agentecomercialid"))
            {
                writelog("atos_agentecomercialid");
                _contrato.Attributes["atos_agentecomercialid"] = new EntityReference("atos_agentecomercial", ((EntityReference)oferta.Attributes["atos_agentecomercialid"]).Id);
            }

            if (oferta.Attributes.Contains("atos_lote"))
            {
                writelog("atos_lote");
                _contrato.Attributes["atos_lote"] = oferta.Attributes["atos_lote"];
            }

            if (oferta.Attributes.Contains("atos_importebonificacion"))
            {
                writelog("atos_importebonificacion");
                _contrato.Attributes["atos_importebonificacion"] = oferta.Attributes["atos_importebonificacion"];
            }

            if (oferta.Attributes.Contains("atos_tipogarantiasolicitadacliente"))
            {
                writelog("atos_tipogarantiasolicitadacliente");
                _contrato.Attributes["atos_tipogarantiasolicitadacliente"] = oferta.Attributes["atos_tipogarantiasolicitadacliente"];
            }
                        
            if (oferta.Attributes.Contains("atos_fechasolicitudgarantiacliente"))
            {
                writelog("atos_fechasolicitudgarantiacliente");
                _contrato.Attributes["atos_fechasolicitudgarantiacliente"] = oferta.Attributes["atos_fechasolicitudgarantiacliente"];
            }

            if (oferta.Attributes.Contains("atos_fecharealizaciongarantiacliente"))
            {
                writelog("atos_fecharealizaciongarantiacliente");
                _contrato.Attributes["atos_fecharealizaciongarantiacliente"] = oferta.Attributes["atos_fecharealizaciongarantiacliente"];
            }

            if (oferta.Attributes.Contains("atos_fechainiciogarantia"))
            {
                writelog("atos_fechainiciogarantia");
                _contrato.Attributes["atos_fechainiciogarantia"] = oferta.Attributes["atos_fechainiciogarantia"];
            }

            if (oferta.Attributes.Contains("atos_fechafingarantia"))
            {
                writelog("atos_fechafingarantia");
                _contrato.Attributes["atos_fechafingarantia"] = oferta.Attributes["atos_fechafingarantia"];
            }

            /*if (oferta.Attributes.Contains("atos_gestionatr"))
            {
                writelog("atos_gestionatr ");
                if ((Boolean)oferta.Attributes["atos_gestionatr"] == true)
                {
                    _contrato.Attributes["atos_atrincluidoenelcontrato"] = new OptionSetValue(300000001);
                }
                else
                {
                    _contrato.Attributes["atos_atrincluidoenelcontrato"] = new OptionSetValue(300000000);
                }
            } */


            if (oferta.Attributes.Contains("atos_penalizacionconsumo"))
            {
                writelog("atos_penalizacionconsumo");
                _contrato.Attributes["atos_penalizacionconsumo"] = (Boolean) oferta.Attributes["atos_penalizacionconsumo"];
            }

            if (oferta.Attributes.Contains("atos_importepenalizacion"))
            {
                writelog("atos_importepenalizacion");
                _contrato.Attributes["atos_importepenalizacion"] = oferta.Attributes["atos_importepenalizacion"];
            }

            if (oferta.Attributes.Contains("atos_rangoinferiorpenalizacion"))
            {
                writelog("atos_rangoinferiorpenalizacion");
                _contrato.Attributes["atos_rangoinferiorpenalizacion"] = oferta.Attributes["atos_rangoinferiorpenalizacion"];
            }

            if (oferta.Attributes.Contains("atos_rangosuperiorpenalizacion"))
            {
                writelog("atos_rangosuperiorpenalizacion");
                _contrato.Attributes["atos_rangosuperiorpenalizacion"] = oferta.Attributes["atos_rangosuperiorpenalizacion"];
            }

            if (oferta.Attributes.Contains("atos_bonificacionconsumo"))
            {
                writelog("//atos_bonificacionconsumo");
                //_contrato.Attributes["atos_bonificacionconsumo"] = (Boolean) oferta.Attributes["atos_bonificacionconsumo"];
            }

            if (oferta.Attributes.Contains("atos_rangoinferiorbonificacion"))
            {
                writelog("atos_rangoinferiorbonificacion");
                _contrato.Attributes["atos_rangoinferiorbonificacion"] = oferta.Attributes["atos_rangoinferiorbonificacion"];
            }

            if (oferta.Attributes.Contains("atos_rangosuperiorbonificacion"))
            {
                writelog("atos_rangosuperiorbonificacion");
                _contrato.Attributes["atos_rangosuperiorbonificacion"] = oferta.Attributes["atos_rangosuperiorbonificacion"];
            }

            if (oferta.Attributes.Contains("atos_fechainicio"))
            {
                writelog("atos_fechainicio");
                _contrato.Attributes["atos_fechainiciocontrato"] = oferta.Attributes["atos_fechainicio"];
                _contrato.Attributes["atos_fechainicioefectiva"] = oferta.Attributes["atos_fechainicio"];
                _contrato.Attributes["atos_fechainiciovigenciaprecios"] = oferta.Attributes["atos_fechainicio"];
            }

            if (oferta.Attributes.Contains("atos_fechafin"))
            {
                writelog("atos_fechafin");
                _contrato.Attributes["atos_fechafincontrato"] = oferta.Attributes["atos_fechafin"];
                _contrato.Attributes["atos_fechafindefinitiva"] = oferta.Attributes["atos_fechafin"];
            }

            if (oferta.Attributes.Contains("atos_importegarantiasolicitada"))
            {
                writelog("atos_importegarantiasolicitada");
                _contrato.Attributes["atos_importegarantiasolicitada"] = oferta.Attributes["atos_importegarantiasolicitada"];
            }

            if (oferta.Attributes.Contains("atos_fechasolicitudavalprovisional"))
            {
                writelog("atos_fechasolicitudavalprovisional");
                _contrato.Attributes["atos_fechasolicitudavaldefinitivo"] = oferta.Attributes["atos_fechasolicitudavalprovisional"];
            }

            if (oferta.Attributes.Contains("atos_fecharealizacionavalprovisional"))
            {
                writelog("atos_fecharealizacionavalprovisional");
                _contrato.Attributes["atos_fecharealizacionavaldefinitivo"] = oferta.Attributes["atos_fecharealizacionavalprovisional"];
            }

            if (oferta.Attributes.Contains("atos_fechainicioavalprovisional"))
            {
                writelog("atos_fechainicioavalprovisional");
                _contrato.Attributes["atos_fechainicioavaldefinitivo"] = oferta.Attributes["atos_fechainicioavalprovisional"];
            }

            if (oferta.Attributes.Contains("atos_fechafinavalprovisional"))
            {
                writelog("atos_fechafinavalprovisional");
                _contrato.Attributes["atos_fechafinavaldefinitivo"] = oferta.Attributes["atos_fechafinavalprovisional"];
            }

            if (oferta.Attributes.Contains("atos_importeavalprovisionalsolicitado"))
            {
                writelog("atos_importeavalprovisionalsolicitado");
                _contrato.Attributes["atos_importeavaldefinitivosolicitado"] = oferta.Attributes["atos_importeavalprovisionalsolicitado"];
            }

            if (oferta.Attributes.Contains("atos_precioincluyegestionatr"))
            {
                writelog("atos_precioincluyegestionatr");
                _contrato.Attributes["atos_precioincluyegestionatr"] = oferta.Attributes["atos_precioincluyegestionatr"];
            }

            if (oferta.Attributes.Contains("atos_precioincluyeimpuestoelectrico"))
            {
                writelog("atos_precioincluyeimpuestoelectrico");
                _contrato.Attributes["atos_precioincluyeimpuestoelectrico"] = oferta.Attributes["atos_precioincluyeimpuestoelectrico"];
            }

            if (oferta.Attributes.Contains("atos_precisiondecimalesoferta"))
            {
                writelog("atos_precisiondecimalesoferta");
                _contrato.Attributes["atos_precisiondecimalesoferta"] = oferta.Attributes["atos_precisiondecimalesoferta"];
            }

            if (oferta.Attributes.Contains("atos_beneficioestimadooferta"))
            {
                writelog("atos_beneficioestimadooferta");
                _contrato.Attributes["atos_beneficioestimado"] = oferta.Attributes["atos_beneficioestimadooferta"];
            }

            if (oferta.Attributes.Contains("atos_facturacionestimadaoferta"))
            {
                writelog("atos_facturacionestimadaoferta");
                _contrato.Attributes["atos_facturacionestimada"] = oferta.Attributes["atos_facturacionestimadaoferta"];
            }

            

            if (oferta.Attributes.Contains("atos_tipodeproductofinalid"))
            {
                writelog("atos_tipodeproductofinalid");
                _contrato.Attributes["atos_tipodeproductoid"] = new EntityReference("atos_tipodeproducto", ((EntityReference)oferta.Attributes["atos_tipodeproductofinalid"]).Id);
            }

           

            //INFORMACION DE LA OFERTA
            // impuesto eléctrico 
            if (oferta.Attributes.Contains("atos_impuestoelectrico"))
            {
                writelog("atos_impuestoelectrico");
                if ((Boolean)oferta.Attributes["atos_impuestoelectrico"] == true)
                {
                    _contrato.Attributes["atos_impuestoelectrico"] = new OptionSetValue(300000001);
                }
                else
                {
                    _contrato.Attributes["atos_impuestoelectrico"] = new OptionSetValue(300000000);
                }
            }
            // congelacion de precios te
            if (oferta.Attributes.Contains("atos_congelacionpreciosente"))
            {
                writelog("atos_congelacionpreciosente");
                _contrato.Attributes["atos_congelacionpreciosente"] = new OptionSetValue(((OptionSetValue)oferta.Attributes["atos_congelacionpreciosente"]).Value); ;
            }
            // congelacion de precios tp
            if (oferta.Attributes.Contains("atos_congelacionpreciosentp"))
            {
                writelog("atos_congelacionpreciosentp");
                _contrato.Attributes["atos_congelacionpreciosentp"] = new OptionSetValue(((OptionSetValue)oferta.Attributes["atos_congelacionpreciosentp"]).Value); ;
            }
            // renovacion tácita 
            if (oferta.Attributes.Contains("atos_renovaciontacita"))
            {
                writelog("atos_renovaciontacita");
                _contrato.Attributes["atos_renovaciontacita"] = oferta.Attributes["atos_renovaciontacita"];
            }
            // fecha aceptacion oferta 
            if (oferta.Attributes.Contains("atos_fechaaceptacionoferta"))
            {
                writelog("atos_fechaaceptacionoferta");
                _contrato.Attributes["atos_fechaaceptacionoferta"] = oferta.Attributes["atos_fechaaceptacionoferta"];
            }
            if (oferta.Attributes.Contains("atos_grupoempresarialid"))
            {
                writelog("atos_grupoempresarialid");
                _contrato.Attributes["atos_grupoempresarialid"] = oferta.Attributes["atos_grupoempresarialid"];
            }
            // Gestión Atr 
            if (oferta.Attributes.Contains("atos_gestionatr"))
            {
                writelog("atos_gestionatr");
                if ((Boolean)oferta.Attributes["atos_gestionatr"] == true)
                {
                    _contrato.Attributes["atos_atrincluidoenelcontrato"] = new OptionSetValue(300000001);
                }
                else
                {
                    _contrato.Attributes["atos_atrincluidoenelcontrato"] = new OptionSetValue(300000000);
                }
            }

            if (contratoPadre.Attributes.Contains("atos_commodity"))
            {
                writelog("atos_commodity");
                _contrato.Attributes["atos_commodity"] = contratoPadre.Attributes["atos_commodity"];
            }

            if (contratoPadre.Attributes.Contains("atos_fechafirmacontrato"))
            {
                writelog("atos_fechafirmacontrato");
                _contrato.Attributes["atos_fechafirmacontrato"] = contratoPadre.Attributes["atos_fechafirmacontrato"];
            }

            if (contratoPadre.Attributes.Contains("atos_fechafirmacontratocliente"))
            {
                writelog("atos_fechafirmacontratocliente");
                _contrato.Attributes["atos_fechafirmacontratocliente"] = contratoPadre.Attributes["atos_fechafirmacontratocliente"];
            }

            if (oferta.Attributes.Contains("atos_formadepago"))
            {
                writelog("atos_formadepago");
                _contrato.Attributes["atos_formadepago"] = new OptionSetValue(((OptionSetValue) oferta.Attributes["atos_formadepago"]).Value);
            }

            if (oferta.Attributes.Contains("atos_condicionpagoid"))
            {
                writelog("atos_condicionpagoid");
                _contrato.Attributes["atos_condicionpagoid"] = new EntityReference("atos_condiciondepago", ((EntityReference)oferta.Attributes["atos_condicionpagoid"]).Id);
            }

            if (oferta.Attributes.Contains("atos_tipodeenvio"))
            {
                writelog("atos_tipodeenvio");
                _contrato.Attributes["atos_tipodeenvio"] = new OptionSetValue(((OptionSetValue) oferta.Attributes["atos_tipodeenvio"]).Value);
            }

            if (oferta.Attributes.Contains("atos_plazoenviofacturas"))
            {
                writelog("atos_plazoenviofacturas");
                _contrato.Attributes["atos_plazoenviofacturas"] = oferta.Attributes["atos_plazoenviofacturas"];
            }

            if (oferta.Attributes.Contains("atos_mandatosepa"))
            {
                writelog("atos_mandatosepa");
                _contrato.Attributes["atos_mandatosepa"] = oferta.Attributes["atos_mandatosepa"];
            }

            if (oferta.Attributes.Contains("atos_swift"))
            {
                writelog("atos_swift");
                _contrato.Attributes["atos_swift"] = oferta.Attributes["atos_swift"];
            }

            if (oferta.Attributes.Contains("atos_iban"))
            {
                writelog("atos_iban");
                _contrato.Attributes["atos_iban"] = oferta.Attributes["atos_iban"];
            }

            if (oferta.Attributes.Contains("atos_entidadbancaria"))
            {
                writelog("atos_entidadbancaria");
                _contrato.Attributes["atos_entidadbancaria"] = oferta.Attributes["atos_entidadbancaria"];
            }

            if (oferta.Attributes.Contains("atos_sucursalbancaria"))
            {
                writelog("atos_sucursalbancaria");
                _contrato.Attributes["atos_sucursalbancaria"] = oferta.Attributes["atos_sucursalbancaria"];
            }

            if (oferta.Attributes.Contains("atos_digitocontrol"))
            {
                writelog("atos_digitocontrol");
                _contrato.Attributes["atos_digitocontrol"] = oferta.Attributes["atos_digitocontrol"];
            }

            if (oferta.Attributes.Contains("atos_cuenta"))
            {
                writelog("atos_cuenta");
                _contrato.Attributes["atos_cuenta"] = oferta.Attributes["atos_cuenta"];
            }
            
            if (oferta.Attributes.Contains("atos_cuentabancaria"))
            {
                writelog("atos_cuentabancaria");
                _contrato.Attributes["atos_cuentabancaria"] = oferta.Attributes["atos_cuentabancaria"];
            }
            
            if (oferta.Attributes.Contains("atos_cuentabancariaapropia"))
            {
                writelog("atos_cuentabancariaapropia");
                _contrato.Attributes["atos_cuentabancariaapropia"] = oferta.Attributes["atos_cuentabancariaapropia"];
            }

            if (oferta.Attributes.Contains("atos_numclicsmensual"))
            {
                writelog("atos_numclicsmensual");
                _contrato.Attributes["atos_numclicsmensual"] = oferta.Attributes["atos_numclicsmensual"];
            }

            if (oferta.Attributes.Contains("atos_numclicstrimestral"))
            {
                writelog("atos_numclicsmensual");
                _contrato.Attributes["atos_numclicstrimestral"] = oferta.Attributes["atos_numclicstrimestral"];
            }

            if (oferta.Attributes.Contains("atos_numclicsanual"))
            {
                writelog("atos_numclicsanual");
                _contrato.Attributes["atos_numclicsanual"] = oferta.Attributes["atos_numclicsanual"];
            }

            if (contratoPadre.Attributes.Contains("transactioncurrencyid"))
            {
                writelog("transactioncurrencyid");
                _contrato.Attributes["transactioncurrencyid"] = new EntityReference("transactioncurrency", ((EntityReference)contratoPadre.Attributes["transactioncurrencyid"]).Id);
            }

            writelog("Remove atos_contratoid");
            _contrato.Attributes.Remove("atos_contratoid");
            writelog("Remove atos_name");
            _contrato.Attributes.Remove("atos_name");
            writelog("NewGuid");
            _contrato.Id = Guid.NewGuid();
            writelog("create contrato");
            Guid _contratoId = service.Create(_contrato);
            writelog("Contrato creado " + _contratoId.ToString());
            return _contratoId;
        }

        private EntityCollection ofertasHijas(Guid _ofertaPadre)
        {
            QueryExpression _consulta = new QueryExpression("atos_oferta");
            _consulta.ColumnSet = new ColumnSet(new String[] { "atos_ofertaid", "atos_name", "atos_tipooferta", "atos_fechainicio", "atos_tipodeproductofinalid",
                                                               "atos_fechafin", "atos_gestionatr","atos_congelacionpreciosente","atos_congelacionpreciosentp",
                                                               "atos_renovaciontacita","atos_fechaaceptacionoferta","atos_grupoempresarialid",
                                                               "atos_impuestoelectrico","atos_razonsocialid", "atos_cuentanegociadoraid", 
                                                               "atos_tarifaid", "atos_subsistemaid", "atos_sistemaelectricoid", "atos_agentecomercialid", "atos_lote", 
                                                               "atos_numerodocumento", "atos_penalizacionconsumo", "atos_importepenalizacion", 
                                                               "atos_rangoinferiorpenalizacion", "atos_rangosuperiorpenalizacion", "atos_bonificacionconsumo", 
                                                               "atos_importebonificacion", "atos_rangoinferiorbonificacion", "atos_rangosuperiorbonificacion", 
                                                               "atos_precioincluyegestionatr", "atos_precioincluyeimpuestoelectrico", "atos_precisiondecimalesoferta", 
                                                               "atos_beneficioestimadooferta", "atos_facturacionestimadaoferta", "atos_condicionpagoid", 
                                                               "atos_unidadprecioinforme", "atos_instalacionid", "atos_precisiondecimalesoferta",
                                                               "atos_peajeid", "atos_usodelgasid", "atos_instalaciongasid", "atos_mandatosepa",
                                                               "atos_formadepago", "atos_tipodeenvio", "atos_plazoenviofacturas",  "atos_swift",
                                                               "atos_iban", "atos_entidadbancaria", "atos_sucursalbancaria", "atos_digitocontrol",
                                                               "atos_cuenta", "atos_cuentabancaria", "atos_cuentabancariaapropia","atos_numclicsanual","atos_numclicsmensual",
                                                               "atos_numclicstrimestral"});

            FilterExpression _filtro = new FilterExpression();
            _filtro.FilterOperator = LogicalOperator.And;
            ConditionExpression _condicion = new ConditionExpression();
            _condicion.AttributeName = "atos_ofertapadreid";
            _condicion.Operator = ConditionOperator.Equal;
            _condicion.Values.Add(_ofertaPadre.ToString());
            _filtro.Conditions.Add(_condicion);

            _condicion = new ConditionExpression();
            _condicion.AttributeName = "statecode";
            _condicion.Operator = ConditionOperator.Equal;
            _condicion.Values.Add(0);
            _filtro.Conditions.Add(_condicion);

            _consulta.Criteria.AddFilter(_filtro);

            EntityCollection _resConsulta = service.RetrieveMultiple(_consulta);
            return _resConsulta;
        }

/*----------------------------*/
/* Crea Contratos Hijos       */
/*----------------------------*/
        private void creaContratosHijos(Entity _contratoPadre)
        {
            EntityCollection _resConsulta = ofertasHijas(((EntityReference)_contratoPadre.Attributes["atos_ofertaid"]).Id);

            for (int i = 0; i < _resConsulta.Entities.Count; i++)
            {
                // Si es suboferta se sacan las ofertas
                if (_resConsulta.Entities[i].Attributes.Contains("atos_tipooferta") &&
                     ((OptionSetValue)_resConsulta.Entities[i].Attributes["atos_tipooferta"]).Value == 300000001) 
                {

                    EntityCollection _ofertasSuboferta = ofertasHijas((Guid)_resConsulta.Entities[i].Attributes["atos_ofertaid"]);
                    for (int j = 0; j < _ofertasSuboferta.Entities.Count; j++)
                    {
                        // Oferta
                        if (_ofertasSuboferta.Entities[j].Attributes.Contains("atos_tipooferta") &&
                         ((OptionSetValue)_ofertasSuboferta.Entities[j].Attributes["atos_tipooferta"]).Value == 300000002)
                        {
                            Guid _contrato = creaContrato(_contratoPadre, _ofertasSuboferta.Entities[j]);
                            writelog("Contrato creado para oferta hija " + _ofertasSuboferta.Entities[j].Attributes["atos_name"].ToString() + 
                                     " de suboferta " + _resConsulta.Entities[i].Attributes["atos_name"].ToString() );

                            copiaPricingOutput(_contrato, /* _ofertasSuboferta.Entities[j],*/ _resConsulta.Entities[i]); // Se copian los pricing output de la suboferta porque la oferta hija no tiene
                            writelog("Copiados sus pricing output");
                        }
                    }
                }
                else if (_resConsulta.Entities[i].Attributes.Contains("atos_tipooferta") &&
                         ((OptionSetValue)_resConsulta.Entities[i].Attributes["atos_tipooferta"]).Value == 300000002) // Si es tipo oferta se crea el contrato
                {
                    Guid _contrato = creaContrato(_contratoPadre, _resConsulta.Entities[i]);
                    copiaPricingOutput(_contrato, _resConsulta.Entities[i]);
                }
            }

        }

        /*-------------------------------------------------------------------------------------*/
        /// <summary>
        /// Executes the plug-in.
        /// </summary>
        /// <param name="serviceProvider">The service provider.</param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics CRM caches plug-in instances. 
        /// The plug-in's Execute method should be written to be stateless as the constructor 
        /// is not called for every invocation of the plug-in. Also, multiple system threads 
        /// could execute the plug-in at the same time. All per invocation state information 
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        /*-------------------------------------------------------------------------------------*/
        public void Execute(IServiceProvider serviceProvider)
        {
            
            tracingService = (ITracingService)serviceProvider.GetService(typeof(ITracingService));

            PluginExecutionContext = (IPluginExecutionContext)serviceProvider.GetService(typeof(IPluginExecutionContext));

            // Obtain the Organization Service factory service from the service provider
            factory = (IOrganizationServiceFactory)serviceProvider.GetService(typeof(IOrganizationServiceFactory));

            // Use the factory to generate the Organization Service.
            service = factory.CreateOrganizationService(PluginExecutionContext.UserId);
            
            writelog("-----------------------------------------");
            writelog(DateTime.Now.ToLocalTime().ToString());
            writelog("Plugin ContratoMP");
            writelog("Mensaje: " + PluginExecutionContext.MessageName);


            if (PluginExecutionContext.MessageName == "Create")
            {
                Entity ef = (Entity)PluginExecutionContext.InputParameters["Target"];

                // Si el contrato tiene instalación informada no es multipunto.
                if (ef.Attributes.Contains("atos_instalacionid") || ef.Attributes.Contains("atos_instalaciongasid")) 
                    return;

                // Debe colgar de una oferta
                if (!ef.Attributes.Contains("atos_ofertaid")) 
                    return;

                // Si no tiene oferta padre
                Entity ofertaPadre = service.Retrieve("atos_oferta", ((EntityReference)ef.Attributes["atos_ofertaid"]).Id, new Microsoft.Xrm.Sdk.Query.ColumnSet("atos_tipooferta"));
                if (!ofertaPadre.Attributes.Contains("atos_tipooferta"))
                    return;

                // Si la oferta padre no es multipunto no tiene que hacer nada
                if (((OptionSetValue)ofertaPadre.Attributes["atos_tipooferta"]).Value != 300000000) 
                    return;
                //writelog("Antes de copiaPricingOutput");

                //copiaPricingOutput(ef.Id, ofertaPadre);
                writelog("Proceso de creación de los contratos hijos");
                creaContratosHijos(ef);
                writelog(" Fin del plugin Contrato MP");
                writelog("============================");
                //throw new Exception("Error provocado");
            }
        }
    }
}