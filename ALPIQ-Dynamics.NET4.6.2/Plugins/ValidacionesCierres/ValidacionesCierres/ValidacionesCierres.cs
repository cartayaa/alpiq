// <copyright file="Plugin.cs" company="Licence Owner">
// Copyright (c) 2015 All Rights Reserved
// </copyright>
// <author>Licence Owner</author>
// <date>8/25/2015 9:17:16 AM</date>
// <summary>Implements the Plugin Workflow Activity.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
namespace ValidacionesCierres
{
    using System;
    using System.Collections.ObjectModel;
    using System.Globalization;
    using System.Linq;
    using System.ServiceModel;
    using Microsoft.Xrm.Sdk;
    using Microsoft.Xrm.Sdk.Query;

    /// <summary>
    /// Base class for all Plugins.
    /// </summary>    
    public class ValidacionesCierres : IPlugin
    {
        #region Constantes y Variables
        private Boolean _log = false;
        private ITracingService tracingService;
        private String rutaLog;
        private const Char SEPARADOR = '#';
        private String _error = "";
        private const String SALTO = "<br/>";
        private String _salto = "";
        private int _precisionDecimales;
        private Boolean hayQueValidar = true;
        #endregion

        public ValidacionesCierres(String parametros)
        {
            if (String.IsNullOrEmpty(parametros))
            {
                throw new InvalidPluginExecutionException("Conexión mal configurada.");
            }
            else
            {
                String[] arrayPar = parametros.Split(SEPARADOR);
                rutaLog = arrayPar[0];
                if (arrayPar[1] == "SI")
                    _log = true;
                // Metemos un parámetro más para que se salte las validaciones.
                if (arrayPar.Length > 2)
                {
                    if (arrayPar[2] == "NOVALIDA")
                        hayQueValidar = false;
                }
            }
        }

        private void recuperaPrecisionDecimales(Guid _contratoid, IOrganizationService _servicioConsultas)
        {
            Entity _contrato = _servicioConsultas.Retrieve("atos_contrato", _contratoid, new ColumnSet(new String[] {"atos_precisiondecimalesoferta"} ));
            if (_contrato.Attributes.Contains("atos_precisiondecimalesoferta") == false)
                throw new Exception("El contrato no tiene informado el campo Precisión decimales oferta. Consulte con el administrador.");
            //_precisionDecimales = ((OptionSetValue)_contrato.Attributes["atos_precisiondecimalesoferta"]).Value - 300000000;
            _precisionDecimales = Convert.ToInt32(_contrato.FormattedValues["atos_precisiondecimalesoferta"]);
            writelog(rutaLog + "log_Plugin.txt", "Precision Decimales " + _precisionDecimales.ToString() + " " + _contrato.FormattedValues["atos_precisiondecimalesoferta"]);
        }

        public void Execute(IServiceProvider serviceProvider)
        {
            _error = "";
            _salto = "";
            Microsoft.Xrm.Sdk.IPluginExecutionContext context = (Microsoft.Xrm.Sdk.IPluginExecutionContext)serviceProvider.GetService(typeof(Microsoft.Xrm.Sdk.IPluginExecutionContext));
            serviceProvider.GetService(typeof(Microsoft.Xrm.Sdk.IPluginExecutionContext));

            IOrganizationServiceFactory serviceFactory = (IOrganizationServiceFactory)serviceProvider.GetService(typeof(IOrganizationServiceFactory));
            IOrganizationService _servicio = serviceFactory.CreateOrganizationService(context.InitiatingUserId);
            IOrganizationService _servicioConsultas = serviceFactory.CreateOrganizationService(context.UserId);
            tracingService = (ITracingService)serviceProvider.GetService(typeof(ITracingService));
            writelog(rutaLog + "log_Plugin.txt", "\n============================================" + "\r\n");
            writelog(rutaLog + "log_Plugin.txt", "Validación Cierres Contratos " + System.DateTime.Now.ToLongDateString() + "\r\n");
            //Comprobamos la acción. Solo nos interesan la creación y la modificación
            if (context.MessageName == "Update")
            {
                writelog(rutaLog + "log_Plugin.txt", "UPDATE \r\n");
                if (context.InputParameters.Contains("Target") && context.InputParameters["Target"] is Entity)
                {                                       
                    Entity cierreContrato = (Entity)context.InputParameters["Target"];
                   
                    if (cierreContrato.Attributes.Contains("atos_preciop1") ||                       
                        cierreContrato.Attributes.Contains("atos_preciop2") ||                    
                        cierreContrato.Attributes.Contains("atos_preciop3") ||                      
                        cierreContrato.Attributes.Contains("atos_preciop4") ||                        
                        cierreContrato.Attributes.Contains("atos_preciop5") ||                     
                        cierreContrato.Attributes.Contains("atos_preciop6") ||
                        cierreContrato.Attributes.Contains("atos_cierrecreadoenems") ||
                        cierreContrato.Attributes.Contains("atos_ultimowscierreejecutado") ||
                        cierreContrato.Attributes.Contains("atos_interfazcierreems") ||
                        cierreContrato.Attributes.Contains("atos_ultimologwscierre"))
                    {                       
                        return;
                    }
                    else
                    {
                        Entity _preImage = context.PreEntityImages["PreImagenCierre"];
                        if (_preImage.Attributes.Contains("atos_contratoid") == false)
                            throw new Exception("El cierre no está asociado a ningún contrato. Consulte con el administrador.");
                        recuperaPrecisionDecimales(((EntityReference)_preImage.Attributes["atos_contratoid"]).Id, _servicioConsultas);

                        //Comprobamos si la variable está informada
                        EntityCollection terminoEMS = new EntityCollection();
                        if (cierreContrato.Attributes.Contains("atos_variable"))
                        {
                            terminoEMS = terminoEMSCierreContrato(_servicioConsultas, cierreContrato);
                            writelog(rutaLog + "log_Plugin.txt", "En cierre \r\n");
                        }
                        else
                        {
                            terminoEMS = terminoEMSCierreContrato(_servicioConsultas, _preImage);
                            writelog(rutaLog + "log_Plugin.txt", "En perimagen \r\n");
                        }

                        // Controlamos que el cierre esté asociado a un cierre de oferta
                        if (cierreContrato.Attributes.Contains("atos_cierreofertaid") == false && _preImage.Attributes.Contains("atos_cierreofertaid") == false)
                        {
                            writelog(rutaLog + "log_Plugin.txt", "El cierre de contrato debe estar asociado a un cierre de oferta\r\n");
                            throw new Exception("El cierre de contrato debe estar asociado a un cierre de oferta");
                        }

                        if (cierreContrato.Attributes.Contains("atos_valorcierre") || cierreContrato.Attributes.Contains("atos_pricinginputid") ||
                            cierreContrato.Attributes.Contains("atos_costegestioncierre"))
                            
                            /* Calculado por Interfaz
                            calcularPreciosCierre(cierreContrato, _servicioConsultas, _preImage);ç
                            */

                        //Recogemos todos los cierres del contrato
                        writelog(rutaLog + "log_Plugin.txt", "cierresContrato" + "\r\n");                       
                        EntityCollection cierresContrato = CierresContrato(_servicioConsultas, cierreContrato, _preImage);
                        writelog(rutaLog + "log_Plugin.txt", "cierresContrato.Count:" + cierresContrato.Entities.Count + "\r\n");
                        // Si ha recibido por parámetro que no se valida la variable hayQueValidar se pone a false para que no llame a la validación de Cierres.
                        if (hayQueValidar == true)
                            validarCierres(_servicioConsultas, cierreContrato, cierresContrato/*, terminoEMS[0]*/, _preImage); // No es necesario el terminoEMS
                        writelog(rutaLog + "log_Plugin.txt", "Fin Plugin Validacion Cierres" + "\r\n");                        
                    }
                    
                }
                else
                {
                    //No hacemos nada
                    return;
                }
            }
            else if (context.MessageName == "Create" )
            {
                writelog(rutaLog + "log_Plugin.txt", "context.MessageName: " + context.MessageName + "\r\n");
                if (context.InputParameters.Contains("Target") && context.InputParameters["Target"] is Entity)
                {
                    Entity cierreContrato = (Entity)context.InputParameters["Target"];
                    writelog(rutaLog + "log_Plugin.txt", cierreContrato.LogicalName + "\r\n");


                    if (cierreContrato.Attributes.Contains("atos_contratoid") == false)
                        throw new Exception("El cierre no está asociado a ningún contrato. Consulte con el administrador.");
                    recuperaPrecisionDecimales(((EntityReference)cierreContrato.Attributes["atos_contratoid"]).Id, _servicioConsultas);


                    //Comprobamos si la variable está informada
                    EntityCollection terminoEMS = new EntityCollection();
                    if (cierreContrato.Attributes.Contains("atos_variable"))
                    {
                        terminoEMS = terminoEMSCierreContrato(_servicioConsultas, cierreContrato);

                    }

                    // Controlamos que el cierre esté asociado a un cierre de oferta
                    if (cierreContrato.Attributes.Contains("atos_cierreofertaid") == false)
                    {
                        writelog(rutaLog + "log_Plugin.txt", "El cierre de contrato debe estar asociado a un cierre de oferta\r\n");
                        throw new Exception("El cierre de contrato debe estar asociado a un cierre de oferta");

                    }
                    calcularPreciosCierre(cierreContrato, _servicioConsultas, null);
                    //Recogemos todos los cierres del contrato
                    writelog(rutaLog + "log_Plugin.txt", "cierresContrato" + "\r\n");
                    EntityCollection cierresContrato = CierresContrato(_servicioConsultas, cierreContrato, null);
                    writelog(rutaLog + "log_Plugin.txt", "cierresContrato.Count:" + cierresContrato.Entities.Count + "\r\n");
                    // Si ha recibido por parámetro que no se valida la variable hayQueValidar se pone a false para que no llame a la validación de Cierres.
                    if ( hayQueValidar == true )
                        validarCierres(_servicioConsultas, cierreContrato, cierresContrato/*, terminoEMS[0]*/, null);  // No es necesario el terminoEMS
                    writelog(rutaLog + "log_Plugin.txt", "Fin Plugin Validacion Cierres" + "\r\n");
                }
                else
                { 
                    //No hacemos nada
                    return;
                }
            }
        }

        #region Utilidades
        private void writelog(String fichero, String texto)
        {
            tracingService.Trace(texto);
            if (_log == true)
                System.IO.File.AppendAllText(fichero, texto + "\n");
        }
        #endregion

        #region Consultas
        private EntityCollection PeriodosCoeficiente(IOrganizationService servicioConsultas,Guid coeficiente)
        {
            string fetchXML = string.Format(@"<fetch mapping='logical'>" +
                                             "<entity name='atos_pricinginput'>" +
                                                 "<attribute name='atos_pfijo'/>" +
                                                 "<attribute name='atos_p1'/>" +
                                                 "<attribute name='atos_p2'/>" +
                                                 "<attribute name='atos_p3'/>" +
                                                 "<attribute name='atos_p4'/>" +
                                                 "<attribute name='atos_p5'/>" +
                                                 "<attribute name='atos_p6'/>" +
                                                 "<filter>" +
                                                        "<condition attribute='atos_pricinginputid' operator='eq' value='{0}' />" +
                                                 "</filter>" +
                                             "</entity>" +
                                         "</fetch>", coeficiente);
            writelog(rutaLog + "log_Plugin.txt", "fetchExp PeriodosCoeficiente: " + fetchXML + "\r\n");
            var fetchExp = new FetchExpression(fetchXML);
            return servicioConsultas.RetrieveMultiple(fetchExp);

        }

        private EntityCollection CierresContrato(IOrganizationService servicioConsultas, Entity cierre, Entity preImage)
        {

            writelog(rutaLog + "log_Plugin.txt", "En CierresContrato " + cierre.Id.ToString() + "\r\n");

            Guid contratoId = Guid.Empty;
            if (cierre.Attributes.Contains("atos_contratoid"))
                contratoId = ((EntityReference)cierre.Attributes["atos_contratoid"]).Id;
            else if (preImage != null)
            {
                if (preImage.Attributes.Contains("atos_contratoid"))
                    contratoId = ((EntityReference)preImage.Attributes["atos_contratoid"]).Id;
            }

            if (contratoId == Guid.Empty)
                throw new Exception("El cierre no está asociado a ningún contrato");

            writelog(rutaLog + "log_Plugin.txt", contratoId.ToString() + "\r\n");


            // ((EntityReference)cierre.Attributes["atos_contratoid"]).Id
            Guid cierreOfertaId = Guid.Empty;
            if (cierre.Attributes.Contains("atos_cierreofertaid"))
                cierreOfertaId = ((EntityReference)cierre.Attributes["atos_cierreofertaid"]).Id;
            else if (preImage != null)
            {
                if (preImage.Attributes.Contains("atos_cierreofertaid"))
                    cierreOfertaId = ((EntityReference)preImage.Attributes["atos_cierreofertaid"]).Id;
            }

            if (cierreOfertaId == Guid.Empty)
                throw new Exception("El cierre no está asociado a ningún cierre de oferta");
          
            // Los cierres los obtenemos a partir del nuevo campo cierre de oferta que se ha incluído en cierre de contrato (en lugar de filtrar por el término ems)
            /*string fetchXML = string.Format(@" <fetch mapping='logical'>" +
                 "<entity name='atos_cierre'>" +
                     "<attribute name='atos_valorcierre'/>" +
                     "<attribute name='atos_porcentajecierre'/>" +
                     "<filter type='and'>" +
                         "<condition attribute='statecode' value='0' operator='eq'/>" +
                         "<condition attribute='atos_contratoid' operator='eq' value='{0}'/>" +
                         "<condition attribute='atos_variable' operator='not-null'/>" +
                         "<condition attribute='atos_cierreid' operator='ne' value='{1}'/>" +
                     "</filter>" +
                     "<link-entity name='atos_pricingoutput' alias='a_pricingO' to='atos_variable' from='atos_pricingoutputid'>" +
                         "<attribute name='atos_terminoems'/>" +
                         "<filter type='and'>" +
                             "<condition attribute='atos_terminoems' operator='not-null'/>" +
                         "</filter>" +
                     "</link-entity>" +
                 "</entity>" +
             "</fetch>", ((EntityReference)cierre.Attributes["atos_contratoid"]).Id, cierre.Id.ToString());*/
            string fetchXML = string.Format(@" <fetch mapping='logical'>" +
                 "<entity name='atos_cierre'>" +
                     "<attribute name='atos_valorcierre'/>" +
                     "<attribute name='atos_porcentajecierre'/>" +
                     "<filter type='and'>" +
                         "<condition attribute='statecode' value='0' operator='eq'/>" +
                         "<condition attribute='atos_contratoid' operator='eq' value='{0}'/>" +
                         "<condition attribute='atos_variable' operator='not-null'/>" +
                         "<condition attribute='atos_cierreid' operator='ne' value='{1}'/>" +
                         "<condition attribute='atos_cierreofertaid' operator='eq' value='{2}'/>" +
                     "</filter>" +
                 "</entity>" +

             "</fetch>", contratoId.ToString(), cierre.Id.ToString(), cierreOfertaId.ToString());
            writelog(rutaLog + "log_Plugin.txt", "fetchExp cierres contrato: " + fetchXML + "\r\n");
            var fetchExp = new FetchExpression(fetchXML);
            return servicioConsultas.RetrieveMultiple(fetchExp);
        }

        private EntityCollection OfertaContrato(IOrganizationService servicioConsultas, Entity cierre)
        {
            string fetchXML = string.Format(@"<fetch mapping='logical'>"+
                        "<entity name='atos_contrato'>"+	
                            "<attribute name='atos_ofertaid'/>"+						
                            "<filter>" +
                                   "<condition attribute='atos_contratoid' operator='eq' value='{0}' />" +
                            "</filter>" +
                            "<link-entity name='atos_oferta' alias='oferta' to='atos_ofertaid' from='atos_ofertaid'>"+
                            "<filter type='and'>"+
                            "<condition attribute='statecode' value='0' operator='eq'/>"+
                            "</filter>"+
                            "</link-entity>"+
                             "</entity>"+
                    "</fetch>",((EntityReference)cierre.Attributes["atos_contratoid"]).Id);
            writelog(rutaLog + "log_Plugin.txt", "fetchExp oferta contrato: " + fetchXML + "\r\n");
            var fetchExp = new FetchExpression(fetchXML);
            return servicioConsultas.RetrieveMultiple(fetchExp);
        }

        private EntityCollection terminoEMSCierreContrato(IOrganizationService servicioConsultas, Entity cierre)
        {         					
              string fetchXML = string.Format(@"<fetch mapping='logical'>"+
                                        "<entity name='atos_pricingoutput'>"+	
                                            "<attribute name='atos_terminoems'/>"+						
                                            "<filter>" +
                                                   "<condition attribute='atos_pricingoutputid' operator='eq' value='{0}' />" +
                                            "</filter>" +							
                                        "</entity>"+
                                    "</fetch>",((EntityReference)cierre.Attributes["atos_variable"]).Id);
            writelog(rutaLog + "log_Plugin.txt", "fetchExp terminoEMSCierreContrato: " + fetchXML + "\r\n");
            var fetchExp = new FetchExpression(fetchXML);
            return servicioConsultas.RetrieveMultiple(fetchExp);
        }

        private EntityCollection CierresOferta(IOrganizationService servicioConsultas, Entity terminoEMS, Entity oferta)
        {
            string fetchXML = string.Format(@"<fetch mapping='logical'>"+
                                            "<entity name='atos_cierreoferta'>"+
                                                "<attribute name='atos_energiacierre'/>" +
                                                 "<attribute name='atos_porcentajecierre'/>" +
                                                 "<attribute name='atos_numerocierrespermitido'/>" +
                                                "<filter type='and'>"+
                                                    "<condition attribute='statecode' value='0' operator='eq'/>"+
                                                    "<condition attribute='atos_ofertaid' value='{0}' operator='eq'/>"+
                                                "</filter>"+
                                                "<link-entity name='atos_oferta' alias='aa' to='atos_ofertaid' from='atos_ofertaid'>"+
                                                    "<link-entity name='atos_cierreoferta' from='atos_ofertaid' to='atos_ofertaid' alias='ac'>" +
                                                        "<link-entity name='atos_pricingoutput' alias='ab' to='atos_pricingoutputid' from='atos_pricingoutputid'>" +
                                                            "<filter type='and'>"+
                                                                "<condition attribute='atos_terminoems' value='{1}' operator='eq'/>" +
                                                            "</filter>" +
                                                        "</link-entity>" +
                                                    "</link-entity>"+
                                                "</link-entity>"+
                                            "</entity>"+
                                        "</fetch>", ((EntityReference)oferta.Attributes["atos_ofertaid"]).Id, terminoEMS.Attributes["atos_terminoems"]);
            writelog(rutaLog + "log_Plugin.txt", "fetchExp CierresOferta: " + fetchXML + "\r\n");
            var fetchExp = new FetchExpression(fetchXML);
            return servicioConsultas.RetrieveMultiple(fetchExp);
        }
        #endregion
        #region Validaciones 
        private void validarCierres(IOrganizationService servicioConsultas, Entity cierre, EntityCollection cierresContrato, /*Entity terminoEMSCierre,*/ Entity preImagen)
        {
            writelog(rutaLog + "log_Plugin.txt", "validarCierres \r\n");


            Guid cierreOfertaId = Guid.Empty;
            if (cierre.Attributes.Contains("atos_cierreofertaid"))
                cierreOfertaId = ((EntityReference)cierre.Attributes["atos_cierreofertaid"]).Id;
            else if (preImagen != null)
            {
                if (preImagen.Attributes.Contains("atos_cierreofertaid"))
                    cierreOfertaId = ((EntityReference)preImagen.Attributes["atos_cierreofertaid"]).Id;
            }

            /*object atosVariable = null;

            if (cierre.Attributes.Contains("atos_variable"))
                atosVariable = cierre.Attributes["atos_variable"];
            else
                if (preImagen != null)
                    atosVariable = preImagen.Attributes["atos_variable"];
            if (atosVariable != null)
            {*/
            if ( cierreOfertaId != Guid.Empty )
            {
               //Recogemos el número máximo de cierres permitido (si el contrato está asociado a una oferta) en función a la variable EMS
               int? maxCierres= null;
               //Sumo energía variable de todos los cierres del contrato con el mismo EMS  
               Decimal? totalMwh = null; 
               //Para update luego le restamos la preImagen
               if (cierre.Attributes.Contains("atos_valorcierre"))
                   totalMwh = Convert.ToDecimal(cierre.Attributes["atos_valorcierre"]); 
               //Sumo los porcentajes de todos los cierres del contrato con el mismo EMS
               Decimal? totalPorcentaje = null;   
               //Para update luego le restamos la preImagen
               if (cierre.Attributes.Contains("atos_porcentajecierre"))
                   totalPorcentaje = Convert.ToDecimal(cierre.Attributes["atos_porcentajecierre"]); 
               writelog(rutaLog + "log_Plugin.txt", "cierresContrato.Entities.Count:"+cierresContrato.Entities.Count+" \r\n");
               for (var i = 0;i<cierresContrato.Entities.Count;i++)
               {
                   if (cierresContrato[i].Attributes.Contains("atos_valorcierre"))
                   {
                       if (totalMwh == null)
                           totalMwh =  Convert.ToDecimal(cierresContrato[i].Attributes["atos_valorcierre"]);
                       else
                           totalMwh = totalMwh + Convert.ToDecimal(cierresContrato[i].Attributes["atos_valorcierre"]);
                   }
                   if (cierresContrato[i].Attributes.Contains("atos_porcentajecierre"))
                   {
                       if (totalPorcentaje == null)
                            totalPorcentaje = Convert.ToDecimal(cierresContrato[i].Attributes["atos_porcentajecierre"]);
                       else
                           totalPorcentaje = totalPorcentaje + Convert.ToDecimal(cierresContrato[i].Attributes["atos_porcentajecierre"]);

                   }
                    writelog(rutaLog + "log_Plugin.txt", "totalMwh pasada"+i+":" + totalMwh + "\r\n");
                    writelog(rutaLog + "log_Plugin.txt", "totalPorcentaje pasada" + i + ":" + totalPorcentaje + "\r\n");
               }

               writelog(rutaLog + "log_Plugin.txt", "totalMwh " + totalMwh+"\r\n");
               writelog(rutaLog + "log_Plugin.txt", "totalPorcentaje" + totalPorcentaje + "\r\n");
               //Comprobamos si el cierre de la oferta tiene asignado un valor a cierre por Mwh
               //Si es así, no podremos exceder ese valor (¿¿¿¿¿ y si no no podremos exceder el contratado??????)
               Decimal? maxMwh = null;
               //Comprobamos si el cierre de la oferta tiene asignado un valor a cierre por porcentaje
               //Si es así, no podremos exceder ese valor y si no no podremos exceder el 100%
               Decimal maxPorcentaje = 1;


               // Recuperamos datos del cierre de la oferta asociada al cierre del contrato
               Entity cierreOferta = servicioConsultas.Retrieve("atos_cierreoferta", cierreOfertaId,
                           new ColumnSet(new String[] { "atos_energiacierre", "atos_porcentajecierre", "atos_numerocierrespermitido" }));

               if (cierreOferta.Attributes.Contains("atos_energiacierre"))
                   maxMwh = Convert.ToDecimal(cierreOferta.Attributes["atos_energiacierre"]);
               writelog(rutaLog + "log_Plugin.txt", "maxMwh: " + maxMwh + " \r\n");
               if (cierreOferta.Attributes.Contains("atos_porcentajecierre"))
                   maxPorcentaje = Convert.ToDecimal(cierreOferta.Attributes["atos_porcentajecierre"]);
               writelog(rutaLog + "log_Plugin.txt", "maxPorcentaje: " + maxPorcentaje + " \r\n");
               if (cierreOferta.Attributes.Contains("atos_numerocierrespermitido"))
                   maxCierres = Convert.ToInt32(cierreOferta.Attributes["atos_numerocierrespermitido"]);
               writelog(rutaLog + "log_Plugin.txt", "maxCierres: " + maxCierres + " \r\n");


               // Al existir una nueva relación entre cierres de contrato y cierre de oferta ya no es necesario buscar esta última a partir del término ems
               //Comprobamos si el contrato tiene una oferta activa asociada (si no no hacemos esta validación) 
               /*
               EntityCollection oferta = new EntityCollection();
               if (cierre.Attributes.Contains("atos_contratoid"))
                    oferta = OfertaContrato( servicioConsultas, cierre);
               else
               {
                   if (preImagen != null)
                        oferta = OfertaContrato( servicioConsultas, preImagen);
               }



               writelog(rutaLog + "log_Plugin.txt", "oferta.Entities.Count: "+oferta.Entities.Count+" \r\n");
               if (oferta.Entities.Count > 0)
               {	
                    if(oferta[0].Attributes.Contains("atos_ofertaid"))		
                    {   
                       EntityCollection cierresOferta = CierresOferta(servicioConsultas, terminoEMSCierre, oferta[0]);
                       writelog(rutaLog + "log_Plugin.txt", "cierresOferta.Entities.Count: " + cierresOferta.Entities.Count + " \r\n");
                       if (cierresOferta.Entities.Count > 0)
                       {
                           if (cierresOferta[0].Attributes.Contains("atos_valorcierre"))
                               maxMwh = Convert.ToDecimal(cierresOferta[0].Attributes["atos_valorcierre"]);
                           writelog(rutaLog + "log_Plugin.txt", "maxMwh: " + maxMwh + " \r\n");
                           if (cierresOferta[0].Attributes.Contains("atos_porcentajecierre"))
                               maxPorcentaje = Convert.ToDecimal(cierresOferta[0].Attributes["atos_porcentajecierre"]);
                           writelog(rutaLog + "log_Plugin.txt", "maxPorcentaje: " + maxPorcentaje + " \r\n");
                           if (cierresOferta[0].Attributes.Contains("atos_numerocierrespermitido"))
                               maxCierres = Convert.ToInt32(cierresOferta[0].Attributes["atos_numerocierrespermitido"]);
                           writelog(rutaLog + "log_Plugin.txt", "maxCierres: " + maxCierres + " \r\n");
                       }
                       else
                       {
                           _error += string.Format("{0}No existe un cierre de oferta para la variable-Pricing Output seleccionado.", _salto);
                           _salto = SALTO;
                       }
                    }
                    else
                    {
                        _error += string.Format("{0}El contrato no tiene asociada una oferta.", _salto);
                        _salto = SALTO;
                    }
               }
               */
               //if (maxCierres != null)
               //{
               //    writelog(rutaLog + "log_Plugin.txt", "cierresContrato.Entities.Count: " + cierresContrato.Entities.Count + " \r\n");
               //    if (cierresContrato.Entities.Count >= maxCierres)
               //    {
               //        _error += string.Format("{0}No se pueden añadir más cierres a este contrato para este cierre de oferta", _salto);
               //        //_error += string.Format("{0}No se pueden añadir más cierres a este contrato con el término EMS del Pricing Output {1}", _salto, terminoEMSCierre.Attributes["atos_terminoems"]);
               //        _salto = SALTO;                                        
               //    }
               //}

               // ALPIQ HA PEDIDO QUE  SE QUITEN LAS VALIDACIONES POR PORCENTAJE Y TOTAL DE MWH
               //if (maxMwh != null && totalMwh != null)
               //{
               //    writelog(rutaLog + "log_Plugin.txt", "totalMwh: " + totalMwh + " \r\n");
               //    //Si es un update y cambiamos este dato, le restamos el valor de la imagen
               //    // Comento la resta porque en la lista de los cierres se ha excluido el cierre sobre el que se está actualizando
               //    /*if (cierre.Attributes.Contains("atos_valorcierre") && preImagen != null)
               //        if (preImagen.Attributes.Contains("atos_valorcierre"))
               //             totalMwh = totalMwh - Convert.ToDecimal(preImagen.Attributes["atos_valorcierre"]);*/
               //    if (totalMwh > maxMwh)
               //    {
               //     _error += string.Format("{0}{1} Excede el máximo de Mwh {2}.", _salto, totalMwh, maxMwh);
               //     _salto = SALTO;                                                      
               //    }		
               //}

               //if (totalPorcentaje != null)
               //{
               //    writelog(rutaLog + "log_Plugin.txt", "totalPorcentaje: " + totalPorcentaje + " \r\n");
               //    //Si es un update y cambiamos este dato, le restamos el valor de la imagen
               //    // Comento la resta porque en la lista de los cierres se ha excluido el cierre sobre el que se está actualizando
               //    /*if (cierre.Attributes.Contains("atos_porcentajecierre") && preImagen != null)
               //        if (preImagen.Attributes.Contains("atos_porcentajecierre"))
               //            totalPorcentaje = totalPorcentaje - Convert.ToDecimal(preImagen.Attributes["atos_porcentajecierre"]);*/
               //    writelog(rutaLog + "log_Plugin.txt", "totalPorcentaje: " + totalPorcentaje + " \r\n");
               //    if (totalPorcentaje > maxPorcentaje)
               //    {
               //        _error += string.Format("{0}{1} Excede el máximo de Porcentaje {2}.", _salto, totalPorcentaje, maxPorcentaje);
               //        _salto = SALTO;
               //    }
               //}
             }
             else
             {
                 _error += string.Format("{0}El cierre de contrato no está asociado a ningún cierre de oferta.", _salto);
                 //_error += string.Format("{0}La variable-Pricing Output debe estar informada.", _salto);
                 _salto = SALTO;        
             }

            if (_error != "")
                throw new Exception(_error);
            writelog(rutaLog + "log_Plugin.txt", "Salgo de validarCierres \r\n");
        }
        #endregion
        #region Precios Cierre
        private void calcularPreciosCierre(Entity cierre, IOrganizationService servicioConsultas, Entity preImagen)
        {
	        decimal? valorCierre = null;
	        Guid coeficiente = new Guid();
            decimal costeGestion = 0;
            writelog(rutaLog + "log_Plugin.txt", "calcularPreciosCierre" + "\r\n");
	        if (cierre.Attributes.Contains("atos_valorcierre"))
                valorCierre = Convert.ToDecimal(cierre.Attributes["atos_valorcierre"]);
            else if (preImagen != null)
            {  if (preImagen.Attributes.Contains("atos_valorcierre"))
                    valorCierre = Convert.ToDecimal(preImagen.Attributes["atos_valorcierre"]);
            }
            writelog(rutaLog + "log_Plugin.txt", "valorCierre: " + valorCierre+"\r\n");
	        if (cierre.Attributes.Contains("atos_pricinginputid"))
		        coeficiente = ((EntityReference)cierre.Attributes["atos_pricinginputid"]).Id;
            else if (preImagen != null)
            {
                if (preImagen.Attributes.Contains("atos_pricinginputid"))
                    coeficiente = ((EntityReference)preImagen.Attributes["atos_pricinginputid"]).Id;
            }
            writelog(rutaLog + "log_Plugin.txt", "coeficiente: " + coeficiente + "\r\n");
            if (cierre.Attributes.Contains("atos_costegestioncierre"))
	            costeGestion =  Convert.ToDecimal(cierre.Attributes["atos_costegestioncierre"]);
            else if (preImagen != null)
            {
                if (preImagen.Attributes.Contains("atos_costegestioncierre"))
                    costeGestion = Convert.ToDecimal(preImagen.Attributes["atos_costegestioncierre"]);
            }
            writelog(rutaLog + "log_Plugin.txt", "costeGestion: " + costeGestion + "\r\n");
	        if (valorCierre != null && coeficiente != null)
	        {		        		        
                decimal? precioSNFijo = null;
                decimal? precioSN1 = null;
                decimal? precioSN2 = null;
                decimal? precioSN3 = null;
                decimal? precioSN4 = null;
                decimal? precioSN5 = null;
                decimal? precioSN6 = null;

		        //Recogemos los periodos del coeficiente
                EntityCollection pricingO = PeriodosCoeficiente(servicioConsultas, coeficiente);
                writelog(rutaLog + "log_Plugin.txt", "pricingO: " + pricingO.Entities.Count + "\r\n");
                if (pricingO.Entities.Count > 0)
                {
                    if (pricingO[0].Attributes.Contains("atos_pfijo"))
                        precioSNFijo = valorCierre * (Convert.ToDecimal(pricingO[0].Attributes["atos_pfijo"]) / 100);
                    else
                    {
                        if (pricingO[0].Attributes.Contains("atos_p1"))
                            precioSN1 = valorCierre * (Convert.ToDecimal(pricingO[0].Attributes["atos_p1"])/100);
                        if (pricingO[0].Attributes.Contains("atos_p2"))
                            precioSN2 = valorCierre * (Convert.ToDecimal(pricingO[0].Attributes["atos_p2"])/100);
                        if (pricingO[0].Attributes.Contains("atos_p3"))
                            precioSN3 = valorCierre * (Convert.ToDecimal(pricingO[0].Attributes["atos_p3"])/100);
                        if (pricingO[0].Attributes.Contains("atos_p4"))
                            precioSN4 = valorCierre * (Convert.ToDecimal(pricingO[0].Attributes["atos_p4"])/100);
                        if (pricingO[0].Attributes.Contains("atos_p5"))
                            precioSN5 = valorCierre * (Convert.ToDecimal(pricingO[0].Attributes["atos_p5"])/100);
                        if (pricingO[0].Attributes.Contains("atos_p6"))
                            precioSN6 = valorCierre * (Convert.ToDecimal(pricingO[0].Attributes["atos_p6"])/100);
                    }
                }

                if (precioSNFijo != null)
                    cargaPreciosFijos(precioSNFijo, costeGestion, cierre);
                else
                    cargaPreciosVariables(precioSN1, precioSN2, precioSN3, precioSN4, precioSN5, precioSN6, costeGestion, cierre);
	        }
        }

        private void cargaPreciosFijos(decimal? precioSNFijo, decimal costeGestion, Entity cierre)
        {
            cierre.Attributes["atos_preciosincostep1"] = Decimal.Round((Decimal) (precioSNFijo), _precisionDecimales, MidpointRounding.AwayFromZero);            
            cierre.Attributes["atos_preciop1"] = Decimal.Round((Decimal) (precioSNFijo + costeGestion), _precisionDecimales, MidpointRounding.AwayFromZero);   
            cierre.Attributes["atos_preciosincostep2"] = Decimal.Round((Decimal) (precioSNFijo), _precisionDecimales, MidpointRounding.AwayFromZero);           
            cierre.Attributes["atos_preciop2"] = Decimal.Round((Decimal) (precioSNFijo + costeGestion), _precisionDecimales, MidpointRounding.AwayFromZero);          
            cierre.Attributes["atos_preciosincostep3"] = Decimal.Round((Decimal) (precioSNFijo), _precisionDecimales, MidpointRounding.AwayFromZero);           
            cierre.Attributes["atos_preciop3"] = Decimal.Round((Decimal) (precioSNFijo + costeGestion), _precisionDecimales, MidpointRounding.AwayFromZero);           
            cierre.Attributes["atos_preciosincostep4"] = Decimal.Round((Decimal) (precioSNFijo), _precisionDecimales, MidpointRounding.AwayFromZero);           
            cierre.Attributes["atos_preciop4"] = Decimal.Round((Decimal) (precioSNFijo + costeGestion), _precisionDecimales, MidpointRounding.AwayFromZero);           
            cierre.Attributes["atos_preciosincostep5"] = Decimal.Round((Decimal) (precioSNFijo), _precisionDecimales, MidpointRounding.AwayFromZero);        
            cierre.Attributes["atos_preciop5"] = Decimal.Round((Decimal) (precioSNFijo + costeGestion), _precisionDecimales, MidpointRounding.AwayFromZero);
            cierre.Attributes["atos_preciosincostep6"] = Decimal.Round((Decimal) (precioSNFijo), _precisionDecimales, MidpointRounding.AwayFromZero);
            cierre.Attributes["atos_preciop6"] = Decimal.Round((Decimal)(precioSNFijo + costeGestion), _precisionDecimales, MidpointRounding.AwayFromZero);
        }

        private void cargaPreciosVariables(decimal? precioSN1,decimal? precioSN2,decimal? precioSN3,decimal? precioSN4,
            decimal? precioSN5,decimal? precioSN6,decimal costeGestion, Entity cierre)
        {
            if (precioSN1 != null)
            {
                cierre.Attributes["atos_preciosincostep1"] = Decimal.Round((Decimal)(precioSN1), _precisionDecimales, MidpointRounding.AwayFromZero);
                cierre.Attributes["atos_preciop1"] = Decimal.Round((Decimal)(precioSN1 + costeGestion), _precisionDecimales, MidpointRounding.AwayFromZero);
            }
            if (precioSN2 != null)
            {
                cierre.Attributes["atos_preciosincostep2"] = Decimal.Round((Decimal)(precioSN2), _precisionDecimales, MidpointRounding.AwayFromZero);
                cierre.Attributes["atos_preciop2"] = Decimal.Round((Decimal)(precioSN2 + costeGestion), _precisionDecimales, MidpointRounding.AwayFromZero);
            }
            if (precioSN3 != null)
            {
                cierre.Attributes["atos_preciosincostep3"] = Decimal.Round((Decimal)(precioSN3), _precisionDecimales, MidpointRounding.AwayFromZero);
                cierre.Attributes["atos_preciop3"] = Decimal.Round((Decimal)(precioSN3 + costeGestion), _precisionDecimales, MidpointRounding.AwayFromZero);
            }
            if (precioSN4 != null)
            {
                cierre.Attributes["atos_preciosincostep4"] = Decimal.Round((Decimal)(precioSN4), _precisionDecimales, MidpointRounding.AwayFromZero);
                cierre.Attributes["atos_preciop4"] = Decimal.Round((Decimal)(precioSN4 + costeGestion), _precisionDecimales, MidpointRounding.AwayFromZero);
            }
            if (precioSN5 != null)
            {
                cierre.Attributes["atos_preciosincostep5"] = Decimal.Round((Decimal)(precioSN5), _precisionDecimales, MidpointRounding.AwayFromZero);
                cierre.Attributes["atos_preciop5"] = Decimal.Round((Decimal)(precioSN5 + costeGestion), _precisionDecimales, MidpointRounding.AwayFromZero);
            }
            if (precioSN6 != null)
            {
                cierre.Attributes["atos_preciosincostep6"] = Decimal.Round((Decimal)(precioSN6), _precisionDecimales, MidpointRounding.AwayFromZero);
                cierre.Attributes["atos_preciop6"] = Decimal.Round((Decimal)(precioSN6 + costeGestion), _precisionDecimales, MidpointRounding.AwayFromZero);
            }
        }       
#endregion
    }
}