// <copyright file="Plugin.cs" company="Licence Owner">
// Copyright (c) 2015 All Rights Reserved
// </copyright>
// <author>Licence Owner</author>
// <date>1/21/2015 3:29:13 PM</date>
// <summary>Implements the Plugin Workflow Activity.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>


namespace Exportar
{
    using System;
    using System.Collections.ObjectModel;
    using System.Globalization;
    using System.Linq;
    using System.ServiceModel;
    using Microsoft.Xrm.Sdk;
    using System.IO;
    using Microsoft.Xrm.Sdk.Query;
    using System.Collections;
    using System.Xml;
    using System.Collections.Specialized;
    using System.Xml.Linq;
    using System.Net;
    using System.Text;
    using System.Collections.Generic;
    using System.Web.Services.Protocols;
   
    public class ExportarXML
    {
        #region Private Var

        // Se sustituye la variable private ITracingService por una propiedad
        private ITracingService tracingService;

        // Se sustituye la variable private IOrganizationService por una propiedad
        private IOrganizationService service;

        private WSExportaFichero.Logging logger;

        // Global Connection
        private String microservices = String.Empty;
        private String _environment = String.Empty;
        private Uri uriWS = null;
        private String _uriWS = String.Empty;
        private String _clientId = String.Empty;
        private String _secret = String.Empty;
        private Boolean _secured = false;
        private String maxtrys = String.Empty;
        private String _marketer = String.Empty;
        private String log = String.Empty;
        private String urlLog = String.Empty;
        private String pathQuery = String.Empty;
        private String fileQuery = String.Empty;

        // Dictionary
        private String _name = String.Empty;
        private String _interfase = String.Empty;
        private String _service = String.Empty;
        private String dictionary = String.Empty;
        private String Query = String.Empty;

        #endregion

        private const String sepDirectorio = "/"; // "\\";
        private const string configXML = "conf.xml";
        private const string salidaWSEmsOK = "OK";
        private String lastError = String.Empty;
        private Boolean volcarXmlEnLog;
        private int numMaxIntentos;
        private String postData = String.Empty; // Contiene el XML enviado
        private String mensajeError;
        private String LogFile;
        private List<Exception> listaErrores = new List<Exception>();
        private List<String> _errors = new List<String>();
    
        public ExportarXML(ITracingService _tracingService, IOrganizationService _service, WSExportaFichero.Logging _logger, string _LogFile) // , ref List<String> errors)
        {
            tracingService = _tracingService;
            service = _service;
            logger = _logger;
            LogFile = _LogFile;
            this.mensajeError = string.Empty;
            listaErrores.Clear();
            //_errors = errors;
        }

        public String MensajeError { get { return this.mensajeError; } }

        public String getFrame { 
            get { 
                return this.postData.Replace("\r\n", ""); 
            }
        }

        //public ITracingService getTracingService() { return this.tracingService; }

        // public IOrganizationService getService() { return this.service; }

        #region Querys

        public String query() {

            String consulta = "XXX";

            // off logger.Info("Read Consulta (In):" + consulta.Length.ToString() + " Bytes"); 

            return consulta;
        }

        public String query(Guid _id, String name)
        {
            String consulta = Query.Replace("#ID_PR#", _id.ToString());
            _name = name;

            // off logger.Info("Read Consulta (In):" + consulta.Length.ToString() + " Bytes"); 

            return consulta;
        }
        
        /*
        public String query(Guid[] _id)
        {
            Remote fetch = new Remote(tracingService, service);
            String[] _lineasQuery = fetch.ReadRemoteFileAllLines("*");
            /fetch.CloseRemoteFile();

            // off logger.Info("Read " + fileQuery + " (In):" + _lineasQuery.Length.ToString() + " Bytes"); 

            int _numId = _id.Length;
            int _numIDquery = 0;
            for (int i = 0; i < _lineasQuery.Length; i++)
                if (_lineasQuery[i].Contains("#ID_PR#"))
                    _numIDquery++;

            String _query = "";
            for (int i = 0; i < _lineasQuery.Length; i++)
            {
                if (_lineasQuery[i].Contains("#ID_PR#"))
                {
                    _query += "\t\t<filter type='or'> " + "\n";
                    for (int j = 0; j < _numId; j++)
                        _query += "\t" + _lineasQuery[i].Replace("#ID_PR#", _id[j].ToString()) + "\n";
                    _query += "\t\t</filter> " + "\n";
                }
                else
                    _query += _lineasQuery[i] + "\n";

            }
            return _query;
        }*/
        #endregion
     
        #region Read Dataverse

        public bool ReadDBconnection()
        {
            Entity resp = null;
            String secured = String.Empty;
            bool db = false;

            // logger.Info("ReadDBconnection");

            try
            {
                WSExportaFichero.GlobalParameter conn = new WSExportaFichero.GlobalParameter(tracingService, service, logger, ref _errors);

                resp = conn.GetGlobalConnection();


                if (resp != null)
                {
                    if (resp.Contains("wave1_microservicies"))
                        microservices = resp.Attributes["wave1_microservicies"].ToString();

                    if (resp.Attributes.Contains("wave1_environment"))
                        _environment = resp.Attributes["wave1_environment"].ToString();

                    if (resp.Attributes.Contains("wave1_clientid"))
                        _clientId = resp.Attributes["wave1_clientid"].ToString();

                    if (resp.Attributes.Contains("wave1_secret"))
                        _secret = resp.Attributes["wave1_secret"].ToString();

                    if (resp.Attributes.Contains("wave1_secured"))
                        secured = resp.Attributes["wave1_secured"].ToString();

                    if (resp.Attributes.Contains("wave1_maxtrys"))
                        maxtrys = resp.Attributes["wave1_maxtrys"].ToString();

                    if (resp.Attributes.Contains("wave1_marketer"))
                        _marketer = resp.Attributes["wave1_marketer"].ToString();

                    if (resp.Attributes.Contains("wave1_log"))
                        log = resp.Attributes["wave1_log"].ToString();

                    if (resp.Attributes.Contains("wave1_dirlog"))
                        urlLog = resp.Attributes["wave1_dirlog"].ToString();

                    if (resp.Attributes.Contains("wave1_pathquery"))
                        pathQuery = resp.Attributes["wave1_pathquery"].ToString();


                    /**
                     * Comprobacion
                     */
                    if (!String.IsNullOrEmpty(microservices))
                    {
                        uriWS = new Uri(microservices);
                        _uriWS = uriWS.AbsoluteUri;
                    }

                    if (String.IsNullOrEmpty(_clientId))
                        _clientId = String.Empty;

                    if (String.IsNullOrEmpty(_secret))
                        _secret = String.Empty;

                    numMaxIntentos = Int32.Parse(maxtrys);

                    _secured = Boolean.Parse(secured);
                    volcarXmlEnLog = Boolean.Parse(log);

                    if (String.IsNullOrEmpty(_environment))
                        _environment = "dummy";

                    /*
                    logger.Info("Microservices 0(in): " + _uriWS);
                    logger.Info("Environment 0(in): " + entornoWS);
                    logger.Info("Clientid 0(in): " + _clientId);
                    logger.Info("Secret 0(in): " + _secret);                    
                    logger.Info("MaxIntentos 0(in): " + numMaxIntentos);
                    logger.Info("Log 0(in): " + volcarXmlEnLog);
                    logger.Info("nombreServicio 0(in): " + environment.ToString());
                    logger.Info("log 0(in): " + log.ToString());
                    logger.Info("urlWSLog 0(in): " + urlLog.ToString());
                    logger.Info("pathQuery 0(in): " + pathQuery.ToString());
                    */

                    // off logger.Info("Declara valores Facturador: ");
                    WSExportaFichero.WSFacturador.Environment(_environment, _secured, _uriWS, _clientId, _secret);

                    db = true;
                }

            }
            catch (Exception ex)
            {
                //mensajeError = "GlobalParameter - Invalid configuration";
                //logger.Error(mensajeError);
                _errors.Add(String.Format("GlobalParameter - Invalid configuration"));
                throw ex;
            }

            return db;
        }

        public bool ReadDictionary(String DictionayId)
        {
            Entity resp = null;
            bool db = false;
            //String subquery = String.Empty;
            //String dirfilequery = String.Empty;
            String _fields = String.Empty;
            String _filter = String.Empty;

            // logger.Info("ReadDDictionary");

            try
            {
                WSExportaFichero.Dictionary dicc = new WSExportaFichero.Dictionary(tracingService, service, logger, ref _errors);

                resp = dicc.GetDictionary(DictionayId);


                if (resp != null)
                {
                    if (resp.Contains("wave1_name"))
                        _interfase = resp.Attributes["wave1_name"].ToString();

                    if (resp.Contains("wave1_service"))
                        _service = resp.Attributes["wave1_service"].ToString();

                    if (resp.Attributes.Contains("wave1_dictionary"))
                        dictionary = resp.Attributes["wave1_dictionary"].ToString();

                    if (resp.Attributes.Contains("wave1_fieldquery"))
                        _fields = resp.Attributes["wave1_fieldquery"].ToString();

                    if (resp.Attributes.Contains("wave1_query"))
                        _filter = resp.Attributes["wave1_query"].ToString();

                    Query = _filter.Replace("#FIELDS#", _fields.ToString());

                    // off logger.Trace("DictionayId: " + DictionayId);
                    // off logger.Trace("_interfase: " + _interfase);
                    // off logger.Trace("_service: " + _service);
                    // off logger.Trace("Query: " + Query);

                    db = true;
                }

            }
            catch (Exception ex)
            {
                //mensajeError = "Dictionary - Invalid configuration";
                //logger.Error(mensajeError);
                _errors.Add(String.Format("Dictionary - Invalid configuration"));
                throw ex;
            }

            return db;
        }
        
        #endregion
/*
        private String ReadFile(String FileXML)
        {
            // Lectura del Conf.XML
            Remote config = new Remote(tracingService, service);
            String consulta = config.ReadRemoteFile(FileXML);
            config.CloseRemoteFile();

            // off logger.Info("Read " + FileXML + " (In):" + consulta.Length.ToString() + " Bytes"); 

            return consulta;
        } */

        /**
        * RunFetch
        * Recupera datos desde el diccionario (usa exportarDatosEms para su funcion)
        * 
        * Param(String) fetchXml
        */
        public bool RunFetch(String fetchXml, ref string Response, ref string Frame)
        {
            bool rc = false;

            // Declara Cabecera
            Cabecera _cabecera = new Cabecera(dictionary);

            // off logger.Error("Invoca el Fetch");

            FetchExpression statement = new FetchExpression(fetchXml);
            EntityCollection _resultado = service.RetrieveMultiple(statement);

            foreach (Entity _entidad in _resultado.Entities)
            {
                EntidadCRM _entidadCRM = new EntidadCRM(_entidad, service, tracingService);
                try
                {
                    StringCollection _lineas = new StringCollection();
                    String _cuerpoXml = "<registro>";

                    for (int i = 0; i < _cabecera.len(); i++)
                    {
                        String _valor = _cabecera.col(i).Calculo.calcula(_entidadCRM);
                        if (_valor != String.Empty)
                        {
                            // Ver si se puede sustituir esto por un Decode (función Selec) en el fichero de cabecera de la entidad account
                            if (_entidad.LogicalName == "account" && (_valor == "Mayoristas" || _valor == "Retail"))
                                _valor = (_valor == "Mayoristas" ? "0" : "1");

                            _cuerpoXml = _cuerpoXml + String.Format("<{0}>{1}</{0}>", _cabecera.col(i).NbColumna, _valor);

                            // AC Informa el valor del campo en el Log
                            // String _trace = String.Format("<{0}>{1}</{0}>", _cabecera.col(i).NbColumna, _valor);
                            // logger.Info("Field: " + _trace);
                        }
                        else
                            _cuerpoXml = _cuerpoXml + String.Format("<{0}/>", _cabecera.col(i).NbColumna);
                    }

                    _cuerpoXml = _cuerpoXml + "</registro>";

                    String _xmlSalida = String.Format("<RegistroEntrada>{0}</RegistroEntrada>", _cuerpoXml);
                    _xmlSalida = _xmlSalida.Replace(',', '.');

                    Frame = createXML(_xmlSalida, _service, _interfase, _marketer);

                    rc = DispachXML(_xmlSalida, ref _entidadCRM, ref Response);

                    // Si el resultado es true blanquear el mensaje de respuesta
                    if (rc) Response = String.Empty;
                }
                catch (SoapException soapex)
                {
                    //logger.Error("Extract Data: (SoapException): " + soapex.Detail.InnerText);
                    //listaErrores.Add(new Exception(soapex.Detail.InnerText));
                    //errors.Add("Extract Data: (SoapException): " + soapex.Detail.InnerText);
                    //_errors.Add(String.Format("Extract Data: (SoapException): {0}", soapex.Detail.InnerText));
                    Response = String.Format("SoapException RunFetch: {0}", soapex.Detail.InnerText);
                    logger.Error(Response);
                }
                catch (Exception ex)
                {
                    //logger.Error("Extract Data: (Exception): " + ex.Message);
                    //listaErrores.Add(ex);
                    //errors.Add("Extract Data: (Exception): " + ex.Message);
                    //_errors.Add(String.Format("Extract Data: (SoapException): {0}", ex.Message));
                    Response = String.Format("Exception RunFetch: {0}", ex.Message.ToString());
                    logger.Error(Response);
                }
            }

            return rc;
        }

        /**
        * exportarDatosEms
        * Funcion invocada deste exportar
        * 
        * Exporta los datos al facturador (us llamaWSFacturador)
        * 
        * Param (String) xmlSalida
        * Param (String) _entidadCRM
        */
        private bool DispachXML(String xmlSalida, ref EntidadCRM _entidadCRM, ref String Response)
        {
            bool rc = false;

            try
            {
                String result = String.Empty;
                String _uriWS = "";
                ASCIIEncoding encoding = new ASCIIEncoding();
                
                // Declara el facturador
                WSExportaFichero.WSFacturador wsECP = WSExportaFichero.WSFacturador.WebServiceECP();

                // Envia en control del Logger
                wsECP.Logging(logger);                          

                if (uriWS != null) { _uriWS = uriWS.AbsoluteUri; }

                // Realiza conexion con el servicio 
                wsECP.setConexion(_uriWS, _clientId, _secret, _service, _interfase, _marketer, numMaxIntentos);

                // Setea el nombre del Log
                wsECP.setLog(urlLog, LogFile);

                //volcarXmlLog(postData, ref _entidadCRM); /*T*/
                
                // Crea el XML para el envio - Luego del setConexion
                postData = createXML(xmlSalida, _service, _interfase, _marketer);

                // Envia el XML
                rc = wsECP.send(xmlSalida, ref result);

                // XML de envio al log
                if (rc == true) 
                    logger.Info(String.Format("Send to ECP: {0}", postData));

                if (!rc)
                {
                    Response = result;
                    logger.Info("Errors: " + Response);
                }
                else if (rc && !String.IsNullOrEmpty(result) && result.Substring(0, 2).ToUpper() == salidaWSEmsOK)
                {
                    Response = result.Substring(0, 2).ToUpper();
                    logger.Info(Response);
                   
                    rc = true;
                }
            }
            catch (SoapException soapEx)
            {
                Response = String.Format("SoapException. Comm ECP: {0}", soapEx.Message);
                logger.Info(Response);
            }
            catch (Exception ex)
            {
                Response = String.Format("Exception. Comm ECP:{0}", ex.Message);
                logger.Info(Response);
            }

            if (volcarXmlEnLog) // Generar Log
            {
                onSaveLog(rc, _interfase, Response, xmlSalida);
            }

            return rc;
        }

        /**
          * Function WriteLogEntityFile
          * Crea el Log de la entidad en el servidor Web /Logs/Consultas/<subDirectory/>
          * 
          * Param (String) XML   
          * Param (String) entidad deñ CRM
          */
        private void onSaveLog(bool rc, String _interfase, String Response, String xmlSalida)
        {
            String src = string.Empty;

            // off logger.Info("\n wave1_interface \n" + _interfase);
            // off logger.Info("\n wave1_message   \n" + Response.Substring(0, 249));
            // off logger.Info("\n wave1_frame     \n" + xmlSalida.Substring(0, 3999));

            try
            {
                logger.Info("Save Log: " + volcarXmlEnLog.ToString());
      
                var SendFileLog = new Entity("wave1_sendfile_log");

                if (rc == true) src = "OK"; else src = "KO";

                DateTime aDate = DateTime.Now;

                /* Name */
                SendFileLog.Attributes["wave1_name"] = aDate.ToString("yyyy-MM-dd-HHmmss");
                /* Interface */
                SendFileLog.Attributes["wave1_interface"] = _interfase;
                /* Service */
                SendFileLog.Attributes["wave1_service"] = _service;
                /* Estado del ECP */
                SendFileLog.Attributes["wave1_state"] = src;
                /* Clave del registo */
                SendFileLog.Attributes["wave1_value"] = _name;
                /* mensaje Error */
                int lResponse = 0;
                if (Response.Length > 299) lResponse = 299; else lResponse = Response.Length;

                if (!rc) SendFileLog.Attributes["wave1_message"] = Response.Substring(0, lResponse);
                /* xml */
                int lxmlSalida = 0;
                if (xmlSalida.Length > 3999) lxmlSalida = 3999; else lxmlSalida = xmlSalida.Length;

                SendFileLog.Attributes["wave1_frame"] = xmlSalida.Substring(0, lxmlSalida);
                /* Estado */
                SendFileLog.Attributes["statecode"] = new OptionSetValue(0);
                /* Razon del estado */
                SendFileLog.Attributes["statuscode"] = new OptionSetValue(1);

                service.Create(SendFileLog);
              
            }
            catch (Exception ex)
            {
                Response = String.Format("Exception. Create Record: {0}", ex.Message);
                logger.Info(Response);
            }
        }

        /**
         * Function Call from iWriteLogEntityFile
         * Actualiza al extension basado en el numero de intentos
         * 
         * Param (String) fichero)
         * Param (String) extension
         * Param (String) texto
         * Param (int) intento = 0
         */
        /*
        public void createXMLLog(String fichero, String extension, String texto, int intento = 0)
        {
            String nombreArchivoLog = fichero;

            if (intento > 0) { 
                nombreArchivoLog += "-" + intento.ToString(); 
            }
            nombreArchivoLog += extension;

            CommonWS.CommonWS.WriteLogFile(urlLog, nombreArchivoLog, subCarpetaLog, texto);
        }*/

        // Crea el String XML
        public String createXML(String xmlSalida, String _service, String _interfase, String _marketer)
        {
            string postData = String.Format(@"<send:{0}><arg0><tipo>{1}</tipo><xml>{2}</xml><comercializadora>{3}</comercializadora></arg0></send:{0}>",
            _service, _interfase, xmlSalida, _marketer);

            return postData;
        }


        public void volcarError(String nombreFicheroLog, String displayName)
        {
            try
            {
                //tracingService.Trace("volcarError");

                String _mensajeError = String.Empty;
                foreach (Exception error in listaErrores)
                {
                    //String _mensajeError = String.Empty;

                    if (error.InnerException != null)
                    {
                        _mensajeError += String.Format("{0} Error: {1}:{2}.{3}",
                            DateTime.Now,
                            error.Message,
                            error.InnerException.Message,
                            error.InnerException.StackTrace) + Environment.NewLine;
                    }
                    else
                    {
                        _mensajeError += String.Format("{0} Error: {1}.{2}", 
                            DateTime.Now, 
                            error.Message, 
                            error.StackTrace) + Environment.NewLine;
                    }
                }

                if (_mensajeError != String.Empty)
                {
                    logger.Error(_mensajeError);
                }
            }
            catch (Exception ex)
            {
                logger.Error("Exception: " + ex.Message);
                System.Diagnostics.EventLog.WriteEntry(displayName, "Exception XXXX: " + ex.Message);
            }

        }
    }
}