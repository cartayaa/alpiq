// <copyright file="Plugin.cs" company="Licence Owner">
// Copyright (c) 2015 All Rights Reserved
// </copyright>
// <author>Licence Owner</author>
// <date>5/11/2015 5:12:10 PM</date>
// <summary>Implements the Plugin Workflow Activity.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
namespace ContratoPricing
{
    using System;
    //using System.Collections.ObjectModel;
    using System.Globalization;
    using System.Linq;
    using System.ServiceModel;
    using Microsoft.Xrm.Sdk;
    using Microsoft.Xrm.Sdk.Query;
    using System.Xml;

    /// <summary>
    /// Base class for all Plugins.
    /// </summary>    
    public class ContratoPricing : IPlugin
    {

        LocalPluginContext localcontext;

        //private bool _log = false;
        //private String ficherolog = "D:\\Tmp\\ContratoPricing.txt";
        //private const Char SEPARADOR = '#';
        private CommonWS.Log Log = null;


        /*public ContratoPricing(String parametros)
        {

            if (String.IsNullOrEmpty(parametros) == false)
            {
                String[] arrayPar = parametros.Split(SEPARADOR);
                if (arrayPar.Length > 0)
                {

                    if (arrayPar[0] == "LOG")
                        _log = true;
                    if (arrayPar.Length > 1)
                    {
                        ficherolog = arrayPar[1];
                        if (ficherolog == "")
                            _log = false;
                    }
                }
            }
        } */


        public ContratoPricing(String unsecureconfiguration, String secureconfiguration)
        {
            Log = new CommonWS.Log();
            String parametros = "";
            if (secureconfiguration != "")
                parametros = secureconfiguration;
            else if (unsecureconfiguration != "")
                parametros = unsecureconfiguration;


            if (parametros != "")
            {
                XmlDocument res = new XmlDocument();

                res.LoadXml(parametros);


                if (res.GetElementsByTagName("log").Count > 0)
                {
                    XmlNode logxml = res.GetElementsByTagName("log")[0];
                    bool _log = Convert.ToBoolean(logxml.Attributes["escribirlog"].Value);
                    String urlwslog = logxml.Attributes["urlwslog"].Value;
                    String ficherolog = logxml.Attributes["ficherolog"].Value;
                    String subcarpetalog = logxml.Attributes["subcarpetalog"].Value;
                    Log.setLog(_log, urlwslog, subcarpetalog, ficherolog, null);

                }
            }

        }


        private void writelog(String texto, bool _traza = false)
        {
            Log.writelog(texto, _traza);
            //if (_log == true)
            //    System.IO.File.AppendAllText(ficherolog, texto + "\r\n");
        }

        protected class LocalPluginContext
        {
            internal IServiceProvider ServiceProvider
            {
                get;

                private set;
            }

            internal IOrganizationService OrganizationService
            {
                get;

                private set;
            }

            internal IPluginExecutionContext PluginExecutionContext
            {
                get;

                private set;
            }

            internal ITracingService TracingService
            {
                get;

                private set;
            }

            private LocalPluginContext()
            {
            }

            internal LocalPluginContext(IServiceProvider serviceProvider)
            {
                if (serviceProvider == null)
                {
                    throw new ArgumentNullException("serviceProvider");
                }

                // Obtain the execution context service from the service provider.
                this.PluginExecutionContext = (IPluginExecutionContext)serviceProvider.GetService(typeof(IPluginExecutionContext));

                // Obtain the tracing service from the service provider.
                this.TracingService = (ITracingService)serviceProvider.GetService(typeof(ITracingService));

                // Obtain the Organization Service factory service from the service provider
                IOrganizationServiceFactory factory = (IOrganizationServiceFactory)serviceProvider.GetService(typeof(IOrganizationServiceFactory));

                // Use the factory to generate the Organization Service.
                this.OrganizationService = factory.CreateOrganizationService(this.PluginExecutionContext.UserId);
            }

            internal void Trace(string message)
            {
                if (string.IsNullOrWhiteSpace(message) || this.TracingService == null)
                {
                    return;
                }

                if (this.PluginExecutionContext == null)
                {
                    this.TracingService.Trace(message);
                }
                else
                {
                    this.TracingService.Trace(
                        "{0}, Correlation Id: {1}, Initiating User: {2}",
                        message,
                        this.PluginExecutionContext.CorrelationId,
                        this.PluginExecutionContext.InitiatingUserId);
                }
            }
        }

        private decimal tienePricingOutput(Entity _contrato)
        {
            decimal _cuantos = 0;
            QueryExpression _consulta = new QueryExpression("atos_pricingoutput");

            FilterExpression _filtro = new FilterExpression();
            _filtro.FilterOperator = LogicalOperator.And;
            ConditionExpression _condicion = new ConditionExpression();
            _condicion.AttributeName = "atos_contratoid";
            _condicion.Operator = ConditionOperator.Equal;
            _condicion.Values.Add(_contrato.Id.ToString());
            _filtro.Conditions.Add(_condicion);

            _consulta.Criteria.AddFilter(_filtro);

            _consulta.ColumnSet = new ColumnSet(true);

            EntityCollection _resultado = localcontext.OrganizationService.RetrieveMultiple(_consulta);
            if (_resultado.Entities.Count > 0)
                _cuantos = _resultado.Entities.Count;
            return _cuantos;
        }

        private void clonePricingOutput(Entity _contrato)
        {
            QueryExpression _consulta = new QueryExpression("atos_pricingoutput");

            FilterExpression _filtro = new FilterExpression();
            _filtro.FilterOperator = LogicalOperator.And;
            ConditionExpression _condicion = new ConditionExpression();
            _condicion.AttributeName = "atos_ofertaid";
            _condicion.Operator = ConditionOperator.Equal;
            _condicion.Values.Add(((EntityReference)_contrato.Attributes["atos_ofertaid"]).Id.ToString());
            _filtro.Conditions.Add(_condicion);

            _consulta.Criteria.AddFilter(_filtro);

            _consulta.ColumnSet = new ColumnSet(true);

            EntityCollection _resultado = localcontext.OrganizationService.RetrieveMultiple(_consulta);

            for (int i = 0; i < _resultado.Entities.Count; i++)
            {
                Entity _pricingOutput = _resultado.Entities[i];
                _pricingOutput.Attributes.Remove("atos_pricingoutputid");
                _pricingOutput.Attributes.Remove("atos_ofertaid");
                _pricingOutput.Attributes["atos_contratoid"] = new EntityReference("atos_contrato", _contrato.Id);
                _pricingOutput.Attributes["atos_name"] += "-" + _contrato.Attributes["atos_name"].ToString();
                localcontext.Trace(string.Format(CultureInfo.InvariantCulture,"Crea pricing output: " + _pricingOutput.Attributes["atos_name"].ToString()));
                _pricingOutput.Id = Guid.NewGuid();
                localcontext.OrganizationService.Create(_pricingOutput);
            }

        }

        /// <summary>
        /// Executes the plug-in.
        /// </summary>
        /// <param name="serviceProvider">The service provider.</param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics CRM caches plug-in instances. 
        /// The plug-in's Execute method should be written to be stateless as the constructor 
        /// is not called for every invocation of the plug-in. Also, multiple system threads 
        /// could execute the plug-in at the same time. All per invocation state information 
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        public void Execute(IServiceProvider serviceProvider)
        {

            if (serviceProvider == null)
            {
                throw new ArgumentNullException("serviceProvider");
            }

            // Construct the Local plug-in context.
            localcontext = new LocalPluginContext(serviceProvider);
            Log.tracingService = localcontext.TracingService;

            localcontext.Trace(string.Format(CultureInfo.InvariantCulture, "Entered ContratoPricing.Execute()"));


            if (localcontext.PluginExecutionContext.PostEntityImages["PostEntityImage"] == null)
            {
                localcontext.Trace(string.Format(CultureInfo.InvariantCulture, "No viene información de la entidad después de los cambios"));
                return;
            }

            // PostEntityImage
            try
            {

                if (localcontext.PluginExecutionContext.MessageName != "Update" &&
                    localcontext.PluginExecutionContext.MessageName != "Create")
                    return;

                localcontext.Trace(localcontext.PluginExecutionContext.MessageName + " - " + ((Entity)localcontext.PluginExecutionContext.InputParameters["Target"]).LogicalName);
                //Entity _contrato = (Entity)localcontext.PluginExecutionContext.InputParameters["Target"];

                if (((Entity)localcontext.PluginExecutionContext.InputParameters["Target"]).LogicalName != "atos_contrato")
                    return;


                // Se ejecuta cuando salta el update del campo código (atos_name) por el plugin de Secuencia.
                if (((Entity)localcontext.PluginExecutionContext.InputParameters["Target"]).Attributes.Contains("atos_name") == false)
                    return;
                localcontext.Trace(string.Format(CultureInfo.InvariantCulture, "Update atos_name: " + ((Entity)localcontext.PluginExecutionContext.InputParameters["Target"]).Attributes["atos_name"].ToString()));
                Entity _contrato = (Entity)localcontext.PluginExecutionContext.PostEntityImages["PostEntityImage"];
                if (_contrato.Attributes.Contains("atos_ofertaid") == false)
                    return;

                Entity _oferta = localcontext.OrganizationService.Retrieve("atos_oferta", ((EntityReference)_contrato.Attributes["atos_ofertaid"]).Id, new Microsoft.Xrm.Sdk.Query.ColumnSet(true));

                if (_oferta.Attributes.Contains("atos_ofertapadreid") == true)
                    return;

                if (_oferta.Attributes.Contains("atos_tipooferta") == false)
                    return;

                if (((OptionSetValue)_oferta.Attributes["atos_tipooferta"]).Value != 300000002) // Multipunto es 300000000
                    return;

                decimal _numeroPricingOutput = tienePricingOutput(_contrato);
                if (_numeroPricingOutput > 0)
                {
                    localcontext.Trace(string.Format(CultureInfo.InvariantCulture,"Este contrato ya tiene pricing output"));
                    return;
                    //throw new Exception("Error porque el contrato tiene " + _numeroPricingOutput.ToString() + " pricing output");
                }
                clonePricingOutput(_contrato);

                localcontext.Trace(string.Format(CultureInfo.InvariantCulture,"Fin del plugin"));
                //throw new Exception("Error provocado");
            }
            catch (FaultException<OrganizationServiceFault> e)
            {
                localcontext.Trace(string.Format(CultureInfo.InvariantCulture, "Exception: {0}", e.ToString()));

                throw;
            }
            finally
            {
                localcontext.Trace(string.Format(CultureInfo.InvariantCulture, "Exiting TermPricing.Execute()"));
            }
        }
    }
}