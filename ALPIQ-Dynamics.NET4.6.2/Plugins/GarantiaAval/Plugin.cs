// <copyright file="Plugin.cs" company="Licence Owner">
// Copyright (c) 2015 All Rights Reserved
// </copyright>
// <author>Licence Owner</author>
// <date>8/18/2015 1:38:17 PM</date>
// <summary>Implements the Plugin Workflow Activity.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
namespace GarantiaAval
{
    using System;
    using System.Collections.ObjectModel;
    using System.Globalization;
    using System.Linq;
    using System.ServiceModel;
    using Microsoft.Xrm.Sdk;
    using Microsoft.Xrm.Sdk.Query;

    /// <summary>
    /// Base class for all Plugins.
    /// </summary>    
    public class GarantiaAval : IPlugin
    {

        private ITracingService tracingService;
        private IPluginExecutionContext PluginExecutionContext; ///< Contexto de ejecución del plugin
        private IOrganizationServiceFactory factory;
        private IOrganizationService service;

        private bool _log = false; ///< Indica si se activa o no el log. Esta variable debe inicializarse según el parámetro recibido en el constructor.
        private String ficherolog = "C:\\Users\\log_GarantiaAval.txt";  ///< Fichero de log. Esta variable debe inicializarse según el parámetro recibido en el constructor.
        private const Char SEPARADOR = '#'; ///< Constante para el separador a usar en el parámetro que recibe el constructor

        /**
		// <summary>
		// Constructor de la clase
		// </summary>
        // <param name="parametros">Cadena en la que se indica si se escribe log y donde: LOG#C:\\RutaDelLog\\Fichero.log</param>
		// <remarks>
		// Recibe una cadena de texto incluyendo los parámetros (separados por el carácter #)
		// - El primer parámetro activa/desactiva la escritura del fichero log (LOG activa)
		// - El segundo parámetro es el nombre (incluyendo ruta) del fichero de log.
		// </remarks>
         */
        public GarantiaAval(String parametros)
        {
            if (String.IsNullOrEmpty(parametros) == false)
            {
                String[] arrayPar = parametros.Split(SEPARADOR);
                if (arrayPar.Length > 0)
                {

                    if (arrayPar[0] == "LOG")
                        _log = true;
                    if (arrayPar.Length > 1)
                        ficherolog = arrayPar[1];
                }
            }
        }

        /**
		// <summary>
		// Función privada para escribir una traza
        // </summary>
        // <param name="texto">Texto a escribir en el fichero de log</param>
        // <remarks>
        // Si el log está activado escribe el mensaje en el fichero de log.
        // </remarks>
         */
        private void writelog(String texto)
        {
            tracingService.Trace(texto);
            if (_log == true)
                System.IO.File.AppendAllText(ficherolog, texto + "\r\n");
        }

        private void actualizaRazonSocial(Guid razonsocialid, Guid contratoid, bool actualizarz = false)
        {
            QueryExpression _consulta = new QueryExpression("atos_contrato");
            _consulta.ColumnSet = new ColumnSet(new String[] { "statecode", "atos_importegarantiasolicitada", "atos_importeavaldefinitivosolicitado" });

            FilterExpression _filtro = new FilterExpression();
            _filtro.FilterOperator = LogicalOperator.And;
            ConditionExpression _condicion;
            writelog("Razonsocial " + razonsocialid.ToString());
            _condicion = new ConditionExpression();
            _condicion.AttributeName = "atos_razonsocialid";
            _condicion.Operator = ConditionOperator.Equal;
            _condicion.Values.Add(razonsocialid.ToString());
            _filtro.Conditions.Add(_condicion);

            /*_condicion = new ConditionExpression();
            _condicion.AttributeName = "atos_historico";
            _condicion.Operator = ConditionOperator.NotEqual;
            _condicion.Values.Add(true);
            _filtro.Conditions.Add(_condicion);
            _consulta.Criteria.AddFilter(_filtro);*/

            if (PluginExecutionContext.MessageName == "Delete" || actualizarz)
            {
                _condicion = new ConditionExpression();
                _condicion.AttributeName = "atos_contratoid";
                _condicion.Operator = ConditionOperator.NotEqual;
                _condicion.Values.Add(contratoid.ToString());
                _filtro.Conditions.Add(_condicion);
                writelog("Solo si se está borrando");
            }

            _consulta.Criteria.AddFilter(_filtro);

            decimal _garantiapdte = 0;
            decimal _garantiaactual = 0;
            decimal _avalpdte = 0;
            decimal _avalactual = 0;

            bool _haygarantiapdte = false;
            bool _haygarantiaactual = false;
            bool _hayavalpdte = false;
            bool _hayavalactual = false;

            EntityCollection _resConsulta = service.RetrieveMultiple(_consulta);
            foreach (Entity _r in _resConsulta.Entities)
            {
                if (((OptionSetValue)_r.Attributes["statecode"]).Value == 0) // activo
                {
                    if (_r.Attributes.Contains("atos_importegarantiasolicitada"))
                    {
                        _haygarantiaactual = true;
                        _garantiaactual += ((Money)_r.Attributes["atos_importegarantiasolicitada"]).Value;
                        writelog("Garantia actual " + _garantiaactual.ToString());
                    }
                    if (_r.Attributes.Contains("atos_importeavaldefinitivosolicitado"))
                    {
                        _hayavalactual = true;
                        _avalactual += ((Money)_r.Attributes["atos_importeavaldefinitivosolicitado"]).Value;
                        writelog("Aval actual " + _avalactual.ToString());
                    }
                }
                else
                {
                    if (_r.Attributes.Contains("atos_importegarantiasolicitada"))
                    {
                        _haygarantiapdte = true;
                        _garantiapdte += ((Money)_r.Attributes["atos_importegarantiasolicitada"]).Value;
                        writelog("Garantia Pendiente " + _garantiapdte.ToString());
                    }
                    if (_r.Attributes.Contains("atos_importeavaldefinitivosolicitado"))
                    {
                        _hayavalpdte = true;
                        _avalpdte += ((Money)_r.Attributes["atos_importeavaldefinitivosolicitado"]).Value;
                        writelog("Aval Pendiente " + _avalpdte.ToString());
                    }
                }
            }
            //if (_haygarantiaactual || _haygarantiapdte || _hayavalactual || _hayavalpdte)
            //{
                Entity _razonSocial = new Entity("account");
                _razonSocial.Id = razonsocialid;

                if (_haygarantiaactual)
                    _razonSocial.Attributes["atos_importeactualgarantiacliente"] = new Money(_garantiaactual);
                else
                    _razonSocial.Attributes["atos_importeactualgarantiacliente"] = null;
                if (_hayavalactual)
                    _razonSocial.Attributes["atos_importeactualaval"] = new Money(_avalactual);
                else
                    _razonSocial.Attributes["atos_importeactualaval"] = null;
                if (_haygarantiapdte)
                    _razonSocial.Attributes["atos_importependientegarantiacliente"] = new Money(_garantiapdte);
                else
                    _razonSocial.Attributes["atos_importependientegarantiacliente"] = null;
                if (_hayavalpdte)
                    _razonSocial.Attributes["atos_importependienteaval"] = new Money(_avalpdte);
                else
                    _razonSocial.Attributes["atos_importependienteaval"] = null;

                service.Update(_razonSocial);
            //}
        }

        private void actualizaCuentaNegociadora(Guid cuentanegociadoraid, Guid contratoid, bool actualizacn = false)
        {
            QueryExpression _consulta = new QueryExpression("atos_contrato");
            _consulta.ColumnSet = new ColumnSet(new String[] { "statecode", "atos_importegarantiasolicitada", "atos_importeavaldefinitivosolicitado" });

            FilterExpression _filtro = new FilterExpression();
            _filtro.FilterOperator = LogicalOperator.And;
            ConditionExpression _condicion;

            _condicion = new ConditionExpression();
            _condicion.AttributeName = "atos_cuentanegociadoraid";
            _condicion.Operator = ConditionOperator.Equal;
            _condicion.Values.Add(cuentanegociadoraid.ToString());
            _filtro.Conditions.Add(_condicion);

            _condicion = new ConditionExpression();
            _condicion.AttributeName = "atos_razonsocialid";
            _condicion.Operator = ConditionOperator.Null;
            _filtro.Conditions.Add(_condicion);

            /*_condicion = new ConditionExpression();
            _condicion.AttributeName = "atos_historico";
            _condicion.Operator = ConditionOperator.NotEqual;
            _condicion.Values.Add(true);
            _filtro.Conditions.Add(_condicion);
            _consulta.Criteria.AddFilter(_filtro);*/

            if (PluginExecutionContext.MessageName == "Delete" || actualizacn)
            {
                _condicion = new ConditionExpression();
                _condicion.AttributeName = "atos_contratoid";
                _condicion.Operator = ConditionOperator.NotEqual;
                _condicion.Values.Add(contratoid.ToString());
                _filtro.Conditions.Add(_condicion);
            }

            _consulta.Criteria.AddFilter(_filtro);

            decimal _garantiapdte = 0;
            decimal _garantiaactual = 0;
            decimal _avalpdte = 0;
            decimal _avalactual = 0;

            bool _haygarantiapdte = false;
            bool _haygarantiaactual = false;
            bool _hayavalpdte = false;
            bool _hayavalactual = false;

            EntityCollection _resConsulta = service.RetrieveMultiple(_consulta);
            foreach (Entity _r in _resConsulta.Entities)
            {
                if (((OptionSetValue)_r.Attributes["statecode"]).Value == 0) // activo
                {
                    if (_r.Attributes.Contains("atos_importegarantiasolicitada"))
                    {
                        _haygarantiaactual = true;
                        _garantiaactual += ((Money)_r.Attributes["atos_importegarantiasolicitada"]).Value;
                        writelog("Garantia actual " + _garantiaactual.ToString());
                    }
                    if (_r.Attributes.Contains("atos_importeavaldefinitivosolicitado"))
                    {
                        _hayavalactual = true;
                        _avalactual += ((Money)_r.Attributes["atos_importeavaldefinitivosolicitado"]).Value;
                        writelog("Aval actual " + _avalactual.ToString());
                    }
                }
                else
                {
                    if (_r.Attributes.Contains("atos_importegarantiasolicitada"))
                    {
                        _haygarantiapdte = true;
                        _garantiapdte += ((Money)_r.Attributes["atos_importegarantiasolicitada"]).Value;
                        writelog("Garantia Pendiente " + _garantiapdte.ToString());
                    }
                    if (_r.Attributes.Contains("atos_importeavaldefinitivosolicitado"))
                    {
                        _hayavalpdte = true;
                        _avalpdte += ((Money)_r.Attributes["atos_importeavaldefinitivosolicitado"]).Value;
                        writelog("Aval Pendiente " + _avalpdte.ToString());
                    }
                }
            }

            // Razones sociales
            writelog("Cuenta Negociadora: consulta los importes en sus razones sociales");
            _consulta = new QueryExpression("account");
            _consulta.ColumnSet = new ColumnSet(new String[] { "atos_importeactualgarantiacliente", "atos_importeactualaval", "atos_importependientegarantiacliente", "atos_importependienteaval" });

            _filtro = new FilterExpression();
            _filtro.FilterOperator = LogicalOperator.And;
            
            _condicion = new ConditionExpression();
            _condicion.AttributeName = "atos_cuentanegociadoraid";
            _condicion.Operator = ConditionOperator.Equal;
            _condicion.Values.Add(cuentanegociadoraid.ToString());
            _filtro.Conditions.Add(_condicion);


            _condicion = new ConditionExpression();
            _condicion.AttributeName = "atos_historico";
            _condicion.Operator = ConditionOperator.NotEqual;
            _condicion.Values.Add(true);
            _filtro.Conditions.Add(_condicion);

            _consulta.Criteria.AddFilter(_filtro);

            _resConsulta = service.RetrieveMultiple(_consulta);
            writelog("Cuenta Negociadora: recuperadas " + _resConsulta.Entities.Count + " razones sociales");
            foreach (Entity _r in _resConsulta.Entities)
            {
                writelog("Razón social: " + _r.Id.ToString());

                if (_r.Attributes.Contains("atos_importeactualgarantiacliente"))
                {
                    _haygarantiaactual = true;
                    _garantiaactual += ((Money)_r.Attributes["atos_importeactualgarantiacliente"]).Value;
                    writelog("Garantia actual " + _garantiaactual.ToString());
                }
                if (_r.Attributes.Contains("atos_importeactualaval"))
                {
                    _hayavalactual = true;
                    _avalactual += ((Money)_r.Attributes["atos_importeactualaval"]).Value;
                    writelog("Aval actual " + _avalactual.ToString());
                }
                if (_r.Attributes.Contains("atos_importependientegarantiacliente"))
                {
                    _haygarantiapdte = true;
                    _garantiapdte += ((Money)_r.Attributes["atos_importependientegarantiacliente"]).Value;
                    writelog("Garantia pendiente " + _garantiapdte.ToString());
                }
                if (_r.Attributes.Contains("atos_importependienteaval"))
                {
                    _hayavalpdte = true;
                    _avalpdte += ((Money)_r.Attributes["atos_importependienteaval"]).Value;
                    writelog("Aval pendiente " + _avalpdte.ToString());
                }
            }

            //if (_haygarantiaactual || _haygarantiapdte || _hayavalactual || _hayavalpdte)
            //{
                Entity _cuentanegociadora = new Entity("atos_cuentanegociadora");
                _cuentanegociadora.Id = cuentanegociadoraid;
                if (_haygarantiaactual)
                    _cuentanegociadora.Attributes["atos_importeactualgarantiacliente"] = new Money(_garantiaactual);
                else
                    _cuentanegociadora.Attributes["atos_importeactualgarantiacliente"] = null;
                if (_hayavalactual)
                    _cuentanegociadora.Attributes["atos_importeactualaval"] = new Money(_avalactual);
                else
                    _cuentanegociadora.Attributes["atos_importeactualaval"] = null;
                if (_haygarantiapdte)
                    _cuentanegociadora.Attributes["atos_importependientegarantiacliente"] = new Money(_garantiapdte);
                else
                    _cuentanegociadora.Attributes["atos_importependientegarantiacliente"] = null;
                if (_hayavalpdte)
                    _cuentanegociadora.Attributes["atos_importependienteaval"] = new Money(_avalpdte);
                else
                    _cuentanegociadora.Attributes["atos_importependienteaval"] = null;
                service.Update(_cuentanegociadora);
            //}
        }

        public void Execute(IServiceProvider serviceProvider)
        {

            tracingService = (ITracingService)serviceProvider.GetService(typeof(ITracingService));

            PluginExecutionContext = (IPluginExecutionContext)serviceProvider.GetService(typeof(IPluginExecutionContext));

            // Obtain the Organization Service factory service from the service provider
            factory = (IOrganizationServiceFactory)serviceProvider.GetService(typeof(IOrganizationServiceFactory));

            // Use the factory to generate the Organization Service.
            service = factory.CreateOrganizationService(PluginExecutionContext.UserId);

            writelog("-----------------------------------------");
            writelog(DateTime.Now.ToLocalTime().ToString());
            writelog("Plugin Importes aval y garantía");
            writelog("Mensaje: " + PluginExecutionContext.MessageName);

            if (PluginExecutionContext.MessageName != "Create" && PluginExecutionContext.MessageName != "Update") 
                return;
            
            Entity ef = (Entity)PluginExecutionContext.InputParameters["Target"];

            /*
            if (ef.Attributes.Contains("atos_importegarantiasolicitada") == false &&
                ef.Attributes.Contains("atos_importeavaldefinitivosolicitado") == false &&
                (PluginExecutionContext.MessageName == "Create" || ef.Attributes.Contains("statecode") == false))
                return;*/


            Entity _contrato;
            Entity _precontrato;
            bool modificadagarantia = false;
            bool modificadoaval = false;
            bool modificadorz = false;
            bool modificadocn = false;

            if (PluginExecutionContext.MessageName == "Create")
            {
                _contrato = ef;
                _precontrato = ef;
            }
            else
            {
                _contrato = (Entity)PluginExecutionContext.PostEntityImages["PostEntityImage"];
                _precontrato = (Entity)PluginExecutionContext.PreEntityImages["PreEntityImage"];


            }


            if (ef.Attributes.Contains("atos_importegarantiasolicitada"))
                modificadagarantia = true;
            if (ef.Attributes.Contains("atos_importeavaldefinitivosolicitado"))
                modificadoaval = true;

            if (_precontrato.Attributes.Contains("atos_importegarantiasolicitada") &&
                !_contrato.Attributes.Contains("atos_importegarantiasolicitada"))
                modificadagarantia = true;
            if (_precontrato.Attributes.Contains("atos_importeavaldefinitivosolicitado") &&
                !_contrato.Attributes.Contains("atos_importeavaldefinitivosolicitado"))
                modificadoaval = true;


            if (PluginExecutionContext.MessageName == "Update" &&
                ef.Attributes.Contains("atos_razonsocialid") &&
                (_precontrato.Attributes.Contains("atos_importegarantiasolicitada") || _precontrato.Attributes.Contains("atos_importeavaldefinitivosolicitado")))
                modificadorz = true;


            if (PluginExecutionContext.MessageName == "Update" &&
                ef.Attributes.Contains("atos_cuentanegociadoraid") &&
                (_precontrato.Attributes.Contains("atos_importegarantiasolicitada") || _precontrato.Attributes.Contains("atos_importeavaldefinitivosolicitado")))
                modificadocn = true;


            if (modificadagarantia == false &&
                modificadoaval == false &&
                modificadorz == false &&
                modificadocn == false &&
                (PluginExecutionContext.MessageName == "Create" || ef.Attributes.Contains("statecode") == false))
                return;



            if (_contrato.Attributes.Contains("atos_razonsocialid"))
            {
                writelog("Actualiza la razón social");
                actualizaRazonSocial(((EntityReference)_contrato.Attributes["atos_razonsocialid"]).Id, _contrato.Id);
                // actualiza la razón social con todos los contratos que tengan el campo padre a null
                if (modificadorz)
                    actualizaRazonSocial(((EntityReference)_precontrato.Attributes["atos_razonsocialid"]).Id, _contrato.Id, true);
            }
            if (_contrato.Attributes.Contains("atos_cuentanegociadoraid") )
            {
                writelog("Actualiza la cuenta negociadora");
                actualizaCuentaNegociadora(((EntityReference)_contrato.Attributes["atos_cuentanegociadoraid"]).Id, _contrato.Id);
                // actualiza la cuenta negociadora con todos los contratos que tengan el campo padre a null
                if (modificadocn)
                    actualizaCuentaNegociadora(((EntityReference)_precontrato.Attributes["atos_cuentanegociadoraid"]).Id, _contrato.Id, true);
            }
            writelog("====================================");
        }
    }
}