// <copyright file="Plugin.cs" company="Licence Owner">
// Copyright (c) 2015 All Rights Reserved
// </copyright>
// <author>Licence Owner</author>
// <date>7/13/2015 12:02:59 PM</date>
// <summary>Implements the Plugin Workflow Activity.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
namespace MatrizHoraria
{
    using System;
    using System.Collections.ObjectModel;
    using System.Globalization;
    using System.Linq;
    using System.ServiceModel;
    using Microsoft.Xrm.Sdk;
    using Microsoft.Xrm.Sdk.Query;

    /// <summary>
    /// Base class for all Plugins.
    /// </summary>    
    public class MatrizHoraria : IPlugin
    {
        private ITracingService tracingService;
        private IPluginExecutionContext PluginExecutionContext;
        private IOrganizationServiceFactory factory;
        private IOrganizationService service;
        
        private bool _log = false;
        private String ficherolog = "C:\\Users\\log_MatrizHoraria.txt";
        private const Char SEPARADOR = '#';

        public void Execute(IServiceProvider serviceProvider)
        {

            tracingService = (ITracingService)serviceProvider.GetService(typeof(ITracingService));

            PluginExecutionContext = (IPluginExecutionContext)serviceProvider.GetService(typeof(IPluginExecutionContext));

            // Obtain the Organization Service factory service from the service provider
            factory = (IOrganizationServiceFactory)serviceProvider.GetService(typeof(IOrganizationServiceFactory));

            // Use the factory to generate the Organization Service.
            service = factory.CreateOrganizationService(PluginExecutionContext.UserId);

            writelog("-----------------------------------------");
            writelog(DateTime.Now.ToLocalTime().ToString());
            writelog("Plugin Matriz Horaria");
            if (PluginExecutionContext.MessageName != "Update" && PluginExecutionContext.MessageName != "Create")
                return;

            Entity ef = (Entity)PluginExecutionContext.InputParameters["Target"];
            if (ef.LogicalName != "atos_contrato")
                return;

            if (!ef.Attributes.Contains("atos_commodity"))
            {
                return;
            }

            if (((OptionSetValue)ef.Attributes["atos_commodity"]).Value == 300000001)
            {
                return;
            }

            if (!ef.Attributes.Contains("atos_tarifaid") &&
                !ef.Attributes.Contains("atos_sistemaelectricoid"))
                return;

            Entity _contrato = ef;

            if (!ef.Attributes.Contains("atos_tarifaid") ||
                !ef.Attributes.Contains("atos_sistemaelectricoid"))
                _contrato = service.Retrieve("atos_contrato", ef.Id, new ColumnSet(new String[] { "atos_tarifaid", "atos_sistemaelectricoid" }));

            if (!_contrato.Attributes.Contains("atos_tarifaid") ||
                !_contrato.Attributes.Contains("atos_sistemaelectricoid"))
            {
                writelog("El contrato no tiene tarifa o sistema eléctrico");
                return;
            }


            QueryExpression query = new QueryExpression("atos_matrizportarifaysistemaelectrico");

            ConditionExpression condition = new ConditionExpression();
            condition.AttributeName = "atos_tarifaid";
            condition.Operator = ConditionOperator.Equal;
            condition.Values.Add(((EntityReference) _contrato.Attributes["atos_tarifaid"]).Id.ToString());
            query.Criteria.AddCondition(condition);

            condition = new ConditionExpression();
            condition.AttributeName = "atos_sistemaelectricoid";
            condition.Operator = ConditionOperator.Equal;
            condition.Values.Add(((EntityReference)_contrato.Attributes["atos_sistemaelectricoid"]).Id.ToString());
            query.Criteria.AddCondition(condition);

            query.ColumnSet = new ColumnSet(new String[] { "atos_matrizhorariaid" });

            writelog("Recuperando Matriz Horaria " );
            EntityCollection _matricesHorarias = service.RetrieveMultiple(query);

            if (_matricesHorarias.Entities.Count != 1)
            {
                writelog("Hay " + _matricesHorarias.Entities.Count.ToString() + " matrices horarias para la tarifa y sistema eléctrico del contrato");
                return;
            }

            if (!_matricesHorarias.Entities[0].Attributes.Contains("atos_matrizhorariaid"))
            {
                writelog("No hay matriz horaria para la tarifa y sistema eléctrico del contrato");
                return;
            }
            ef.Attributes["atos_matrizhorariaid"] = new EntityReference("atos_matrizhoraria", ((EntityReference)_matricesHorarias.Entities[0].Attributes["atos_matrizhorariaid"]).Id);

        }


        public MatrizHoraria(String parametros)
        {
            if (String.IsNullOrEmpty(parametros) == false)
            {
                String[] arrayPar = parametros.Split(SEPARADOR);
                if (arrayPar.Length > 0)
                {

                    if (arrayPar[0] == "LOG")
                        _log = true;
                    if (arrayPar.Length > 1)
                        ficherolog = arrayPar[1];
                }
            }
        }

        private void writelog(String texto)
        {
            tracingService.Trace(texto);
            if (_log == true)
                System.IO.File.AppendAllText(ficherolog, texto + "\r\n");
        }
    }
}